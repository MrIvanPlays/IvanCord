From af0262f42d21fcdc1b0adf635994cb3dde75a3d3 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Mon, 27 May 2019 16:01:55 +0300
Subject: [PATCH] Add PlaySound packet


diff --git a/api/src/main/java/com/github/mrivanplays/ivancord/api/SoundCategory.java b/api/src/main/java/com/github/mrivanplays/ivancord/api/SoundCategory.java
new file mode 100644
index 00000000..713842ad
--- /dev/null
+++ b/api/src/main/java/com/github/mrivanplays/ivancord/api/SoundCategory.java
@@ -0,0 +1,38 @@
+/*
+ * Copyright 2019 Ivan Pekov (MrIvanPlays)
+
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in the
+ * Software without restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+ * The above copyright notice and this permission notice shall be included in all copies
+ * or substantial portions of the Software.
+
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
+package com.github.mrivanplays.ivancord.api;
+
+/**
+ * Represents a sound category
+ */
+public class SoundCategory
+{
+
+    public static final int MASTER = 0;
+    public static final int MUSIC = 1;
+    public static final int RECORDS = 2;
+    public static final int WEATHER = 3;
+    public static final int BLOCKS = 4;
+    public static final int HOSTILE = 5;
+    public static final int NEUTRAL = 6;
+    public static final int PLAYERS = 7;
+    public static final int AMBIENT = 8;
+    public static final int VOICE = 9;
+}
diff --git a/api/src/main/java/com/github/mrivanplays/ivancord/api/event/SoundPlayedEvent.java b/api/src/main/java/com/github/mrivanplays/ivancord/api/event/SoundPlayedEvent.java
new file mode 100644
index 00000000..511f6511
--- /dev/null
+++ b/api/src/main/java/com/github/mrivanplays/ivancord/api/event/SoundPlayedEvent.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright 2019 Ivan Pekov (MrIvanPlays)
+
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in the
+ * Software without restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+ * The above copyright notice and this permission notice shall be included in all copies
+ * or substantial portions of the Software.
+
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
+package com.github.mrivanplays.ivancord.api.event;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import lombok.ToString;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.api.plugin.Event;
+
+/**
+ * Event, called when a sound is played
+ */
+@Getter
+@AllArgsConstructor
+@ToString
+public class SoundPlayedEvent extends Event
+{
+
+    /**
+     * The player, played to
+     */
+    private ProxiedPlayer player;
+
+    /**
+     * The sound played
+     */
+    private String sound;
+
+    /**
+     * X, Y, Z location and pitch of the sound
+     */
+    private int x, y, z, pitch;
+
+    /**
+     * Sound volume
+     */
+    private float volume;
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
index 28591dca..7228a227 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
@@ -423,5 +423,20 @@ public interface ProxiedPlayer extends Connection, CommandSender
      * @return potion effects
      */
     Collection<Integer> getCurrentPotionEffects();
+    // add api for playing sounds
+
+    /**
+     * Plays sound to the specified player
+     *
+     * @param sound sound
+     * @param category category
+     * @param x x position
+     * @param y y position
+     * @param z z position
+     * @param volume volume of the sound
+     * @param pitch pitch of the sound
+     */
+    void playSound(String sound, int category, int x, int y, int z, float volume, int pitch);
+
     // IvanCord end
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
index e4f14974..cb66c36d 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
@@ -21,6 +21,7 @@ import net.md_5.bungee.protocol.packet.LoginPayloadResponse;
 import net.md_5.bungee.protocol.packet.LoginRequest;
 import net.md_5.bungee.protocol.packet.LoginSuccess;
 import net.md_5.bungee.protocol.packet.PingPacket;
+import net.md_5.bungee.protocol.packet.PlaySound;
 import net.md_5.bungee.protocol.packet.PlayerListHeaderFooter;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
 import net.md_5.bungee.protocol.packet.PluginMessage;
@@ -185,4 +186,10 @@ public abstract class AbstractPacketHandler
     {
     }
     // Waterfall end
+
+    // IvanCord start
+    public void handle(PlaySound playSound) throws Exception
+    {
+    }
+    // IvanCord end
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
index 450b3cf4..47ba0d66 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
@@ -28,6 +28,7 @@ import net.md_5.bungee.protocol.packet.LoginPayloadResponse;
 import net.md_5.bungee.protocol.packet.LoginRequest;
 import net.md_5.bungee.protocol.packet.LoginSuccess;
 import net.md_5.bungee.protocol.packet.PingPacket;
+import net.md_5.bungee.protocol.packet.PlaySound;
 import net.md_5.bungee.protocol.packet.PlayerListHeaderFooter;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
 import net.md_5.bungee.protocol.packet.PluginMessage;
@@ -283,6 +284,16 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_13, 0x0A ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x0B )
             );
+            // IvanCord start - play sound packet
+            TO_CLIENT.registerPacket(
+                   PlaySound.class,
+                   PlaySound::new,
+                   map( ProtocolConstants.MINECRAFT_1_8, 0x29 ),
+                   map( ProtocolConstants.MINECRAFT_1_9, 0x19 ),
+                   map( ProtocolConstants.MINECRAFT_1_13, 0x1A ),
+                   map( ProtocolConstants.MINECRAFT_1_14, 0x19 )
+            );
+            // IvanCord end
         }
     },
     // 1
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlaySound.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlaySound.java
new file mode 100644
index 00000000..4b3c7edb
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlaySound.java
@@ -0,0 +1,89 @@
+/*
+ * Copyright 2019 Ivan Pekov (MrIvanPlays)
+
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in the
+ * Software without restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+ * The above copyright notice and this permission notice shall be included in all copies
+ * or substantial portions of the Software.
+
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
+package net.md_5.bungee.protocol.packet;
+
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+@NoArgsConstructor
+@AllArgsConstructor
+@Data
+public class PlaySound extends DefinedPacket
+{
+
+    private String name;
+    private int x, y, z, category, pitch;
+    private float volume;
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        name = readString( buf );
+        if ( protocolVersion > ProtocolConstants.MINECRAFT_1_8 )
+        {
+            category = readVarInt( buf );
+        }
+        x = buf.readInt();
+        y = buf.readInt();
+        z = buf.readInt();
+        volume = buf.readFloat();
+        if ( protocolVersion <= ProtocolConstants.MINECRAFT_1_9_4 )
+        {
+            pitch = buf.readUnsignedByte();
+        } else
+        {
+            String floatString = Float.toString( buf.readFloat() );
+            String floatStringCut = floatString.substring( 0, floatString.indexOf( '.' ) ).replace( "f", "" );
+            pitch = Integer.parseInt( floatStringCut.replace( ".", "" ) );
+        }
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        writeString( name, buf );
+        if ( protocolVersion > ProtocolConstants.MINECRAFT_1_8 )
+        {
+            writeVarInt( category, buf );
+        }
+        buf.writeInt( x );
+        buf.writeInt( y );
+        buf.writeInt( z );
+        buf.writeFloat( volume );
+        if ( protocolVersion <= ProtocolConstants.MINECRAFT_1_9_4 )
+        {
+            buf.writeByte( pitch );
+        } else
+        {
+            buf.writeFloat( pitch );
+        }
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        handler.handle( this );
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 6e985d36..30311a1e 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -57,6 +57,7 @@ import net.md_5.bungee.protocol.packet.Chat;
 import net.md_5.bungee.protocol.packet.ClientSettings;
 import net.md_5.bungee.protocol.packet.EntityEffect;
 import net.md_5.bungee.protocol.packet.Kick;
+import net.md_5.bungee.protocol.packet.PlaySound;
 import net.md_5.bungee.protocol.packet.PlayerListHeaderFooter;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.SetCompression;
@@ -780,6 +781,12 @@ public final class UserConnection implements ProxiedPlayer
         return Collections.unmodifiableCollection( potions.values() );
     }
 
+    // implement playSound
+    @Override
+    public void playSound(String sound, int category, int x, int y, int z, float volume, int pitch)
+    {
+        unsafe().sendPacket( new PlaySound( sound, category, x, y, z, pitch, volume ) );
+    }
     // IvanCord end
 
     // Waterfall start
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
index 693fdc6c..4bf74b72 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
@@ -56,6 +56,7 @@ import net.md_5.bungee.protocol.packet.EntityEffect;
 import net.md_5.bungee.protocol.packet.EntityRemoveEffect;
 import net.md_5.bungee.protocol.packet.KeepAlive;
 import net.md_5.bungee.protocol.packet.Kick;
+import net.md_5.bungee.protocol.packet.PlaySound;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.Respawn;
@@ -67,6 +68,7 @@ import net.md_5.bungee.protocol.packet.TabCompleteResponse;
 import net.md_5.bungee.tab.TabList;
 
 import com.github.mrivanplays.ivancord.api.event.ServerChatEvent;
+import com.github.mrivanplays.ivancord.api.event.SoundPlayedEvent;
 
 @RequiredArgsConstructor
 public class DownstreamBridge extends PacketHandler
@@ -685,6 +687,16 @@ public class DownstreamBridge extends PacketHandler
 
     // IvanCord end
 
+    // IvanCord start - handle SoundPlayedEvent
+    @Override
+    public void handle(PlaySound playSound)
+    {
+        SoundPlayedEvent event = new SoundPlayedEvent( con, playSound.getName(), playSound.getX(),
+            playSound.getY(), playSound.getZ(), playSound.getPitch(), playSound.getVolume() );
+        bungee.getPluginManager().callEvent( event );
+    }
+    // IvanCord end
+
     @Override
     public String toString()
     {
-- 
2.21.0.windows.1

