From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Tue, 25 Jun 2019 17:21:37 +0300
Subject: [PATCH] Add basic server operator techniques


diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
index 151e4e97773d87d2b73e727f635e7140fc1a6a69..fc2257080e1efc3b5f8f80cfa795a2ec3356ca78 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
@@ -299,5 +299,12 @@ public interface ProxyConfig
      * @return tcp fast open mode
      */
     int getTCPFastOpenMode();
+
+    /**
+     * Returns whether or not IvanCord should check for global op independently of {@link net.md_5.bungee.api.event.PermissionCheckEvent}
+     *
+     * @return should check for global op independently
+     */
+    boolean shouldCheckForGlobalOpIndependently();
     // IvanCord end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
index d57cc2512df9d9ceaa78027c2296d7666cf147ca..9d3cea6fd6db68ac4dbbdaaa2d3cd06d8b826245 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
@@ -412,4 +412,22 @@ public interface ProxiedPlayer extends Connection, CommandSender
      */
     @Deprecated // IvanCord
     Scoreboard getScoreboard();
+
+    // IvanCord start - add global op system
+
+    /**
+     * Returns whenever this player is a server operator on
+     * proxy level.
+     *
+     * @return <code>true</code> if op on proxy level, otherwise <code>false</code>
+     */
+    boolean isGlobalOp();
+
+    /**
+     * Sets the player's global/proxy level server operator
+     *
+     * @param globalOp value
+     */
+    void setGlobalOp(boolean globalOp);
+    // IvanCord end
 }
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/commands/op/CommandDeop.java b/proxy/src/main/java/com/mrivanplays/ivancord/commands/op/CommandDeop.java
new file mode 100644
index 0000000000000000000000000000000000000000..c8cfde033acab40305ff5e08b83159e18f0c53b8
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/commands/op/CommandDeop.java
@@ -0,0 +1,47 @@
+package com.mrivanplays.ivancord.commands.op;
+
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.ComponentBuilder;
+import net.md_5.bungee.api.chat.TextComponent;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.command.PlayerCommand;
+
+public class CommandDeop extends PlayerCommand
+{
+
+    public CommandDeop()
+    {
+        super( "gdeop", "ivancord.command.deop" );
+    }
+
+    @Override
+    public void execute(CommandSender sender, String[] args)
+    {
+        if ( args.length == 0 )
+        {
+            sender.sendMessage( errorMessage( "Usage: /gdeop <player>" ) );
+            return;
+        }
+        ProxiedPlayer player = ProxyServer.getInstance().getPlayer( args[0] );
+        if ( player == null )
+        {
+            sender.sendMessage( errorMessage( "Player not found" ) );
+            return;
+        }
+        if ( !player.isGlobalOp() )
+        {
+            sender.sendMessage( new TextComponent( "Nothing has changed, " + player.getName() + " was not a global server operator." ) );
+            return;
+        }
+        player.setGlobalOp( false );
+        sender.sendMessage( new TextComponent( "Made " + player.getName() + " not a global server operator." ) );
+    }
+
+    private BaseComponent[] errorMessage(String message)
+    {
+        return new ComponentBuilder( message ).color( ChatColor.RED ).create();
+    }
+}
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/commands/op/CommandOp.java b/proxy/src/main/java/com/mrivanplays/ivancord/commands/op/CommandOp.java
new file mode 100644
index 0000000000000000000000000000000000000000..5255a62d303fd866c6f9c168b3e16243351c6515
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/commands/op/CommandOp.java
@@ -0,0 +1,47 @@
+package com.mrivanplays.ivancord.commands.op;
+
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.ComponentBuilder;
+import net.md_5.bungee.api.chat.TextComponent;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.command.PlayerCommand;
+
+public class CommandOp extends PlayerCommand
+{
+
+    public CommandOp()
+    {
+        super( "gop", "ivancord.command.op" );
+    }
+
+    @Override
+    public void execute(CommandSender sender, String[] args)
+    {
+        if ( args.length == 0 )
+        {
+            sender.sendMessage( errorMessage( "Usage: /gop <player>" ) );
+            return;
+        }
+        ProxiedPlayer player = ProxyServer.getInstance().getPlayer( args[0] );
+        if ( player == null )
+        {
+            sender.sendMessage( errorMessage( "Player not found" ) );
+            return;
+        }
+        if ( player.isGlobalOp() )
+        {
+            sender.sendMessage( new TextComponent( "Nothing has changed, " + player.getName() + " was already a global server operator." ) );
+            return;
+        }
+        player.setGlobalOp( true );
+        sender.sendMessage( new TextComponent( "Made " + player.getName() + " a global server operator." ) );
+    }
+
+    private BaseComponent[] errorMessage(String message)
+    {
+        return new ComponentBuilder( message ).color( ChatColor.RED ).create();
+    }
+}
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/conf/IvanCordConfiguration.java b/proxy/src/main/java/com/mrivanplays/ivancord/conf/IvanCordConfiguration.java
index 077dbc9f5ba7375a3ecd9607c515ed72d3e87874..6de414ca098ea7335e63b6c672f90e4e7240ca58 100644
--- a/proxy/src/main/java/com/mrivanplays/ivancord/conf/IvanCordConfiguration.java
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/conf/IvanCordConfiguration.java
@@ -19,6 +19,8 @@ public class IvanCordConfiguration extends WaterfallConfiguration
     private boolean isTCPFastOpenEnabled = true;
     @Accessors(fluent = true)
     private int getTCPFastOpenMode = TCPFastOpenMode.CLIENT_ONLY.getValue();
+    @Accessors(fluent = true)
+    private boolean shouldCheckForGlobalOpIndependently = true;
 
     @Override
     public void load()
@@ -29,6 +31,7 @@ public class IvanCordConfiguration extends WaterfallConfiguration
         kickToLobby = config.getBoolean( "kick_to_lobby", kickToLobby );
         isTCPFastOpenEnabled = config.getBoolean( "tcp_fast_open_enabled", isTCPFastOpenEnabled );
         getTCPFastOpenMode = setupTFO( config.getInt( "tcp_fast_open_mode", getTCPFastOpenMode ) );
+        shouldCheckForGlobalOpIndependently = config.getBoolean( "should_check_for_global_op_independently", shouldCheckForGlobalOpIndependently );
     }
 
     private int setupTFO(int incoming)
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/conf/OpsConfiguration.java b/proxy/src/main/java/com/mrivanplays/ivancord/conf/OpsConfiguration.java
new file mode 100644
index 0000000000000000000000000000000000000000..8a99463de283645730f4578eb4c38ba3933c2edf
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/conf/OpsConfiguration.java
@@ -0,0 +1,71 @@
+package com.mrivanplays.ivancord.conf;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.UUID;
+import java.util.logging.Level;
+
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.config.Configuration;
+import net.md_5.bungee.config.ConfigurationProvider;
+import net.md_5.bungee.config.JsonConfiguration;
+
+public class OpsConfiguration
+{
+
+    private List<UUID> ops;
+    private File file;
+    private Configuration config;
+
+    public OpsConfiguration()
+    {
+        this.ops = new ArrayList<>();
+        this.file = new File( "ops.json" );
+        if ( !file.exists() )
+        {
+            try
+            {
+                file.createNewFile();
+            } catch ( IOException ignored )
+            {
+            }
+        }
+        try
+        {
+            this.config = ConfigurationProvider.getProvider( JsonConfiguration.class ).load( file );
+        } catch ( IOException e )
+        {
+            file.renameTo( new File( "ops.json.old" ) );
+            ProxyServer.getInstance().getLogger().log( Level.WARNING, "Cannot load ops, resetting them" );
+        }
+        if ( config == null )
+        {
+            return;
+        }
+        for ( String key : config.getKeys() )
+        {
+            if ( config.getBoolean( key ) )
+            {
+                ops.add( UUID.fromString( key ) );
+            }
+        }
+    }
+
+    public boolean isOp(UUID uuid)
+    {
+        return ops.contains( uuid );
+    }
+
+    public void setOp(UUID uuid, boolean value)
+    {
+        config.set( uuid.toString(), value );
+        try
+        {
+            ConfigurationProvider.getProvider( JsonConfiguration.class ).save( config, file );
+        } catch ( IOException ignored )
+        {
+        }
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 941021075025a3a2e2eb3be38ef928771c0e10ea..9352c074176587b67d9890525a034cd55799e4f7 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -111,6 +111,7 @@ public class BungeeCord extends ProxyServer
      */
     @Getter
     public final Configuration config = new com.mrivanplays.ivancord.conf.IvanCordConfiguration(); // IvanCord - ivancord specific configuration
+    @Getter private com.mrivanplays.ivancord.conf.OpsConfiguration opsConfiguration = new com.mrivanplays.ivancord.conf.OpsConfiguration(); // IvanCord
     /**
      * Localization formats.
      */
@@ -254,6 +255,8 @@ public class BungeeCord extends ProxyServer
 
         // IvanCord start - specific commands to IvanCord
         getPluginManager().registerCommand( null, new com.mrivanplays.ivancord.commands.CommandPlugins() );
+        getPluginManager().registerCommand( null, new com.mrivanplays.ivancord.commands.op.CommandOp() );
+        getPluginManager().registerCommand( null, new com.mrivanplays.ivancord.commands.op.CommandDeop() );
         // IvanCord end
 
         if ( !Boolean.getBoolean( "net.md_5.bungee.native.disable" ) )
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 736e4103f7182927d6a45f73e7e873b4a57565db..8794546ad2f7e5ebf34becc5f1a85607f7430265 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -111,6 +111,10 @@ public final class UserConnection implements ProxiedPlayer
     @Getter
     private Position position;
     // IvanCord end
+    // IvanCord start
+    @Getter
+    private boolean globalOp;
+    // IvanCord end
     @Getter
     private int compressionThreshold = -1;
     // Used for trying multiple servers in order
@@ -189,6 +193,9 @@ public final class UserConnection implements ProxiedPlayer
         {
             forgeClientHandler.setFmlTokenInHandshake( true );
         }
+        // IvanCord start
+        globalOp = BungeeCord.getInstance().getOpsConfiguration().isOp( getUniqueId() );
+        // IvanCord end
     }
 
     public void sendPacket(PacketWrapper packet)
@@ -612,7 +619,15 @@ public final class UserConnection implements ProxiedPlayer
     @Override
     public boolean hasPermission(String permission)
     {
-        return bungee.getPluginManager().callEvent( new PermissionCheckEvent( this, permission, permissions.contains( permission ) ) ).hasPermission();
+        // IvanCord start
+        if ( !bungee.getConfig().shouldCheckForGlobalOpIndependently() )
+        {
+            return bungee.getPluginManager().callEvent( new PermissionCheckEvent( this, permission, globalOp || permissions.contains( permission ) ) ).hasPermission();
+        } else
+        {
+            return globalOp || bungee.getPluginManager().callEvent( new PermissionCheckEvent( this, permission, permissions.contains( permission ) ) ).hasPermission();
+        }
+        // IvanCord end
     }
 
     @Override
@@ -811,6 +826,15 @@ public final class UserConnection implements ProxiedPlayer
         return serverSentScoreboard;
     }
 
+    // IvanCord start
+    @Override
+    public void setGlobalOp(boolean globalOp)
+    {
+        BungeeCord.getInstance().getOpsConfiguration().setOp( getUniqueId(), globalOp );
+        this.globalOp = globalOp;
+    }
+    // IvanCord end
+
     // IvanCord start - comment this. Not used anywhere, so...
     /*
     // Waterfall start
diff --git a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
index da9b8701c60709441fed6e02345734940935ef4d..57b0bc776f76a8c6a444e68458fffff65197036d 100644
--- a/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
+++ b/proxy/src/main/java/net/md_5/bungee/conf/YamlConfig.java
@@ -107,7 +107,7 @@ public class YamlConfig implements ConfigurationAdapter
             set( "permissions.admin", Arrays.asList( new String[]
             {
                 "bungeecord.command.alert", "bungeecord.command.end", "bungeecord.command.ip", "bungeecord.command.reload", "bungeecord.command.kick",
-                    "ivancord.command.plugins" // IvanCord - plugins command
+                    "ivancord.command.plugins", "ivancord.command.op", "ivancord.command.deop" // IvanCord - specific commands
             } ) );
         }
 
