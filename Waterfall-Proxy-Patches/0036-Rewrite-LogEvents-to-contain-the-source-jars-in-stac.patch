From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: SirYwell <hannesgreule@outlook.de>
Date: Mon, 7 Mar 2022 22:19:39 +0200
Subject: [PATCH] Rewrite LogEvents to contain the source jars in stack traces


diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java
index eb73dcc733d7caf56a79370e9a0f26df2b79eabe..e4a5d23fc2ca9df67e593830cb21bdf64686e198 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java
@@ -29,6 +29,7 @@ final class PluginClassloader extends URLClassLoader
     private final Manifest manifest;
     private final URL url;
     private final ClassLoader libraryLoader;
+    @lombok.Getter private final String fileName; // IvanCord
     //
     private Plugin plugin;
 
@@ -49,6 +50,7 @@ final class PluginClassloader extends URLClassLoader
         this.manifest = jar.getManifest();
         this.url = file.toURI().toURL();
         this.libraryLoader = libraryLoader;
+        this.fileName = file.getName(); // IvanCord
 
         allLoaders.add( this );
     }
diff --git a/log4j/src/main/resources/log4j2.xml b/log4j/src/main/resources/log4j2.xml
index e0c37b1ec429db823401a7e8ce338c0ce51520d4..4149faa38956c359e87637ee929a2446de721995 100644
--- a/log4j/src/main/resources/log4j2.xml
+++ b/log4j/src/main/resources/log4j2.xml
@@ -21,12 +21,23 @@
                 <OnStartupTriggeringPolicy />
             </Policies>
         </RollingRandomAccessFile>
+        <!-- IvanCord start -->
+        <Rewrite name="rewrite">
+            <ExtraClassInfoRewritePolicy/>
+            <AppenderRef ref="TerminalConsole" />
+            <AppenderRef ref="File" />
+        </Rewrite>
+        <!-- IvanCord end -->
     </Appenders>
 
     <Loggers>
         <Root level="info">
+            <!-- IvanCord - use AppenderRef rewrite
             <AppenderRef ref="TerminalConsole" />
             <AppenderRef ref="File" />
+            -->
+            <AppenderRef ref="rewrite" />
+            <!-- IvanCord end -->
         </Root>
     </Loggers>
 </Configuration>
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/logging/DelegateLogEvent.java b/proxy/src/main/java/com/mrivanplays/ivancord/logging/DelegateLogEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..65eb0d5ce0725f91d86a5b4b39eee8a6da41b1fb
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/logging/DelegateLogEvent.java
@@ -0,0 +1,154 @@
+package com.mrivanplays.ivancord.logging;
+
+import java.util.Map;
+import org.apache.logging.log4j.Level;
+import org.apache.logging.log4j.Marker;
+import org.apache.logging.log4j.ThreadContext;
+import org.apache.logging.log4j.core.LogEvent;
+import org.apache.logging.log4j.core.impl.ThrowableProxy;
+import org.apache.logging.log4j.core.time.Instant;
+import org.apache.logging.log4j.message.Message;
+import org.apache.logging.log4j.util.ReadOnlyStringMap;
+
+public class DelegateLogEvent implements LogEvent
+{
+
+    private final LogEvent original;
+
+    protected DelegateLogEvent(LogEvent original)
+    {
+        this.original = original;
+    }
+
+    @Override
+    public LogEvent toImmutable()
+    {
+        return this.original.toImmutable();
+    }
+
+    @Override
+    public Map<String, String> getContextMap()
+    {
+        return this.original.getContextMap();
+    }
+
+    @Override
+    public ReadOnlyStringMap getContextData()
+    {
+        return this.original.getContextData();
+    }
+
+    @Override
+    public ThreadContext.ContextStack getContextStack()
+    {
+        return this.original.getContextStack();
+    }
+
+    @Override
+    public String getLoggerFqcn()
+    {
+        return this.original.getLoggerFqcn();
+    }
+
+    @Override
+    public Level getLevel()
+    {
+        return this.original.getLevel();
+    }
+
+    @Override
+    public String getLoggerName()
+    {
+        return this.original.getLoggerName();
+    }
+
+    @Override
+    public Marker getMarker()
+    {
+        return this.original.getMarker();
+    }
+
+    @Override
+    public Message getMessage()
+    {
+        return this.original.getMessage();
+    }
+
+    @Override
+    public long getTimeMillis()
+    {
+        return this.original.getTimeMillis();
+    }
+
+    @Override
+    public Instant getInstant()
+    {
+        return this.original.getInstant();
+    }
+
+    @Override
+    public StackTraceElement getSource()
+    {
+        return this.original.getSource();
+    }
+
+    @Override
+    public String getThreadName()
+    {
+        return this.original.getThreadName();
+    }
+
+    @Override
+    public long getThreadId()
+    {
+        return this.original.getThreadId();
+    }
+
+    @Override
+    public int getThreadPriority()
+    {
+        return this.original.getThreadPriority();
+    }
+
+    @Override
+    public Throwable getThrown()
+    {
+        return this.original.getThrown();
+    }
+
+    @Override
+    public ThrowableProxy getThrownProxy()
+    {
+        return this.original.getThrownProxy();
+    }
+
+    @Override
+    public boolean isEndOfBatch()
+    {
+        return this.original.isEndOfBatch();
+    }
+
+    @Override
+    public boolean isIncludeLocation()
+    {
+        return this.original.isIncludeLocation();
+    }
+
+    @Override
+    public void setEndOfBatch(boolean endOfBatch)
+    {
+        this.original.setEndOfBatch( endOfBatch );
+    }
+
+    @Override
+    public void setIncludeLocation(boolean locationRequired)
+    {
+        this.original.setIncludeLocation( locationRequired );
+    }
+
+    @Override
+    public long getNanoTime()
+    {
+        return this.original.getNanoTime();
+    }
+}
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/logging/ExtraClassInfoRewritePolicy.java b/proxy/src/main/java/com/mrivanplays/ivancord/logging/ExtraClassInfoRewritePolicy.java
new file mode 100644
index 0000000000000000000000000000000000000000..945cba532e8d2f8542a17bacfda9a94a2e1b87c6
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/logging/ExtraClassInfoRewritePolicy.java
@@ -0,0 +1,34 @@
+package com.mrivanplays.ivancord.logging;
+
+import net.md_5.bungee.api.plugin.ExtraClassInfoLogEvent;
+import org.apache.logging.log4j.core.Core;
+import org.apache.logging.log4j.core.LogEvent;
+import org.apache.logging.log4j.core.appender.rewrite.RewritePolicy;
+import org.apache.logging.log4j.core.config.plugins.Plugin;
+import org.apache.logging.log4j.core.config.plugins.PluginFactory;
+
+@Plugin(
+    name = "ExtraClassInfoRewritePolicy",
+    category = Core.CATEGORY_NAME,
+    elementType = "rewritePolicy",
+    printObject = true
+)
+public class ExtraClassInfoRewritePolicy implements RewritePolicy
+{
+
+    @Override
+    public LogEvent rewrite(LogEvent source)
+    {
+        if ( source.getThrown() != null )
+        {
+            return new ExtraClassInfoLogEvent( source );
+        }
+        return source;
+    }
+
+    @PluginFactory
+    public static ExtraClassInfoRewritePolicy createPolicy()
+    {
+        return new ExtraClassInfoRewritePolicy();
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/api/plugin/ExtraClassInfoLogEvent.java b/proxy/src/main/java/net/md_5/bungee/api/plugin/ExtraClassInfoLogEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..47e5e9bc56324ba3b8985661668e7035bc2a3a41
--- /dev/null
+++ b/proxy/src/main/java/net/md_5/bungee/api/plugin/ExtraClassInfoLogEvent.java
@@ -0,0 +1,91 @@
+// IvanCord start
+package net.md_5.bungee.api.plugin;
+
+import com.mrivanplays.ivancord.logging.DelegateLogEvent;
+import java.util.List;
+import java.util.Optional;
+import java.util.Set;
+import java.util.stream.Collectors;
+import org.apache.logging.log4j.core.LogEvent;
+import org.apache.logging.log4j.core.impl.ExtendedClassInfo;
+import org.apache.logging.log4j.core.impl.ExtendedStackTraceElement;
+import org.apache.logging.log4j.core.impl.ThrowableProxy;
+
+public class ExtraClassInfoLogEvent extends DelegateLogEvent
+{
+
+    private boolean fixed;
+
+    public ExtraClassInfoLogEvent(LogEvent original)
+    {
+        super( original );
+    }
+
+    @Override
+    public ThrowableProxy getThrownProxy()
+    {
+        if ( fixed )
+        {
+            return super.getThrownProxy();
+        }
+        rewriteStackTrace( super.getThrownProxy() );
+        fixed = true;
+        return super.getThrownProxy();
+    }
+
+    private void rewriteStackTrace(ThrowableProxy throwable)
+    {
+        ExtendedStackTraceElement[] stackTrace = throwable.getExtendedStackTrace();
+        for ( int i = 0; i < stackTrace.length; i++ )
+        {
+            ExtendedClassInfo classInfo = stackTrace[i].getExtraClassInfo();
+            if ( classInfo.getLocation().equals( "?" ) )
+            {
+                StackTraceElement element = stackTrace[i].getStackTraceElement();
+                /* // Original java >= 9 implementation
+                String classLoaderName = element.getClassLoaderName();
+                if ( classLoaderName != null )
+                {
+                    stackTrace[i] = new ExtendedStackTraceElement(
+                        element,
+                        new ExtendedClassInfo( classInfo.getExact(), classLoaderName, "?" )
+                    );
+                }
+                 */
+                // java 8 pleb implementation (by MrIvanPlays)
+                // TODO: maybe not a stream??
+                Optional<PluginClassloader> classloader = PluginClassloader.allLoaders.stream()
+                    .filter( loader ->
+                    {
+                        try
+                        {
+                            Class.forName( element.getClassName(), false, loader );
+                            return true;
+                        } catch ( ClassNotFoundException e )
+                        {
+                            return false;
+                        }
+                    } )
+                    // assume the first one is the right one
+                    .findFirst();
+                if ( classloader.isPresent() )
+                {
+                    PluginClassloader loader = classloader.get();
+                    stackTrace[i] = new ExtendedStackTraceElement( element, new ExtendedClassInfo( classInfo.getExact(), loader.getFileName(), "?" ) );
+                }
+            }
+        }
+        if ( throwable.getCauseProxy() != null )
+        {
+            rewriteStackTrace( throwable.getCauseProxy() );
+        }
+        if ( throwable.getSuppressedProxies() != null )
+        {
+            for ( ThrowableProxy proxy : throwable.getSuppressedProxies() )
+            {
+                rewriteStackTrace( proxy );
+            }
+        }
+    }
+}
+// IvanCord end
