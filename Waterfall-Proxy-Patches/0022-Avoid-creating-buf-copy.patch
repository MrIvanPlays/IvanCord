From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Tue, 3 Dec 2019 14:03:56 +0200
Subject: [PATCH] Avoid creating buf copy


diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
index ac83e3253b4b61e314cb406a09e8308b555fe483..6c76e729d46b7a9c93e9ba6a370205e0849c3829 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
@@ -38,7 +38,11 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
         }
 
         Protocol.DirectionData prot = ( server ) ? protocol.TO_SERVER : protocol.TO_CLIENT;
+        /* IvanCord start - avoid creating buf copy
         ByteBuf slice = in.copy(); // Can't slice this one due to EntityMap :(
+         */
+        int readIrx = in.readerIndex();
+        // IvanCord end
 
         Object packetTypeInfo = null;
         try
@@ -68,13 +72,16 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
                     // Waterfall end
                     throw new BadPacketException( "Packet " + protocol + ":" + prot.getDirection() + "/" + packetId + " (" + packet.getClass().getSimpleName() + ") larger than expected, extra bytes: " + in.readableBytes() );
                 }
+                /* IvanCord start - avoid creating buf copy
             } else
             {
                 in.skipBytes( in.readableBytes() );
+                 */ // IvanCord end
             }
 
-            out.add( new PacketWrapper( packet, slice ) );
-            slice = null;
+            in.readerIndex( readIrx ); // IvanCord
+            out.add( new PacketWrapper( packet, /* slice */ in.retain() ) ); // IvanCord
+            //slice = null; // IvanCord
         } catch (BadPacketException | IndexOutOfBoundsException e) {
             // Waterfall start: Additional DoS mitigations
             if(!DEBUG) {
@@ -89,13 +96,15 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
             } else {
                 packetTypeStr = "unknown";
             }
-            throw new FastDecoderException("Error decoding packet " + packetTypeStr + " with contents:\n" + ByteBufUtil.prettyHexDump(slice), e); // Waterfall
+            throw new FastDecoderException("Error decoding packet " + packetTypeStr + " with contents:\n" + ByteBufUtil.prettyHexDump(/*slice*/in), e); // Waterfall // IvanCord - avoid creating buf copy
+            /* IvanCord start - avoid creating buf copy
         } finally
         {
             if ( slice != null )
             {
                 slice.release();
             }
+             */ // IvanCord end
         }
     }
 
