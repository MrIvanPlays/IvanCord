From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: xDark <aleshkailyashevich@gmail.com>
Date: Wed, 29 Jul 2020 16:07:27 +0300
Subject: [PATCH] Reduce load on bungee by so-called "BungeeSmasher"s

Co-Authored by: MrIvanPlays <ivan@mrivanplays.com> - ported to IvanCord

diff --git a/event/src/main/java/net/md_5/bungee/event/EventBus.java b/event/src/main/java/net/md_5/bungee/event/EventBus.java
index 77c8f73c95be78b8bd37134ce631072deb96cd64..10bcb39104cf61abc862b9c1fc4a278a4914d4d1 100644
--- a/event/src/main/java/net/md_5/bungee/event/EventBus.java
+++ b/event/src/main/java/net/md_5/bungee/event/EventBus.java
@@ -191,6 +191,7 @@ public class EventBus
                     {
                         for ( Method method : listenerHandlers.getValue() )
                         {
+                            method.setAccessible( true ); // IvanCord
                             EventHandlerMethod ehm = new EventHandlerMethod( listenerHandlers.getKey(), com.mrivanplays.ivancord.event.EventExecutor.create( method ) ); // IvanCord
                             handlersList.add( ehm );
                         }
diff --git a/native/src/main/java/net/md_5/bungee/jni/NativeCode.java b/native/src/main/java/net/md_5/bungee/jni/NativeCode.java
index a6d7cfb518420f18fd6466b892447b1462ee5201..67315501a343ffaeff2d7e87b6453a2dcb03d4b0 100644
--- a/native/src/main/java/net/md_5/bungee/jni/NativeCode.java
+++ b/native/src/main/java/net/md_5/bungee/jni/NativeCode.java
@@ -12,12 +12,21 @@ public final class NativeCode<T>
 {
 
     private final String name;
+    /* // IvanCord start
     private final Class<? extends T> javaImpl;
     private final Class<? extends T> nativeImpl;
+     */
+    private final java.util.function.Supplier<? extends T> javaImpl;
+    private final java.util.function.Supplier<? extends T> nativeImpl;
+    // IvanCord end
     //
     private boolean loaded;
 
+    /* // IvanCord start
     public NativeCode(String name, Class<? extends T> javaImpl, Class<? extends T> nativeImpl)
+     */
+    public NativeCode(String name, java.util.function.Supplier<? extends T> javaImpl, java.util.function.Supplier<? extends T> nativeImpl)
+    // IvanCord end
     {
         if ("Mac OS X".equals( System.getProperty( "os.name" ))) name = "osx-" + name; // Waterfall
         this.name = name;
@@ -27,13 +36,21 @@ public final class NativeCode<T>
 
     public T newInstance()
     {
+        // IvanCord start
+        /*
         try
         {
+         */
+            /*
             return ( loaded ) ? nativeImpl.getDeclaredConstructor().newInstance() : javaImpl.getDeclaredConstructor().newInstance();
+             */
+            return ( loaded ) ? nativeImpl.get() : javaImpl.get();
+            /*
         } catch ( ReflectiveOperationException ex )
         {
             throw new RuntimeException( "Error getting instance", ex );
         }
+             */ // IvanCord end
     }
 
     public boolean load()
diff --git a/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java b/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java
index d211cef6d592d7857f0ba828a78c547b7927f40b..f9b31f496c1839f56f7860f4fd548f8ad7f87f96 100644
--- a/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java
+++ b/native/src/main/java/net/md_5/bungee/jni/cipher/JavaCipher.java
@@ -11,7 +11,7 @@ import javax.crypto.spec.IvParameterSpec;
 public class JavaCipher implements BungeeCipher
 {
 
-    private final Cipher cipher;
+    private Cipher cipher; // IvanCord - final modifier removed
     private static final ThreadLocal<byte[]> heapInLocal = new EmptyByteThreadLocal();
     private static final ThreadLocal<byte[]> heapOutLocal = new EmptyByteThreadLocal();
 
@@ -25,14 +25,17 @@ public class JavaCipher implements BungeeCipher
         }
     }
 
+    /* // IvanCord start
     public JavaCipher() throws GeneralSecurityException
     {
         this.cipher = Cipher.getInstance( "AES/CFB8/NoPadding" );
     }
+     */ // IvanCord end
 
     @Override
     public void init(boolean forEncryption, SecretKey key) throws GeneralSecurityException
     {
+        Cipher cipher = this.cipher = Cipher.getInstance( "AES/CFB8/NoPadding" ); // IvanCord
         int mode = forEncryption ? Cipher.ENCRYPT_MODE : Cipher.DECRYPT_MODE;
         cipher.init( mode, key, new IvParameterSpec( key.getEncoded() ) );
     }
diff --git a/native/src/test/java/net/md_5/bungee/NativeCipherTest.java b/native/src/test/java/net/md_5/bungee/NativeCipherTest.java
index 72b81ab87ad600857dd625727449a45832e18f67..1b7ff35b0d6534bbf12a30c235319604f505f7c5 100644
--- a/native/src/test/java/net/md_5/bungee/NativeCipherTest.java
+++ b/native/src/test/java/net/md_5/bungee/NativeCipherTest.java
@@ -26,7 +26,7 @@ public class NativeCipherTest
     private final SecretKey secret = new SecretKeySpec( new byte[ 16 ], "AES" );
     private static final int BENCHMARK_COUNT = 4096;
     //
-    private static final NativeCode<BungeeCipher> factory = new NativeCode<>( "native-cipher", JavaCipher.class, NativeCipher.class );
+    private static final NativeCode<BungeeCipher> factory = new NativeCode<>( "native-cipher", JavaCipher::new, NativeCipher::new ); // IvanCord
 
     @Test
     public void testNative() throws Exception
diff --git a/native/src/test/java/net/md_5/bungee/NativeZlibTest.java b/native/src/test/java/net/md_5/bungee/NativeZlibTest.java
index fde626b1ac777f14600eb052f36cb4b11fa8044c..e64ea66b1e7de49834bed0b7d195e084ec3f77ca 100644
--- a/native/src/test/java/net/md_5/bungee/NativeZlibTest.java
+++ b/native/src/test/java/net/md_5/bungee/NativeZlibTest.java
@@ -15,7 +15,7 @@ import org.junit.Test;
 public class NativeZlibTest
 {
 
-    private final NativeCode<BungeeZlib> factory = new NativeCode<>( "native-compress", JavaZlib.class, NativeZlib.class );
+    private final NativeCode<BungeeZlib> factory = new NativeCode<>( "native-compress", JavaZlib::new, NativeZlib::new ); // IvanCord
 
     @Test
     public void doTest() throws DataFormatException
diff --git a/pom.xml b/pom.xml
index c0d5240c1fadd21bb375e2c84172803207dbbb0d..2669199948c9505653f8c0248359cf4414395ced 100644
--- a/pom.xml
+++ b/pom.xml
@@ -45,6 +45,7 @@
         <module>proxy</module>
         <module>query</module>
         <module>native</module>
+        <module>shared</module> <!-- IvanCord -->
     </modules>
 
     <scm>
diff --git a/protocol/pom.xml b/protocol/pom.xml
index c680bde9cf314696dd05801f6658a05269fd6aa2..2e756690b4db953ab5d88e7be2e66f800cd80d73 100644
--- a/protocol/pom.xml
+++ b/protocol/pom.xml
@@ -63,5 +63,13 @@
             <version>1.3.0</version>
             <scope>compile</scope>
         </dependency>
+        <!-- IvanCord start -->
+        <dependency>
+            <groupId>com.github.mrivanplays</groupId>
+            <artifactId>ivancord-shared</artifactId>
+            <version>${project.version}</version>
+            <scope>compile</scope>
+        </dependency>
+        <!-- IvanCord end -->
     </dependencies>
 </project>
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/BadPacketException.java b/protocol/src/main/java/net/md_5/bungee/protocol/BadPacketException.java
index f20104a23600f34c10f020ab7c055a5ea371e254..951adc0d4298e4e2a6be06d8c9fd0865468d4a47 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/BadPacketException.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/BadPacketException.java
@@ -1,6 +1,6 @@
 package net.md_5.bungee.protocol;
 
-public class BadPacketException extends RuntimeException
+public class BadPacketException extends net.md_5.bungee.util.QuietException // IvanCord
 {
     private static final boolean PROCESS_TRACES = Boolean.getBoolean("waterfall.bad-packet-traces");
 
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java b/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
index 31a954950de2f1bbb039b5d95de86df1c517d165..7aabffcd20768938972468bc4bd3cfd0e5e4c322 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/DefinedPacket.java
@@ -153,8 +153,13 @@ public abstract class DefinedPacket
         int out = 0;
         int bytes = 0;
         byte in;
+        int readable = input.readableBytes(); // IvanCord
         while ( true )
         {
+            if ( readable-- == 0 )
+            {
+                com.mrivanplays.ivancord.shared.Errors.endOfBuffer();
+            }
             // Waterfall start
             if (input.readableBytes() == 0) {
                 throw PROCESS_TRACES ? new BadPacketException("No more bytes reading varint") : NO_MORE_BYTES_EXCEPTION;
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/KickStringWriter.java b/protocol/src/main/java/net/md_5/bungee/protocol/KickStringWriter.java
index e2e34a34605e9168294b01362d1b46ecebbac80b..b3f96f82eaf2a994bbc267346d505caf9f271dfe 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/KickStringWriter.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/KickStringWriter.java
@@ -13,10 +13,13 @@ public class KickStringWriter extends MessageToByteEncoder<String>
     protected void encode(ChannelHandlerContext ctx, String msg, ByteBuf out) throws Exception
     {
         out.writeByte( 0xFF );
-        out.writeShort( msg.length() );
-        for ( char c : msg.toCharArray() )
+        // IvanCord start
+        int len = msg.length();
+        out.writeShort( len );
+        for ( int i = 0; i < len; i++ )
         {
-            out.writeChar( c );
+            out.writeChar( msg.charAt( i ) );
+            // IvanCord end
         }
     }
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
index 146a68b4022d4a0c3a32ff8a86c6f7b175a53453..99c19a07942e54699655d428cb4c73dc45aeaf12 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
@@ -54,6 +54,13 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
             // Waterfall end
 
             int packetId = DefinedPacket.readVarInt( in );
+            // IvanCord start
+            if ( server && !supportsForge && ( packetId < 0 || packetId > Protocol.MAX_PACKET_ID ) )
+            {
+                com.mrivanplays.ivancord.shared.ChannelUtil.shutdownChannel( ctx.channel(), null );
+                return;
+            }
+            // IvanCord end
             packetTypeInfo = packetId;
 
             DefinedPacket packet = prot.createPacket( packetId, protocolVersion, supportsForge );
@@ -61,7 +68,18 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
             {
                 packetTypeInfo = packet.getClass();
                 doLengthSanityChecks(in, packet, prot.getDirection(), packetId); // Waterfall: Additional DoS mitigations
+                try { // IvanCord
                 packet.read( in, prot.getDirection(), protocolVersion );
+                } catch ( Throwable t ) // IvanCord start
+                {
+                    if ( server )
+                    {
+                        com.mrivanplays.ivancord.shared.ChannelUtil.shutdownChannel( ctx.channel(), t );
+                        return;
+                    }
+                    throw t;
+                }
+                // IvanCord end
 
                 if ( in.isReadable() )
                 {
@@ -70,7 +88,14 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
                         throw PACKET_NOT_READ_TO_END;
                     }
                     // Waterfall end
+                    // IvanCord start
+                    if ( server )
+                    {
+                        com.mrivanplays.ivancord.shared.ChannelUtil.shutdownChannel( ctx.channel(), new BadPacketException( "Did not read all bytes from packet " + packet.getClass() + " " + packetId + " Protocol " + protocol + " Direction " + prot.getDirection() ) );
+                    } else
+                    {
                     throw new BadPacketException( "Did not read all bytes from packet " + packet.getClass() + " " + packetId + " Protocol " + protocol + " Direction " + prot.getDirection() );
+                    } // IvanCord end
                 }
                 /* IvanCord start - avoid creating buf copy
             } else
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/OverflowPacketException.java b/protocol/src/main/java/net/md_5/bungee/protocol/OverflowPacketException.java
index 237955ab5262adc730c1e976659809d4aec1a338..a8cb2aa76de78bf35837b0b3cbcaaf10615377ca 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/OverflowPacketException.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/OverflowPacketException.java
@@ -1,6 +1,6 @@
 package net.md_5.bungee.protocol;
 
-public class OverflowPacketException extends RuntimeException
+public class OverflowPacketException extends net.md_5.bungee.util.QuietException // IvanCord
 {
 
     public OverflowPacketException(String message)
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
index c0d371426a16565e735015b1f679278e0360ed1c..f33df1f37bda8327f12a55329b65f67d783c653c 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Varint21FrameDecoder.java
@@ -60,6 +60,9 @@ public class Varint21FrameDecoder extends ByteToMessageDecoder
             }
         }
 
-        throw new CorruptedFrameException( "length wider than 21-bit" );
+        // IvanCord start
+        setSingleDecode( true );
+        com.mrivanplays.ivancord.shared.Errors.badFrameLength();
+        // IvanCord end
     }
 }
diff --git a/proxy/pom.xml b/proxy/pom.xml
index bdf8569978dde46c3cccb905a8ae5eb571e721a4..4bd54f89927a26cea17998150f6baeea4c7f6c42 100644
--- a/proxy/pom.xml
+++ b/proxy/pom.xml
@@ -142,6 +142,14 @@
             <scope>runtime</scope>
         </dependency>
         <!-- Waterfall end -->
+        <!-- IvanCord start -->
+        <dependency>
+            <groupId>com.github.mrivanplays</groupId>
+            <artifactId>ivancord-shared</artifactId>
+            <version>${project.version}</version>
+            <scope>compile</scope>
+        </dependency>
+        <!-- IvanCord end -->
     </dependencies>
 
     <build>
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 75d894ed15e15495c443718567388667251f0644..fe461f6ce49badf4dc413c822f2f5347b801c320 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -420,7 +420,7 @@ public class BungeeCord extends ProxyServer
                 }
             };
             new ServerBootstrap()
-                    .channel( PipelineUtils.getServerChannel( info.getSocketAddress() ) )
+                    .channelFactory( PipelineUtils.getServerChannelFactory( info.getSocketAddress() ) ) // IvanCord
                     .option( ChannelOption.SO_REUSEADDR, true ) // TODO: Move this elsewhere!
                     .childAttr( PipelineUtils.LISTENER, info )
                     .childHandler( PipelineUtils.SERVER_CHILD )
@@ -447,7 +447,7 @@ public class BungeeCord extends ProxyServer
                         }
                     }
                 };
-                new RemoteQuery( this, info ).start( PipelineUtils.getDatagramChannel(), new InetSocketAddress( info.getHost().getAddress(), info.getQueryPort() ), workerEventLoopGroup, bindListener );
+                new RemoteQuery( this, info ).start( PipelineUtils.getDatagramChannelFactory(), new InetSocketAddress( info.getHost().getAddress(), info.getQueryPort() ), workerEventLoopGroup, bindListener ); // IvanCord
             }
         }
     }
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
index 1ab5a0b3c175a39ad8ca6a39ce2568be1345fc83..bba59c3c1c2acaf310a7fa16ca8b1a06a2d9e6df 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
@@ -205,7 +205,7 @@ public class BungeeServerInfo implements ServerInfo
             }
         };
         new Bootstrap()
-                .channel( PipelineUtils.getChannel( socketAddress ) )
+                .channelFactory( PipelineUtils.getChannelFactory( socketAddress ) ) // IvanCord
                 .group( BungeeCord.getInstance().workerEventLoopGroup )
                 .handler( PipelineUtils.BASE )
                 .option( ChannelOption.CONNECT_TIMEOUT_MILLIS, BungeeCord.getInstance().getConfig().getRemotePingTimeout() )
diff --git a/proxy/src/main/java/net/md_5/bungee/ConnectionThrottle.java b/proxy/src/main/java/net/md_5/bungee/ConnectionThrottle.java
index 35d533252b7009bd5f4c14b265cea0bc05f11b91..25c321a1bc62b969839cc0a2462fbbf46c77f5ce 100644
--- a/proxy/src/main/java/net/md_5/bungee/ConnectionThrottle.java
+++ b/proxy/src/main/java/net/md_5/bungee/ConnectionThrottle.java
@@ -29,7 +29,7 @@ public class ConnectionThrottle
                 .ticker( ticker )
                 .concurrencyLevel( Runtime.getRuntime().availableProcessors() )
                 .initialCapacity( 100 )
-                .expireAfterWrite( throttleTime, TimeUnit.MILLISECONDS )
+                .expireAfterAccess( throttleTime, TimeUnit.MILLISECONDS ) // IvanCord
                 .build( new CacheLoader<InetAddress, AtomicInteger>()
                 {
                     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/EncryptionUtil.java b/proxy/src/main/java/net/md_5/bungee/EncryptionUtil.java
index ff6bb8c16d4c399cbbf933e4b706fd9bf17127b5..2f41e77085a11ca5004dafc78cc5f3333331d9c7 100644
--- a/proxy/src/main/java/net/md_5/bungee/EncryptionUtil.java
+++ b/proxy/src/main/java/net/md_5/bungee/EncryptionUtil.java
@@ -31,7 +31,7 @@ public class EncryptionUtil
     public static final KeyPair keys;
     @Getter
     private static final SecretKey secret = new SecretKeySpec( new byte[ 16 ], "AES" );
-    public static final NativeCode<BungeeCipher> nativeFactory = new NativeCode<>( "native-cipher", JavaCipher.class, NativeCipher.class );
+    public static final NativeCode<BungeeCipher> nativeFactory = new NativeCode<>( "native-cipher", JavaCipher::new, NativeCipher::new ); // IvanCord
 
     static
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index f8a5e0a84f95c241e2b389251e2aaaa439e4c2df..b8445e75e1c0d0f4585afea6d523422077be64f8 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -416,7 +416,7 @@ public final class UserConnection implements ProxiedPlayer
             }
         };
         Bootstrap b = new Bootstrap()
-                .channel( PipelineUtils.getChannel( target.getAddress() ) )
+                .channelFactory( PipelineUtils.getChannelFactory( target.getAddress() ) ) // IvanCord
                 .group( ch.getHandle().eventLoop() )
                 .handler( initializer )
                 .option( ChannelOption.CONNECT_TIMEOUT_MILLIS, request.getConnectTimeout() )
diff --git a/proxy/src/main/java/net/md_5/bungee/compress/CompressFactory.java b/proxy/src/main/java/net/md_5/bungee/compress/CompressFactory.java
index 1f2d5a70aa660d97aa95e28d35702efed3898eaa..0747afe9803977e53c43b208c69f5c0bc95a636c 100644
--- a/proxy/src/main/java/net/md_5/bungee/compress/CompressFactory.java
+++ b/proxy/src/main/java/net/md_5/bungee/compress/CompressFactory.java
@@ -8,5 +8,5 @@ import net.md_5.bungee.jni.zlib.NativeZlib;
 public class CompressFactory
 {
 
-    public static final NativeCode<BungeeZlib> zlib = new NativeCode<>( "native-compress", JavaZlib.class, NativeZlib.class );
+    public static final NativeCode<BungeeZlib> zlib = new NativeCode<>( "native-compress", JavaZlib::new, NativeZlib::new ); // IvanCord
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/compress/PacketDecompressor.java b/proxy/src/main/java/net/md_5/bungee/compress/PacketDecompressor.java
index 37fe6ac73504cee4ba7fc336d6623b5c833c6d1d..3185204d5b5499dd68fc9315f959f91ead28458a 100644
--- a/proxy/src/main/java/net/md_5/bungee/compress/PacketDecompressor.java
+++ b/proxy/src/main/java/net/md_5/bungee/compress/PacketDecompressor.java
@@ -35,7 +35,7 @@ public class PacketDecompressor extends MessageToMessageDecoder<ByteBuf>
         int size = DefinedPacket.readVarInt( in );
         if ( size == 0 )
         {
-            out.add( in.slice().retain() );
+            out.add( in.retainedSlice() ); // IvanCord
             in.skipBytes( in.readableBytes() );
         } else
         {
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 887a073f79156ad426e2877bfca31a15d48d0ad8..ef811eb9e91f718b402ff05ddabe9fe3a9590d95 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -140,9 +140,11 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         if ( canSendKickMessage() )
         {
             disconnect( ChatColor.RED + Util.exception( t ) );
+        /* // IvanCord
         } else
         {
             ch.close();
+         */ // IvanCord
         }
         // IvanCord start - implement LoginCancelledEvent
         new LoginCancelledEvent( InitialHandler.this, LoginCancelledEvent.CancelReason.PROXY_EXCEPTION ).callEvent();
@@ -154,7 +156,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     {
         if ( packet.packet == null )
         {
-            throw new QuietException( "Unexpected packet received during login process! " + BufUtil.dump( packet.buf, 16 ) );
+            com.mrivanplays.ivancord.shared.Errors.unexpectedLoginPacket( packet.buf ); // IvanCord
         }
     }
 
@@ -315,6 +317,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
             handshake.setHost( split[0] );
             extraDataInHandshake = "\0" + split[1];
         }
+        ch.setForge( hasFmlHandshake() ); // IvanCord
 
         // SRV records can end with a . depending on DNS / client.
         if ( handshake.getHost().endsWith( "." ) )
@@ -359,7 +362,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                 }
                 break;
             default:
-                throw new QuietException( "Cannot request protocol " + handshake.getRequestedProtocol() );
+                com.mrivanplays.ivancord.shared.Errors.invalidProtocol( handshake.getRequestedProtocol() );
         }
     }
 
@@ -531,6 +534,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
         {
             uniqueId = offlineId;
         }
+        ch.getHandle().pipeline().replace( PipelineUtils.TIMEOUT_HANDLER, PipelineUtils.TIMEOUT_HANDLER, new io.netty.handler.timeout.ReadTimeoutHandler( bungee.config.getTimeout(), java.util.concurrent.TimeUnit.MILLISECONDS ) ); // IvanCord
 
         Callback<LoginEvent> complete = new Callback<LoginEvent>()
         {
@@ -702,4 +706,11 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     {
         return !ch.isClosed();
     }
+
+    // IvanCord start
+    public boolean hasFmlHandshake()
+    {
+        return getExtraDataInHandshake().contains( net.md_5.bungee.forge.ForgeConstants.FML_HANDSHAKE_TAG );
+    }
+    // IvanCord end
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/http/HttpClient.java b/proxy/src/main/java/net/md_5/bungee/http/HttpClient.java
index 3733742927e88c0674644b6944a707ab16ba6939..bbed9090237b8df7d770e18bf75d10f4a19bae98 100644
--- a/proxy/src/main/java/net/md_5/bungee/http/HttpClient.java
+++ b/proxy/src/main/java/net/md_5/bungee/http/HttpClient.java
@@ -30,7 +30,7 @@ public class HttpClient
     private static final Cache<String, InetAddress> addressCache = CacheBuilder.newBuilder().expireAfterWrite( 1, TimeUnit.MINUTES ).build();
     // Waterfall Start - optionally use async resolver from Netty
     private static final io.netty.resolver.dns.DnsAddressResolverGroup dnsResolverGroup =
-            new io.netty.resolver.dns.DnsAddressResolverGroup(PipelineUtils.getDatagramChannel(), io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider.INSTANCE);
+            new io.netty.resolver.dns.DnsAddressResolverGroup(PipelineUtils.getDatagramChannelFactory(), io.netty.resolver.dns.DefaultDnsServerAddressStreamProvider.INSTANCE); // IvanCord
     // Waterfall End
 
     @SuppressWarnings("UnusedAssignment")
@@ -111,7 +111,7 @@ public class HttpClient
 
     private static void getWithNettyResolver(EventLoop eventLoop, URI uri, int port, ChannelFutureListener future, Callback<String> callback, boolean ssl) {
         java.net.InetSocketAddress address = java.net.InetSocketAddress.createUnresolved(uri.getHost(), port);
-        new Bootstrap().channel( PipelineUtils.getChannel( null ) ).group( eventLoop ).handler( new HttpInitializer( callback, ssl, uri.getHost(), port ) ).
+        new Bootstrap().channelFactory( PipelineUtils.getChannelFactory( null ) ).group( eventLoop ).handler( new HttpInitializer( callback, ssl, uri.getHost(), port ) ). // IvanCord
                 option( ChannelOption.CONNECT_TIMEOUT_MILLIS, TIMEOUT ).resolver(dnsResolverGroup).remoteAddress( address ).connect().addListener( future );
     }
 
@@ -130,7 +130,7 @@ public class HttpClient
             }
             addressCache.put( uri.getHost(), inetHost );
         }
-        new Bootstrap().channel( PipelineUtils.getChannel( null ) ).group( eventLoop ).handler( new HttpInitializer( callback, ssl, uri.getHost(), port ) ).
+        new Bootstrap().channelFactory( PipelineUtils.getChannelFactory( null ) ).group( eventLoop ).handler( new HttpInitializer( callback, ssl, uri.getHost(), port ) ). // IvanCord
                 option( ChannelOption.CONNECT_TIMEOUT_MILLIS, TIMEOUT ).remoteAddress( inetHost, port ).connect().addListener( future );
     }
     // Waterfall End
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java b/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
index d45a6140780f592d9f8c67cf2f7cb83496a14681..9d768f9bd262bb87e904f8b35a5d2978e2a86c9c 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
@@ -47,6 +47,13 @@ public class ChannelWrapper
         ch.pipeline().get( MinecraftEncoder.class ).setProtocolVersion( protocol );
     }
 
+    // IvanCord start
+    public void setForge(boolean forge)
+    {
+        ch.pipeline().get( MinecraftDecoder.class ).setSupportsForge( forge );
+    }
+    // IvanCord end
+
     public void write(Object packet)
     {
         if ( !closed && ch.isActive() ) // IvanCord
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
index 270545f28e299ecd12e76213dbd2a11bcc9701e3..aae1fe508aa24b0b5a3fcd7643b1a50b3bc76009 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/HandlerBoss.java
@@ -27,6 +27,11 @@ import net.md_5.bungee.util.QuietException;
 public class HandlerBoss extends ChannelInboundHandlerAdapter
 {
 
+    // IvanCord start
+    private static long lastInitialHandlerError;
+    private static int initialHandlerSuppressedCount;
+    // IvanCord end
+
     private ChannelWrapper channel;
     private PacketHandler handler;
 
@@ -130,6 +135,22 @@ public class HandlerBoss extends ChannelInboundHandlerAdapter
     {
         if ( ctx.channel().isActive() )
         {
+            // IvanCord start
+            if ( handler instanceof InitialHandler && !com.mrivanplays.ivancord.shared.Errors.isDebug() )
+            {
+                long now = System.currentTimeMillis();
+                if ( now - lastInitialHandlerError > 1000L )
+                {
+                    lastInitialHandlerError = now;
+                    initialHandlerSuppressedCount = 0;
+                }
+                if ( ++initialHandlerSuppressedCount == 5 )
+                {
+                    com.mrivanplays.ivancord.shared.ChannelUtil.shutdownChannel( ctx.channel(), null );
+                    return;
+                }
+            }
+            // IvanCord end
             boolean logExceptions = !( handler instanceof PingHandler );
 
             if ( logExceptions )
@@ -157,6 +178,14 @@ public class HandlerBoss extends ChannelInboundHandlerAdapter
                         {
                             handler, cause.getCause().getMessage()
                         } );
+                    // IvanCord start
+                    } else if ( cause.getCause() instanceof QuietException )
+                    {
+                        ProxyServer.getInstance().getLogger().log( Level.SEVERE, "{0} - encountered exception: {1}", new Object[]
+                        {
+                             handler, cause.getCause().getMessage()
+                        } );
+                        // IvanCord end
                     }
                 } else if ( cause instanceof IOException || ( cause instanceof IllegalStateException && handler instanceof InitialHandler ) )
                 {
@@ -187,7 +216,7 @@ public class HandlerBoss extends ChannelInboundHandlerAdapter
                 }
             }
 
-            ctx.close();
+            com.mrivanplays.ivancord.shared.ChannelUtil.shutdownChannel( ctx.channel(), null ); // IvanCord
         }
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index 9e6af925a7a62f6506cafd14fc443312520c04a1..672ba15b98da0770147e9e0d005d61a0b52759d1 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -63,14 +63,14 @@ public class PipelineUtils
 
             if ( BungeeCord.getInstance().getConnectionThrottle() != null && BungeeCord.getInstance().getConnectionThrottle().throttle( remoteAddress ) )
             {
-                ch.close();
+                com.mrivanplays.ivancord.shared.ChannelUtil.shutdownChannel( ch, null, true ); // IvanCord
                 return;
             }
             ListenerInfo listener = ch.attr( LISTENER ).get();
 
             if ( BungeeCord.getInstance().getPluginManager().callEvent( new ClientConnectEvent( remoteAddress, listener ) ).isCancelled() )
             {
-                ch.close();
+                com.mrivanplays.ivancord.shared.ChannelUtil.shutdownChannel( ch, null, true ); // IvanCord
                 return;
             }
 
@@ -148,6 +148,21 @@ public class PipelineUtils
         return epoll ? new EpollEventLoopGroup( threads, factory ) : new NioEventLoopGroup( threads, factory );
     }
 
+    // IvanCord start
+    public static io.netty.channel.ChannelFactory<? extends ServerChannel> getServerChannelFactory(SocketAddress address)
+    {
+        if ( address instanceof DomainSocketAddress )
+        {
+            Preconditions.checkState( epoll, "Epoll required to have UNIX sockets" );
+
+            return EpollServerDomainSocketChannel::new;
+        }
+
+        return epoll ? EpollServerSocketChannel::new : NioServerSocketChannel::new;
+    }
+
+    @Deprecated
+    // IvanCord end
     public static Class<? extends ServerChannel> getServerChannel(SocketAddress address)
     {
         if ( address instanceof DomainSocketAddress )
@@ -160,6 +175,21 @@ public class PipelineUtils
         return epoll ? EpollServerSocketChannel.class : NioServerSocketChannel.class;
     }
 
+    // IvanCord start
+    public static io.netty.channel.ChannelFactory<? extends Channel> getChannelFactory(SocketAddress address)
+    {
+        if ( address instanceof DomainSocketAddress )
+        {
+            Preconditions.checkState( epoll, "Epoll required to have UNIX sockets" );
+
+            return EpollServerDomainSocketChannel::new;
+        }
+
+        return epoll ? EpollSocketChannel::new : NioSocketChannel::new;
+    }
+
+    @Deprecated
+    // IvanCord end
     public static Class<? extends Channel> getChannel(SocketAddress address)
     {
         if ( address instanceof DomainSocketAddress )
@@ -172,6 +202,14 @@ public class PipelineUtils
         return epoll ? EpollSocketChannel.class : NioSocketChannel.class;
     }
 
+    // IvanCord start
+    public static io.netty.channel.ChannelFactory<? extends DatagramChannel> getDatagramChannelFactory()
+    {
+        return epoll ? EpollDatagramChannel::new : NioDatagramChannel::new;
+    }
+
+    @Deprecated
+    // IvanCord end
     public static Class<? extends DatagramChannel> getDatagramChannel()
     {
         return epoll ? EpollDatagramChannel.class : NioDatagramChannel.class;
@@ -200,7 +238,7 @@ public class PipelineUtils
             ch.config().setWriteBufferWaterMark( MARK );
 
             ch.pipeline().addLast( FRAME_DECODER, new Varint21FrameDecoder() );
-            ch.pipeline().addLast( TIMEOUT_HANDLER, new ReadTimeoutHandler( BungeeCord.getInstance().config.getTimeout(), TimeUnit.MILLISECONDS ) );
+            ch.pipeline().addLast( TIMEOUT_HANDLER, new ReadTimeoutHandler( 3000L, TimeUnit.MILLISECONDS ) );
             ch.pipeline().addLast( FRAME_PREPENDER, framePrepender );
 
             ch.pipeline().addLast( BOSS_HANDLER, new HandlerBoss() );
diff --git a/proxy/src/main/java/net/md_5/bungee/util/QuietException.java b/proxy/src/main/java/net/md_5/bungee/util/QuietException.java
deleted file mode 100644
index 3c958fde058dcde19bfdbf3d74d2325e32adaf76..0000000000000000000000000000000000000000
--- a/proxy/src/main/java/net/md_5/bungee/util/QuietException.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package net.md_5.bungee.util;
-
-/**
- * Exception without a stack trace component.
- */
-public class QuietException extends RuntimeException
-{
-
-    public QuietException(String message)
-    {
-        super( message );
-    }
-
-    @Override
-    public Throwable initCause(Throwable cause)
-    {
-        return this;
-    }
-
-    @Override
-    public Throwable fillInStackTrace()
-    {
-        return this;
-    }
-}
diff --git a/query/src/main/java/net/md_5/bungee/query/RemoteQuery.java b/query/src/main/java/net/md_5/bungee/query/RemoteQuery.java
index 8becc26a5c6bcb3c8072bd9bd550e65c2c20b71b..f9e1cd5f2cd0d74440f0bc548dbff01ed5609182 100644
--- a/query/src/main/java/net/md_5/bungee/query/RemoteQuery.java
+++ b/query/src/main/java/net/md_5/bungee/query/RemoteQuery.java
@@ -16,6 +16,19 @@ public class RemoteQuery
     private final ProxyServer bungee;
     private final ListenerInfo listener;
 
+    // IvanCord start
+    public void start(io.netty.channel.ChannelFactory<? extends Channel> channelFactory, InetSocketAddress address, EventLoopGroup eventLoop, ChannelFutureListener cfl)
+    {
+        new Bootstrap()
+            .channelFactory( channelFactory )
+            .group( eventLoop )
+            .handler( new QueryHandler( bungee, listener ) )
+            .localAddress( address )
+            .bind().addListener( cfl );
+    }
+
+    @Deprecated
+    // IvanCord end
     public void start(Class<? extends Channel> channel, InetSocketAddress address, EventLoopGroup eventLoop, ChannelFutureListener future)
     {
         new Bootstrap()
diff --git a/shared/pom.xml b/shared/pom.xml
new file mode 100644
index 0000000000000000000000000000000000000000..3cedd5fe74bb650b061dafec611f6cf1df0b0e54
--- /dev/null
+++ b/shared/pom.xml
@@ -0,0 +1,34 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project xmlns="http://maven.apache.org/POM/4.0.0"
+         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
+    <parent>
+        <artifactId>ivancord-parent</artifactId>
+        <groupId>com.github.mrivanplays</groupId>
+        <version>1.16-R0.5-SNAPSHOT</version>
+    </parent>
+    <modelVersion>4.0.0</modelVersion>
+
+    <artifactId>ivancord-shared</artifactId>
+    <packaging>jar</packaging>
+
+    <name>IvanCord-Shared</name>
+    <description>Shared code accessible from all submodules</description>
+
+    <dependencies>
+        <dependency>
+            <groupId>io.netty</groupId>
+            <artifactId>netty-transport-native-unix-common</artifactId>
+            <version>${netty.version}</version>
+            <scope>compile</scope>
+        </dependency>
+        <dependency>
+            <groupId>io.netty</groupId>
+            <artifactId>netty-codec</artifactId>
+            <version>${netty.version}</version>
+            <scope>compile</scope>
+        </dependency>
+    </dependencies>
+
+
+</project>
\ No newline at end of file
diff --git a/shared/src/main/java/com/mrivanplays/ivancord/shared/ChannelDiscardHandler.java b/shared/src/main/java/com/mrivanplays/ivancord/shared/ChannelDiscardHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..b4c425e9d1f4c1d9ebbc05fddba9e4407928c9fc
--- /dev/null
+++ b/shared/src/main/java/com/mrivanplays/ivancord/shared/ChannelDiscardHandler.java
@@ -0,0 +1,36 @@
+package com.mrivanplays.ivancord.shared;
+
+import io.netty.channel.ChannelHandler;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.channel.ChannelOutboundHandlerAdapter;
+import io.netty.channel.ChannelPromise;
+import io.netty.util.ReferenceCountUtil;
+
+@ChannelHandler.Sharable
+public class ChannelDiscardHandler extends ChannelOutboundHandlerAdapter
+{
+
+    public static final ChannelDiscardHandler INSTANCE = new ChannelDiscardHandler();
+
+    @Override
+    public void read(ChannelHandlerContext ctx) throws Exception
+    {
+    }
+
+    @Override
+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception
+    {
+        ReferenceCountUtil.release( msg );
+        promise.setFailure( Errors.discard() );
+    }
+
+    @Override
+    public void flush(ChannelHandlerContext ctx) throws Exception
+    {
+    }
+
+    @Override
+    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception
+    {
+    }
+}
diff --git a/shared/src/main/java/com/mrivanplays/ivancord/shared/ChannelUtil.java b/shared/src/main/java/com/mrivanplays/ivancord/shared/ChannelUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..5ff0a1da7435ce5fe500a0da2c223f08a4e32e71
--- /dev/null
+++ b/shared/src/main/java/com/mrivanplays/ivancord/shared/ChannelUtil.java
@@ -0,0 +1,42 @@
+package com.mrivanplays.ivancord.shared;
+
+import io.netty.channel.Channel;
+import io.netty.channel.ChannelPipeline;
+import io.netty.handler.codec.ByteToMessageDecoder;
+import lombok.SneakyThrows;
+import lombok.experimental.UtilityClass;
+
+@UtilityClass
+public class ChannelUtil
+{
+
+    private final String DISCARD_HANDLER = "discard-handler";
+
+    @SneakyThrows
+    public void shutdownChannel(Channel channel, Throwable t, boolean closeForcibly)
+    {
+        if ( closeForcibly )
+        {
+            channel.unsafe().closeForcibly();
+            return;
+        }
+        ChannelPipeline pipeline = channel.pipeline();
+        if ( pipeline.first() != ChannelDiscardHandler.INSTANCE )
+        {
+            channel.config().setAutoRead( false );
+            pipeline.addFirst( DISCARD_HANDLER, ChannelDiscardHandler.INSTANCE );
+            ( (ByteToMessageDecoder) pipeline.get( "frame-decoder" ) ).setSingleDecode( true );
+            ( (ByteToMessageDecoder) pipeline.get( "legacy-decoder" ) ).setSingleDecode( true );
+            channel.close();
+            if ( Errors.isDebug() && t != null )
+            {
+                throw t;
+            }
+        }
+    }
+
+    public void shutdownChannel(Channel channel, Throwable t)
+    {
+        shutdownChannel( channel, t, false );
+    }
+}
diff --git a/shared/src/main/java/com/mrivanplays/ivancord/shared/Errors.java b/shared/src/main/java/com/mrivanplays/ivancord/shared/Errors.java
new file mode 100644
index 0000000000000000000000000000000000000000..15d4214c05eb4b83aa17665c909560d4c318f29c
--- /dev/null
+++ b/shared/src/main/java/com/mrivanplays/ivancord/shared/Errors.java
@@ -0,0 +1,73 @@
+package com.mrivanplays.ivancord.shared;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.handler.codec.CorruptedFrameException;
+import lombok.experimental.UtilityClass;
+import net.md_5.bungee.util.QuietException;
+import net.md_5.bungee.util.BufUtil;
+
+@UtilityClass
+public class Errors
+{
+    private final boolean DEBUG = Boolean.getBoolean( "net.md_5.bungee.debug" );
+    private final QuietException INVALID_PROTOCOL = newError( "Invalid protocol requested" );
+    private final QuietException UNEXPECTED_LOGIN_PACKET = newError( "Invalid packet received during login process" );
+    private final QuietException UNEXPECTED_BUFFER_END = newError( "Buffer end reached unexpectedly" );
+    private final QuietException BAD_FRAME_LENGTH = newError( "length wider than 21-bit" );
+    private final QuietException DISCARD = newError( "Discard handler is added to the pipeline" );
+
+    public void invalidProtocol(int protocol)
+    {
+        if ( DEBUG )
+        {
+            throw new IllegalStateException( "Cannot request protocol " + protocol );
+        }
+        throw INVALID_PROTOCOL;
+    }
+
+    public void unexpectedLoginPacket(ByteBuf raw)
+    {
+        if ( DEBUG )
+        {
+            throw new IllegalStateException( "Unexpected packet received during login process! " + BufUtil.dump( raw, 16 ) );
+        }
+        throw UNEXPECTED_LOGIN_PACKET;
+    }
+
+    public void endOfBuffer()
+    {
+        if ( DEBUG )
+        {
+            throw new IllegalStateException( "Buffer end reached unexpectedly" );
+        }
+        throw UNEXPECTED_BUFFER_END;
+    }
+
+    public void badFrameLength()
+    {
+        if ( DEBUG )
+        {
+            throw new CorruptedFrameException( "length wider than 21-bit" );
+        }
+        throw BAD_FRAME_LENGTH;
+    }
+
+    public Exception discard()
+    {
+        if ( DEBUG )
+        {
+            return new IllegalStateException( "Discard handler is added to the pipeline" );
+        }
+        return DISCARD;
+    }
+
+    public boolean isDebug()
+    {
+        return DEBUG;
+    }
+
+    private QuietException newError(String message)
+    {
+        return new QuietException( message + " ; Enable debugging via -Dnet.md_5.bungee.debug=true for more info." );
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/util/BufUtil.java b/shared/src/main/java/net/md_5/bungee/util/BufUtil.java
similarity index 100%
rename from proxy/src/main/java/net/md_5/bungee/util/BufUtil.java
rename to shared/src/main/java/net/md_5/bungee/util/BufUtil.java
diff --git a/shared/src/main/java/net/md_5/bungee/util/QuietException.java b/shared/src/main/java/net/md_5/bungee/util/QuietException.java
new file mode 100644
index 0000000000000000000000000000000000000000..cc344891e4ad680008e17940e2a334342f24fff1
--- /dev/null
+++ b/shared/src/main/java/net/md_5/bungee/util/QuietException.java
@@ -0,0 +1,42 @@
+package net.md_5.bungee.util;
+
+/**
+ * Exception without a stack trace component.
+ */
+public class QuietException extends RuntimeException
+{
+
+    public QuietException(String message)
+    {
+        super( message );
+    }
+
+    // IvanCord start
+    public QuietException(String message, Throwable cause)
+    {
+        super( message, cause );
+    }
+
+    public QuietException(Throwable cause)
+    {
+        super( cause );
+    }
+
+    public QuietException(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace)
+    {
+        super( message, cause, enableSuppression, writableStackTrace );
+    }
+    // IvanCord end
+
+    @Override
+    public Throwable initCause(Throwable cause)
+    {
+        return this;
+    }
+
+    @Override
+    public Throwable fillInStackTrace()
+    {
+        return this;
+    }
+}
