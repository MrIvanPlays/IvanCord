From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Wed, 12 Jun 2019 20:04:42 +0300
Subject: [PATCH] Add player positioning api


diff --git a/api/src/main/java/com/mrivanplays/ivancord/api/Position.java b/api/src/main/java/com/mrivanplays/ivancord/api/Position.java
new file mode 100644
index 0000000000000000000000000000000000000000..cc45311629bcb92bb8d93ec43e422740487e08cd
--- /dev/null
+++ b/api/src/main/java/com/mrivanplays/ivancord/api/Position.java
@@ -0,0 +1,47 @@
+package com.mrivanplays.ivancord.api;
+
+import lombok.AllArgsConstructor;
+import lombok.EqualsAndHashCode;
+import lombok.Getter;
+import lombok.ToString;
+
+/**
+ * Represents a player position
+ */
+@Getter
+@AllArgsConstructor
+@ToString
+@EqualsAndHashCode
+public class Position
+{
+
+    /**
+     * X axis
+     */
+    private double x;
+
+    /**
+     * Y axis
+     */
+    private double y;
+
+    /**
+     * Z axis
+     */
+    private double z;
+
+    /**
+     * Yaw axis
+     */
+    private float yaw;
+
+    /**
+     * Pitch axis
+     */
+    private float pitch;
+
+    /**
+     * Does the player is on ground
+     */
+    private boolean onGround;
+}
diff --git a/api/src/main/java/com/mrivanplays/ivancord/api/event/PlayerChangePositionEvent.java b/api/src/main/java/com/mrivanplays/ivancord/api/event/PlayerChangePositionEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..cf92ce1221e8d7b19f7b4f12e6e1d6393eb897e2
--- /dev/null
+++ b/api/src/main/java/com/mrivanplays/ivancord/api/event/PlayerChangePositionEvent.java
@@ -0,0 +1,46 @@
+package com.mrivanplays.ivancord.api.event;
+
+import com.mrivanplays.ivancord.api.Position;
+import lombok.EqualsAndHashCode;
+import lombok.Getter;
+import lombok.Setter;
+import lombok.ToString;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.api.plugin.Cancellable;
+import net.md_5.bungee.api.plugin.Event;
+
+/**
+ * Event, called when player is about to change his position.
+ */
+@ToString
+@EqualsAndHashCode(callSuper = false)
+@Getter
+public class PlayerChangePositionEvent extends Event implements Cancellable
+{
+
+    @Setter
+    private boolean cancelled;
+
+    /**
+     * The {@link ProxiedPlayer}, which changed position.
+     */
+    private ProxiedPlayer player;
+
+    /**
+     * The position the {@link ProxiedPlayer} moved from.
+     */
+    private Position movedFrom;
+
+    /**
+     * The position the {@link ProxiedPlayer} moved to.
+     */
+    @Setter
+    private Position movedTo;
+
+    public PlayerChangePositionEvent(ProxiedPlayer player, Position movedFrom, Position movedTo)
+    {
+        this.player = player;
+        this.movedFrom = movedFrom;
+        this.movedTo = movedTo;
+    }
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
index 5e7b51f80009790fc69776ed7207a90705ec1f67..6a4973fed3127bd4eb2a4207204b9df2d1a3af0b 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
@@ -13,6 +13,7 @@ import net.md_5.bungee.api.chat.BaseComponent;
 import net.md_5.bungee.api.config.ServerInfo;
 import net.md_5.bungee.api.event.ServerConnectEvent;
 import net.md_5.bungee.api.score.Scoreboard;
+import com.mrivanplays.ivancord.api.Position; // IvanCord
 
 /**
  * Represents a player who's connection is being connected to somewhere else,
@@ -268,6 +269,16 @@ public interface ProxiedPlayer extends Connection, CommandSender
      */
     byte getViewDistance();
 
+    // IvanCord start - add player position api
+
+    /**
+     * Gets the player's position
+     *
+     * @return player position
+     */
+    Position getPosition();
+    // IvanCord end
+
     /**
      * Gets this player's chat mode.
      *
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
index e4f149748685e7e588dfc13b05f3d1fb81334367..e893a4727002f5ca84de11fc4f316ecd05455184 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
@@ -23,6 +23,7 @@ import net.md_5.bungee.protocol.packet.LoginSuccess;
 import net.md_5.bungee.protocol.packet.PingPacket;
 import net.md_5.bungee.protocol.packet.PlayerListHeaderFooter;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
+import net.md_5.bungee.protocol.packet.PlayerPosition; // IvanCord
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.Respawn;
 import net.md_5.bungee.protocol.packet.ScoreboardDisplay;
@@ -176,6 +177,12 @@ public abstract class AbstractPacketHandler
     {
     }
 
+    // IvanCord start
+    public void handle(PlayerPosition playerPosition) throws Exception
+    {
+    }
+    // IvanCord end
+
     // Waterfall start
     public void handle(EntityEffect entityEffect) throws Exception
     {
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
index abe97f7b32e20e20f59e87f0281c8360db48744f..1b4b2b59557d3978095a63cda95032f69fb77d25 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
@@ -29,6 +29,7 @@ import net.md_5.bungee.protocol.packet.LoginSuccess;
 import net.md_5.bungee.protocol.packet.PingPacket;
 import net.md_5.bungee.protocol.packet.PlayerListHeaderFooter;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
+import net.md_5.bungee.protocol.packet.PlayerPosition;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.Respawn;
 // IvanCord - comment these
@@ -314,6 +315,18 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_13, 0x0A ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x0B )
             );
+            // IvanCord start - add player position
+            TO_SERVER.registerPacket(
+                    PlayerPosition.class,
+                    PlayerPosition::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x06 ),
+                    map( ProtocolConstants.MINECRAFT_1_9, 0x0D ),
+                    map( ProtocolConstants.MINECRAFT_1_12, 0x0F ),
+                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x0E ),
+                    map( ProtocolConstants.MINECRAFT_1_13, 0x11 ),
+                    map( ProtocolConstants.MINECRAFT_1_14, 0x12 )
+            );
+            // IvanCord end
         }
     },
     // 1
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerPosition.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerPosition.java
new file mode 100644
index 0000000000000000000000000000000000000000..f23fe50e8c9a22ce934f5797f9e75fb2767a9479
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerPosition.java
@@ -0,0 +1,54 @@
+// IvanCord start
+package net.md_5.bungee.protocol.packet;
+
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+
+@AllArgsConstructor
+@NoArgsConstructor
+@Data
+@EqualsAndHashCode(callSuper = false)
+public class PlayerPosition extends DefinedPacket
+{
+
+    private double x;
+    private double y;
+    private double z;
+    private float yaw;
+    private float pitch;
+    private boolean onGround;
+
+    @Override
+    public void read(ByteBuf buf)
+    {
+        x = buf.readDouble();
+        y = buf.readDouble();
+        z = buf.readDouble();
+        yaw = buf.readFloat();
+        pitch = buf.readFloat();
+        onGround = buf.readBoolean();
+    }
+
+    @Override
+    public void write(ByteBuf buf)
+    {
+        buf.writeDouble( x );
+        buf.writeDouble( y );
+        buf.writeDouble( z );
+        buf.writeFloat( yaw );
+        buf.writeFloat( pitch );
+        buf.writeBoolean( onGround );
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        handler.handle( this );
+    }
+}
+// IvanCord end
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 599ff5dc95a5f660ff66bce7fce059afd8c3d845..23a603c704ed3d49f967a63b803779165d424b4f 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -67,6 +67,7 @@ import net.md_5.bungee.tab.ServerUnique;
 import net.md_5.bungee.tab.TabList;
 import net.md_5.bungee.util.CaseInsensitiveSet;
 import net.md_5.bungee.util.ChatComponentTransformer;
+import com.mrivanplays.ivancord.api.Position; // IvanCord
 
 @RequiredArgsConstructor
 public final class UserConnection implements ProxiedPlayer
@@ -107,6 +108,10 @@ public final class UserConnection implements ProxiedPlayer
     @Getter
     @Setter
     private int gamemode;
+    // IvanCord start
+    @Getter
+    private Position position;
+    // IvanCord end
     @Getter
     private int compressionThreshold = -1;
     // Used for trying multiple servers in order
@@ -640,6 +645,12 @@ public final class UserConnection implements ProxiedPlayer
     {
         return ( settings != null ) ? settings.getViewDistance() : 10;
     }
+    // IvanCord start
+    public void setPosition(Position position)
+    {
+        this.position = position;
+    }
+    // IvanCord end
 
     @Override
     public ProxiedPlayer.ChatMode getChatMode()
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
index d6ecd645391805e4cf43608f9a5f78942deb05eb..73dbab919ba87a9a637e7f3a6c454266a6c5e3e2 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
@@ -66,6 +66,7 @@ import net.md_5.bungee.protocol.packet.EntityRemoveEffect;
 import net.md_5.bungee.protocol.packet.KeepAlive;
 import net.md_5.bungee.protocol.packet.Kick;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
+import net.md_5.bungee.protocol.packet.PlayerPosition; // IvanCord
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.Respawn;
 // IvanCord - comment not needed imports
@@ -77,6 +78,10 @@ import net.md_5.bungee.protocol.packet.ScoreboardScore;
 import net.md_5.bungee.protocol.packet.SetCompression;
 import net.md_5.bungee.protocol.packet.TabCompleteResponse;
 import net.md_5.bungee.tab.TabList;
+// IvanCord start
+import com.mrivanplays.ivancord.api.Position;
+import com.mrivanplays.ivancord.api.event.PlayerChangePositionEvent;
+// IvanCord end
 
 @RequiredArgsConstructor
 public class DownstreamBridge extends PacketHandler
@@ -728,6 +733,41 @@ public class DownstreamBridge extends PacketHandler
         }
     }
 
+    // IvanCord start
+    @Override
+    public void handle(PlayerPosition pac)
+    {
+        Position packetPos = new Position( pac.getX(), pac.getY(), pac.getZ(), pac.getYaw(), pac.getPitch(), pac.isOnGround() );
+        Position conPos = con.getPosition();
+        boolean changed = true;
+        if ( packetPos.equals( conPos ) )
+        {
+            changed = false;
+        }
+        if ( changed )
+        {
+            PlayerChangePositionEvent event = new PlayerChangePositionEvent( con, conPos, packetPos );
+            if ( !event.callEvent() )
+            {
+                con.unsafe().sendPacket( pac );
+                throw CancelSendSignal.INSTANCE;
+            } else
+            {
+                if ( !event.getMovedTo().equals( packetPos ) )
+                {
+                    Position pn = event.getMovedTo();
+                    con.unsafe().sendPacket( new PlayerPosition( pn.getX(), pn.getY(), pn.getZ(), pn.getYaw(), pn.getPitch(), pn.isOnGround() ) );
+                    throw CancelSendSignal.INSTANCE;
+                } else
+                {
+                    con.unsafe().sendPacket( pac );
+                    throw CancelSendSignal.INSTANCE;
+                }
+            }
+        }
+    }
+    // IvanCord end
+
     @Override
     public String toString()
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index 02be0e4b5b727effbd94eb8e31b45f5aec2a4d23..67f733a21266d2fbf016779467c6649ce7ae0296 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -29,9 +29,11 @@ import net.md_5.bungee.protocol.packet.Chat;
 import net.md_5.bungee.protocol.packet.ClientSettings;
 import net.md_5.bungee.protocol.packet.KeepAlive;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
+import net.md_5.bungee.protocol.packet.PlayerPosition;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.TabCompleteRequest;
 import net.md_5.bungee.protocol.packet.TabCompleteResponse;
+import com.mrivanplays.ivancord.api.Position; // IvanCord
 
 public class UpstreamBridge extends PacketHandler
 {
@@ -271,6 +273,14 @@ public class UpstreamBridge extends PacketHandler
         }
     }
 
+    // IvanCord start
+    @Override
+    public void handle(PlayerPosition pac)
+    {
+        con.setPosition( new Position( pac.getX(), pac.getY(), pac.getZ(), pac.getYaw(), pac.getPitch(), pac.isOnGround() ) );
+    }
+    // IvanCord end
+
     @Override
     public String toString()
     {
