From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Sat, 13 Apr 2019 20:32:49 +0300
Subject: [PATCH] Misc changes

All small changes come here

diff --git a/api/src/main/java/net/md_5/bungee/api/AbstractReconnectHandler.java b/api/src/main/java/net/md_5/bungee/api/AbstractReconnectHandler.java
index 2adcd5739b6af4e32389f69273386cb3cb861c66..b99fb0e074424ba128d468c0646a516dc2823628 100644
--- a/api/src/main/java/net/md_5/bungee/api/AbstractReconnectHandler.java
+++ b/api/src/main/java/net/md_5/bungee/api/AbstractReconnectHandler.java
@@ -35,10 +35,22 @@ public abstract class AbstractReconnectHandler implements ReconnectHandler
 
         String forced = con.getListener().getForcedHosts().get( con.getVirtualHost().getHostString() );
 
+        // IvanCord start - rewrite this
+        /*
         if ( forced == null && con.getListener().isForceDefault() )
         {
             forced = con.getListener().getDefaultServer();
         }
+         */
+        if ( con.getListener().isForceDefault() )
+        {
+            forced = con.getListener().getDefaultServer();
+        }
+        if ( forced == null )
+        {
+            forced = con.getListener().getDefaultServer();
+        }
+        // IvanCord end
         return ProxyServer.getInstance().getServerInfo( forced );
     }
 
diff --git a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
index f7459860f9da503cdafceacb31ecd4dd0e9346d2..b7b89c421f4904c199a84282a8814200de1e1071 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
@@ -326,6 +326,18 @@ public interface ProxiedPlayer extends Connection, CommandSender
      */
     void sendTitle(Title title);
 
+    // IvanCord start - add sendTitle with strings
+
+    /**
+     * Sends a title to this player.
+     *
+     * @param title title message to send
+     * @param subtitle sub title message to send
+     */
+    void sendTitle(String title, String subtitle);
+
+    // IvanCord
+
     /**
      * Gets whether this player is using a FML client.
      * <p>
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/Event.java b/api/src/main/java/net/md_5/bungee/api/plugin/Event.java
index 25ec1bd8f208859c8aba196150aae6b6c41e6105..052baf480002ea9f532bc623ba3cf9b959ed01b6 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/Event.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/Event.java
@@ -1,5 +1,7 @@
 package net.md_5.bungee.api.plugin;
 
+import net.md_5.bungee.api.ProxyServer;
+
 /**
  * Dummy class which all callable events must extend.
  */
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
index 22f0c1d814da1f440a852207f3c877ebc46101d6..0026970afae1e3481ded54751ca6390c88e72c5e 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
@@ -389,9 +389,9 @@ public class PluginManager
         Preconditions.checkNotNull( folder, "folder" );
         Preconditions.checkArgument( folder.isDirectory(), "Must load from a directory" );
 
-        for ( File file : folder.listFiles() )
+        for ( File file : folder.listFiles((dir, name) -> name.endsWith( ".jar" )) ) // IvanCord use filter
         {
-            if ( file.isFile() && file.getName().endsWith( ".jar" ) )
+            if ( file.isFile() ) // IvanCord - remove now reudant check if filename ends with .jar
             {
                 try ( JarFile jar = new JarFile( file ) )
                 {
@@ -456,11 +456,13 @@ public class PluginManager
      */
     public void registerListener(Plugin plugin, Listener listener)
     {
+        /* IvanCord - remove that outdated and dumb warning
         for ( Method method : listener.getClass().getDeclaredMethods() )
         {
             Preconditions.checkArgument( !method.isAnnotationPresent( Subscribe.class ),
                     "Listener %s has registered using deprecated subscribe annotation! Please update to @EventHandler.", listener );
         }
+         */
         eventBus.register( listener );
         listenersByPlugin.put( plugin, listener );
     }
diff --git a/api/src/main/java/net/md_5/bungee/command/PlayerCommand.java b/api/src/main/java/net/md_5/bungee/command/PlayerCommand.java
index a92d30f98f46fd3480378daed325417ae38a4a8e..3dade04f451bbbd99e2ecc05c7a95ded5ae5a760 100644
--- a/api/src/main/java/net/md_5/bungee/command/PlayerCommand.java
+++ b/api/src/main/java/net/md_5/bungee/command/PlayerCommand.java
@@ -4,6 +4,8 @@ import com.google.common.base.Function;
 import com.google.common.base.Predicate;
 import com.google.common.collect.Iterables;
 import java.util.Locale;
+import java.util.stream.Collectors;
+
 import net.md_5.bungee.api.CommandSender;
 import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
@@ -31,6 +33,8 @@ public abstract class PlayerCommand extends Command implements TabExecutor
     public Iterable<String> onTabComplete(CommandSender sender, String[] args)
     {
         final String lastArg = ( args.length > 0 ) ? args[args.length - 1].toLowerCase( Locale.ROOT ) : "";
+        // IvanCord start - use java 8 streams
+        /*
         return Iterables.transform( Iterables.filter( ProxyServer.getInstance().getPlayers(), new Predicate<ProxiedPlayer>()
         {
             @Override
@@ -46,5 +50,12 @@ public abstract class PlayerCommand extends Command implements TabExecutor
                 return player.getName();
             }
         } );
+         */
+        return ProxyServer.getInstance().getPlayers()
+                .parallelStream()
+                .map( CommandSender::getName )
+                .filter( name -> name.toLowerCase().startsWith( lastArg ) )
+                .collect( Collectors.toList() );
+        // IvanCord end
     }
 }
diff --git a/config/src/main/java/net/md_5/bungee/config/Configuration.java b/config/src/main/java/net/md_5/bungee/config/Configuration.java
index d7ed3e1143745b91c6a98bf78f4be02b3bbf704b..209cb85988d005103ebc5529db43b16285baf667 100644
--- a/config/src/main/java/net/md_5/bungee/config/Configuration.java
+++ b/config/src/main/java/net/md_5/bungee/config/Configuration.java
@@ -8,10 +8,13 @@ import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 
+import lombok.Getter;
+
 public final class Configuration
 {
 
     private static final char SEPARATOR = '.';
+    @Getter // IvanCord
     final Map<String, Object> self;
     private final Configuration defaults;
 
diff --git a/config/src/main/java/net/md_5/bungee/config/ConfigurationProvider.java b/config/src/main/java/net/md_5/bungee/config/ConfigurationProvider.java
index 0118fca2c08f2e4482058ead860a8c4c239489ac..9f3496232960da55ecd6f8b198662d8bb531cdcb 100644
--- a/config/src/main/java/net/md_5/bungee/config/ConfigurationProvider.java
+++ b/config/src/main/java/net/md_5/bungee/config/ConfigurationProvider.java
@@ -37,6 +37,22 @@ public abstract class ConfigurationProvider
         return providers.get( provider );
     }
 
+    // IvanCord start
+    public static <T extends ConfigurationProvider> void registerProvider(T provider)
+    {
+        providers.put( provider.getClass(), provider );
+    }
+
+    public static <T extends ConfigurationProvider> void unregisterProvider(Class<T> provider)
+    {
+        if ( provider.isAssignableFrom( YamlConfiguration.class ) || provider.isAssignableFrom( JsonConfiguration.class ) )
+        {
+            throw new IllegalArgumentException( "YamlConfiguration and JsonConfiguration providers cannot be unregistered." );
+        }
+        providers.remove( provider );
+    }
+    // IvanCord end
+
     /*------------------------------------------------------------------------*/
     public abstract void save(Configuration config, File file) throws IOException;
 
diff --git a/log4j/src/main/resources/log4j2.xml b/log4j/src/main/resources/log4j2.xml
index 3b3525f08caec962b51d90ce6e42758dac64aa10..b83a144c1cd388034a02d1a59227ccaf81126314 100644
--- a/log4j/src/main/resources/log4j2.xml
+++ b/log4j/src/main/resources/log4j2.xml
@@ -3,15 +3,15 @@
     <Appenders>
         <TerminalConsole name="TerminalConsole">
             <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %level] [%logger]: %minecraftFormatting{%msg}%n%xEx}">
+                <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %t/%level]: [%logger] %minecraftFormatting{%msg}%n%xEx}"> <!-- IvanCord - changed -->
                     <!-- Log root and BungeeCord loggers without prefix -->
-                    <PatternMatch key=",BungeeCord" pattern="%highlightError{[%d{HH:mm:ss} %level]: %minecraftFormatting{%msg}%n%xEx}" />
+                    <PatternMatch key=",BungeeCord" pattern="%highlightError{[%d{HH:mm:ss} %level]: %minecraftFormatting{%msg}%n%xEx}" /> <!-- IvanCord - changed -->
                 </LoggerNamePatternSelector>
             </PatternLayout>
         </TerminalConsole>
         <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz" immediateFlush="false">
             <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level] [%logger]: %minecraftFormatting{%msg}{strip}%n">
+                <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level]: [%logger] %minecraftFormatting{%msg}{strip}%n"> <!-- IvanCord - changed -->
                     <!-- Log root and BungeeCord loggers without prefix -->
                     <PatternMatch key=",BungeeCord" pattern="[%d{HH:mm:ss}] [%t/%level]: %minecraftFormatting{%msg}{strip}%n" />
                 </LoggerNamePatternSelector>
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index bcca8ff9f7ba97812bd60c8726fa21905800c99a..98690b669ce8934ebbaf77ba0e1bce1c458f2edb 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -476,8 +476,10 @@ public class BungeeCord extends ProxyServer
                 }
 
                 getLogger().info( "Closing IO threads" );
-                bossEventLoopGroup.shutdownGracefully();
-                workerEventLoopGroup.shutdownGracefully();
+                // IvanCord start - speed up shutdown
+                bossEventLoopGroup.shutdownGracefully( 100, 5000, TimeUnit.MILLISECONDS );
+                workerEventLoopGroup.shutdownGracefully( 100, 500, TimeUnit.MILLISECONDS );
+                // IvanCord end
                 while (true) {
                     try {
                         bossEventLoopGroup.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java b/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
index c40f3e032faf34ec66ddaf4080c3d17c416a91ee..77d712bddf100b4ac898c80686085921b29fe6b8 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
@@ -40,6 +40,8 @@ public class BungeeCordLauncher
             return;
         }
 
+        // IvanCord start - remove startup delay
+        /*
         if ( BungeeCord.class.getPackage().getSpecificationVersion() != null && System.getProperty( "IReallyKnowWhatIAmDoingISwear" ) == null )
         {
             Date buildDate = new SimpleDateFormat( "yyyyMMdd" ).parse( BungeeCord.class.getPackage().getSpecificationVersion() );
@@ -55,8 +57,23 @@ public class BungeeCordLauncher
                 Thread.sleep( TimeUnit.SECONDS.toMillis( 10 ) );
             }
         }
+         */
+        // IvanCord end
 
         BungeeCord bungee = new BungeeCord();
+        // IvanCord start - output JVM and OS information on startup
+        // Credits: PaperMC
+        java.lang.management.RuntimeMXBean runtimeMX = java.lang.management.ManagementFactory.getRuntimeMXBean();
+        java.lang.management.OperatingSystemMXBean osMX = java.lang.management.ManagementFactory.getOperatingSystemMXBean();
+        if ( runtimeMX != null && osMX != null )
+        {
+            bungee.getLogger().info(
+                    String.format( "System info: Java: %s (%s %s) Host: %s %s (%s)",
+                            runtimeMX.getSpecVersion(), runtimeMX.getVmName(), runtimeMX.getVmVersion(),
+                            osMX.getName(), osMX.getVersion(), osMX.getArch() )
+            );
+        }
+        // IvanCord end
         ProxyServer.setInstance( bungee );
         bungee.start();
         bungee.getLogger().info( "Enabled IvanCord version " + bungee.getVersion() ); // IvanCord - rebranding
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnection.java b/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
index 95904de9fd0f1f34a397e714c569131a5981b145..069faddf8b3a68fc56d3f51b351b113433129be5 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnection.java
@@ -57,7 +57,11 @@ public class ServerConnection implements Server
     {
         Preconditions.checkArgument( reason.length == 0, "Server cannot have disconnect reason" );
 
+        /* IvanCord start - don't use delayed close
         ch.delayedClose( null );
+         */
+        ch.close();
+        // IvanCord end
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index 139c4f09cb731628d3ff00e4df48fec51e8f0872..5611a53a44f8681ff72e65faf72ff6c94340c3c7 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -283,6 +283,13 @@ public class ServerConnector extends PacketHandler
                 user.unsafe().sendPacket( new net.md_5.bungee.protocol.packet.BossBar( bossbar, 1 ) );
             }
             user.getSentBossBars().clear();
+            // IvanCord start
+            // Resets the tab header and footer when server changing.
+            // The server being connected can not have a default tablist
+            // plugin so it will be displayed the one from the previous
+            // server. I dont want this thats why i make it like that
+            user.resetTabHeader();
+            // IvanCord end
 
             // Update debug info from login packet
             user.unsafe().sendPacket( new EntityStatus( user.getClientEntityId(), login.isReducedDebugInfo() ? EntityStatus.DEBUG_INFO_REDUCED : EntityStatus.DEBUG_INFO_NORMAL ) );
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index d82a363bb18ad38f6dbacb35ee476a0cc39222d4..86ed27934de8c18a0af404724ad79f4ca6da123b 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -319,7 +319,7 @@ public final class UserConnection implements ProxiedPlayer
             {
                 callback.done( ServerConnectRequest.Result.ALREADY_CONNECTED, null );
             }
-
+            else // IvanCord - fix dumb connection message behaviour
             sendMessage( bungee.getTranslation( "already_connected" ) );
             return;
         }
@@ -329,7 +329,7 @@ public final class UserConnection implements ProxiedPlayer
             {
                 callback.done( ServerConnectRequest.Result.ALREADY_CONNECTING, null );
             }
-
+            else // IvanCord - fix dumb connection message behaviour
             sendMessage( bungee.getTranslation( "already_connecting" ) );
             return;
         }
@@ -412,6 +412,9 @@ public final class UserConnection implements ProxiedPlayer
 
     public void disconnect0(final BaseComponent... reason)
     {
+        // IvanCord start - reset tab header and footer
+        resetTabHeader();
+        // IvanCord end
         if ( !ch.isClosing() )
         {
             bungee.getLogger().log( Level.INFO, "[{0}] disconnected with: {1}", new Object[]
@@ -419,7 +422,7 @@ public final class UserConnection implements ProxiedPlayer
                 getName(), BaseComponent.toLegacyText( reason )
             } );
 
-            ch.delayedClose( new Kick( ComponentSerializer.toString( reason ) ) );
+            ch.close( new Kick( ComponentSerializer.toString( reason ) ) ); // IvanCord
 
             if ( server != null )
             {
@@ -719,6 +722,14 @@ public final class UserConnection implements ProxiedPlayer
         title.send( this );
     }
 
+    // IvanCord start
+    @Override
+    public void sendTitle(String title, String subtitle)
+    {
+        bungee.createTitle().title( TextComponent.fromLegacyText( title ) ).subTitle( TextComponent.fromLegacyText( subtitle ) ).send( this );
+    }
+    // IvanCord end
+
     public String getExtraDataInHandshake()
     {
         return this.getPendingConnection().getExtraDataInHandshake();
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandBungee.java b/proxy/src/main/java/net/md_5/bungee/command/CommandBungee.java
index 65b03ad62b9584e3a05fcc1362ee1adbd07bfdd1..d326295182fc5be3711f27befc919f96fcad3d40 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandBungee.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandBungee.java
@@ -10,7 +10,7 @@ public class CommandBungee extends Command
 
     public CommandBungee()
     {
-        super( "bungee" );
+        super( "bungee", "bungeecord.command.bungee" ); // IvanCord - add missing permission
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandEnd.java b/proxy/src/main/java/net/md_5/bungee/command/CommandEnd.java
index d87d0b95f3e675fc7c8d7d18add037c7fe32eabc..055b3bb6ebabec81862071e254d57ca4d368cd4f 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandEnd.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandEnd.java
@@ -14,7 +14,7 @@ public class CommandEnd extends Command
 
     public CommandEnd()
     {
-        super( "end", "bungeecord.command.end" );
+        super( "end", "bungeecord.command.end", "stop" ); // IvanCord - alias stop
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandPerms.java b/proxy/src/main/java/net/md_5/bungee/command/CommandPerms.java
index 18422669106553a2e6555c47ef06a8eaf891a989..66747e0570c07e392c6133fe08b8f150d555ce9d 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandPerms.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandPerms.java
@@ -12,7 +12,7 @@ public class CommandPerms extends Command
 
     public CommandPerms()
     {
-        super( "perms" );
+        super( "perms", "bungeecord.command.ip" ); // IvanCord - add missing permission
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java b/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
index 6dc5633f5241ad6a1619500d37790e5c24c67155..0f53e42eac116541ebc980c9a8f30b73e8d4e02f 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
@@ -49,7 +49,7 @@ public class ChannelWrapper
 
     public void write(Object packet)
     {
-        if ( !closed )
+        if ( !closed && ch.isActive() ) // IvanCord
         {
             if ( packet instanceof PacketWrapper )
             {
@@ -98,6 +98,7 @@ public class ChannelWrapper
             // Minecraft client can take some time to switch protocols.
             // Sending the wrong disconnect packet whilst a protocol switch is in progress will crash it.
             // Delay 250ms to ensure that the protocol switch (if any) has definitely taken place.
+            ch.flush(); // IvanCord - SpigotMC/BungeeCord#2749
             ch.eventLoop().schedule( new Runnable()
             {
 
