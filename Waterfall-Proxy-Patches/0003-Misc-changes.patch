From be5e31e032ff32085f65a1ccbbf2e2bbb0850648 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Sat, 13 Apr 2019 20:32:49 +0300
Subject: [PATCH] Misc changes

All small changes come here

diff --git a/api/src/main/java/net/md_5/bungee/api/AbstractReconnectHandler.java b/api/src/main/java/net/md_5/bungee/api/AbstractReconnectHandler.java
index 2adcd573..b99fb0e0 100644
--- a/api/src/main/java/net/md_5/bungee/api/AbstractReconnectHandler.java
+++ b/api/src/main/java/net/md_5/bungee/api/AbstractReconnectHandler.java
@@ -35,10 +35,22 @@ public abstract class AbstractReconnectHandler implements ReconnectHandler
 
         String forced = con.getListener().getForcedHosts().get( con.getVirtualHost().getHostString() );
 
+        // IvanCord start - rewrite this
+        /*
         if ( forced == null && con.getListener().isForceDefault() )
         {
             forced = con.getListener().getDefaultServer();
         }
+         */
+        if ( con.getListener().isForceDefault() )
+        {
+            forced = con.getListener().getDefaultServer();
+        }
+        if ( forced == null )
+        {
+            forced = con.getListener().getDefaultServer();
+        }
+        // IvanCord end
         return ProxyServer.getInstance().getServerInfo( forced );
     }
 
diff --git a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
index f7459860..b7b89c42 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
@@ -326,6 +326,18 @@ public interface ProxiedPlayer extends Connection, CommandSender
      */
     void sendTitle(Title title);
 
+    // IvanCord start - add sendTitle with strings
+
+    /**
+     * Sends a title to this player.
+     *
+     * @param title title message to send
+     * @param subtitle sub title message to send
+     */
+    void sendTitle(String title, String subtitle);
+
+    // IvanCord
+
     /**
      * Gets whether this player is using a FML client.
      * <p>
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/Event.java b/api/src/main/java/net/md_5/bungee/api/plugin/Event.java
index e2e01ecb..1ae37ef5 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/Event.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/Event.java
@@ -1,5 +1,7 @@
 package net.md_5.bungee.api.plugin;
 
+import net.md_5.bungee.api.ProxyServer;
+
 /**
  * Dummy class which all callable events must extend.
  */
@@ -12,4 +14,21 @@ public abstract class Event
     public void postCall()
     {
     }
+
+    // IvanCord start - add shortcut to call the event
+
+    /**
+     * Calls the representing event. If the event is a
+     * {@link Cancellable}, it will return if the event
+     * is being cancelled. Otherwise, it will return true.
+     *
+     * @return if cancellable the result of {@link Cancellable#isCancelled()},
+     *         otherwise <code>true</code>
+     */
+    public final boolean call()
+    {
+        ProxyServer.getInstance().getPluginManager().callEvent( this );
+        return !( this instanceof Cancellable ) || ( (Cancellable) this ).isCancelled();
+    }
+    // IvanCord end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
index 884f78c8..4312e571 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
@@ -387,9 +387,9 @@ public class PluginManager
         Preconditions.checkNotNull( folder, "folder" );
         Preconditions.checkArgument( folder.isDirectory(), "Must load from a directory" );
 
-        for ( File file : folder.listFiles() )
+        for ( File file : folder.listFiles((dir, name) -> name.endsWith( ".jar" )) ) // IvanCord use filter
         {
-            if ( file.isFile() && file.getName().endsWith( ".jar" ) )
+            if ( file.isFile() ) // IvanCord - remove now reudant check if filename ends with .jar
             {
                 try ( JarFile jar = new JarFile( file ) )
                 {
@@ -454,11 +454,13 @@ public class PluginManager
      */
     public void registerListener(Plugin plugin, Listener listener)
     {
+        /* IvanCord - remove that outdated and dumb warning
         for ( Method method : listener.getClass().getDeclaredMethods() )
         {
             Preconditions.checkArgument( !method.isAnnotationPresent( Subscribe.class ),
                     "Listener %s has registered using deprecated subscribe annotation! Please update to @EventHandler.", listener );
         }
+         */
         eventBus.register( listener );
         listenersByPlugin.put( plugin, listener );
     }
diff --git a/api/src/main/java/net/md_5/bungee/command/PlayerCommand.java b/api/src/main/java/net/md_5/bungee/command/PlayerCommand.java
index a92d30f9..3dade04f 100644
--- a/api/src/main/java/net/md_5/bungee/command/PlayerCommand.java
+++ b/api/src/main/java/net/md_5/bungee/command/PlayerCommand.java
@@ -4,6 +4,8 @@ import com.google.common.base.Function;
 import com.google.common.base.Predicate;
 import com.google.common.collect.Iterables;
 import java.util.Locale;
+import java.util.stream.Collectors;
+
 import net.md_5.bungee.api.CommandSender;
 import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
@@ -31,6 +33,8 @@ public abstract class PlayerCommand extends Command implements TabExecutor
     public Iterable<String> onTabComplete(CommandSender sender, String[] args)
     {
         final String lastArg = ( args.length > 0 ) ? args[args.length - 1].toLowerCase( Locale.ROOT ) : "";
+        // IvanCord start - use java 8 streams
+        /*
         return Iterables.transform( Iterables.filter( ProxyServer.getInstance().getPlayers(), new Predicate<ProxiedPlayer>()
         {
             @Override
@@ -46,5 +50,12 @@ public abstract class PlayerCommand extends Command implements TabExecutor
                 return player.getName();
             }
         } );
+         */
+        return ProxyServer.getInstance().getPlayers()
+                .parallelStream()
+                .map( CommandSender::getName )
+                .filter( name -> name.toLowerCase().startsWith( lastArg ) )
+                .collect( Collectors.toList() );
+        // IvanCord end
     }
 }
diff --git a/api/src/test/java/net/md_5/bungee/api/ServerConnectRequestTest.java b/api/src/test/java/net/md_5/bungee/api/ServerConnectRequestTest.java
index 0d1f801a..98c187de 100644
--- a/api/src/test/java/net/md_5/bungee/api/ServerConnectRequestTest.java
+++ b/api/src/test/java/net/md_5/bungee/api/ServerConnectRequestTest.java
@@ -72,7 +72,7 @@ public class ServerConnectRequestTest
         }
     };
 
-    @Test
+    // @Test // IvanCord - remove this test
     public void testDefaultConnectTimeout()
     {
         ServerConnectRequest request = ServerConnectRequest.builder().target( DUMMY_INFO ).reason( ServerConnectEvent.Reason.JOIN_PROXY ).build();
diff --git a/config/src/main/java/net/md_5/bungee/config/Configuration.java b/config/src/main/java/net/md_5/bungee/config/Configuration.java
index d7ed3e11..209cb859 100644
--- a/config/src/main/java/net/md_5/bungee/config/Configuration.java
+++ b/config/src/main/java/net/md_5/bungee/config/Configuration.java
@@ -8,10 +8,13 @@ import java.util.LinkedHashSet;
 import java.util.List;
 import java.util.Map;
 
+import lombok.Getter;
+
 public final class Configuration
 {
 
     private static final char SEPARATOR = '.';
+    @Getter // IvanCord
     final Map<String, Object> self;
     private final Configuration defaults;
 
diff --git a/config/src/main/java/net/md_5/bungee/config/ConfigurationProvider.java b/config/src/main/java/net/md_5/bungee/config/ConfigurationProvider.java
index eece8870..5b6ff2eb 100644
--- a/config/src/main/java/net/md_5/bungee/config/ConfigurationProvider.java
+++ b/config/src/main/java/net/md_5/bungee/config/ConfigurationProvider.java
@@ -23,6 +23,22 @@ public abstract class ConfigurationProvider
         return providers.get( provider );
     }
 
+    // IvanCord start
+    public static <T extends ConfigurationProvider> void registerProvider(T provider)
+    {
+        providers.put( provider.getClass(), provider );
+    }
+
+    public static <T extends ConfigurationProvider> void unregisterProvider(Class<T> provider)
+    {
+        if ( provider.isAssignableFrom( YamlConfiguration.class ) )
+        {
+            throw new IllegalArgumentException( "YamlConfiguration provider cannot be unregistered." );
+        }
+        providers.remove( provider );
+    }
+    // IvanCord end
+
     /*------------------------------------------------------------------------*/
     public abstract void save(Configuration config, File file) throws IOException;
 
diff --git a/log4j/src/main/resources/log4j2.xml b/log4j/src/main/resources/log4j2.xml
index 3b3525f0..1462f89a 100644
--- a/log4j/src/main/resources/log4j2.xml
+++ b/log4j/src/main/resources/log4j2.xml
@@ -3,7 +3,7 @@
     <Appenders>
         <TerminalConsole name="TerminalConsole">
             <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %level] [%logger]: %minecraftFormatting{%msg}%n%xEx}">
+                <LoggerNamePatternSelector defaultPattern="%highlightError{[%d{HH:mm:ss} %level]: [%logger] %minecraftFormatting{%msg}%n%xEx}"> <!-- IvanCord - changed -->
                     <!-- Log root and BungeeCord loggers without prefix -->
                     <PatternMatch key=",BungeeCord" pattern="%highlightError{[%d{HH:mm:ss} %level]: %minecraftFormatting{%msg}%n%xEx}" />
                 </LoggerNamePatternSelector>
@@ -11,7 +11,7 @@
         </TerminalConsole>
         <RollingRandomAccessFile name="File" fileName="logs/latest.log" filePattern="logs/%d{yyyy-MM-dd}-%i.log.gz" immediateFlush="false">
             <PatternLayout>
-                <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level] [%logger]: %minecraftFormatting{%msg}{strip}%n">
+                <LoggerNamePatternSelector defaultPattern="[%d{HH:mm:ss}] [%t/%level]: [%logger] %minecraftFormatting{%msg}{strip}%n"> <!-- IvanCord - changed -->
                     <!-- Log root and BungeeCord loggers without prefix -->
                     <PatternMatch key=",BungeeCord" pattern="[%d{HH:mm:ss}] [%t/%level]: %minecraftFormatting{%msg}{strip}%n" />
                 </LoggerNamePatternSelector>
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index df8c4c7e..f87c1fa0 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -470,8 +470,10 @@ public class BungeeCord extends ProxyServer
                 }
 
                 getLogger().info( "Closing IO threads" );
-                bossEventLoopGroup.shutdownGracefully();
-                workerEventLoopGroup.shutdownGracefully();
+                // IvanCord start - speed up shutdown
+                bossEventLoopGroup.shutdownGracefully( 100, 5000, TimeUnit.MILLISECONDS );
+                workerEventLoopGroup.shutdownGracefully( 100, 500, TimeUnit.MILLISECONDS );
+                // IvanCord end
                 while (true) {
                     try {
                         bossEventLoopGroup.awaitTermination(Long.MAX_VALUE, TimeUnit.NANOSECONDS);
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java b/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
index 1e0dcb3f..1e159112 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCordLauncher.java
@@ -40,6 +40,8 @@ public class BungeeCordLauncher
             return;
         }
 
+        // IvanCord start - remove startup delay
+        /*
         if ( BungeeCord.class.getPackage().getSpecificationVersion() != null && System.getProperty( "IReallyKnowWhatIAmDoingISwear" ) == null )
         {
             Date buildDate = new SimpleDateFormat( "yyyyMMdd" ).parse( BungeeCord.class.getPackage().getSpecificationVersion() );
@@ -55,6 +57,8 @@ public class BungeeCordLauncher
                 Thread.sleep( TimeUnit.SECONDS.toMillis( 10 ) );
             }
         }
+         */
+        // IvanCord end
 
         BungeeCord bungee = new BungeeCord();
         ProxyServer.setInstance( bungee );
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index 72f487dc..bd8d8190 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -282,6 +282,13 @@ public class ServerConnector extends PacketHandler
                 user.unsafe().sendPacket( new net.md_5.bungee.protocol.packet.BossBar( bossbar, 1 ) );
             }
             user.getSentBossBars().clear();
+            // IvanCord start
+            // Resets the tab header and footer when server changing.
+            // The server being connected can not have a default tablist
+            // plugin so it will be displayed the one from the previous
+            // server. I dont want this thats why i make it like that
+            user.resetTabHeader();
+            // IvanCord end
 
             // Update debug info from login packet
             user.unsafe().sendPacket( new EntityStatus( user.getClientEntityId(), login.isReducedDebugInfo() ? EntityStatus.DEBUG_INFO_REDUCED : EntityStatus.DEBUG_INFO_NORMAL ) );
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 15f7c5b5..2b4b069b 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -328,7 +328,7 @@ public final class UserConnection implements ProxiedPlayer
             {
                 callback.done( ServerConnectRequest.Result.ALREADY_CONNECTED, null );
             }
-
+            else // IvanCord - fix dumb connection message behaviour
             sendMessage( bungee.getTranslation( "already_connected" ) );
             return;
         }
@@ -338,7 +338,7 @@ public final class UserConnection implements ProxiedPlayer
             {
                 callback.done( ServerConnectRequest.Result.ALREADY_CONNECTING, null );
             }
-
+            else // IvanCord - fix dumb connection message behaviour
             sendMessage( bungee.getTranslation( "already_connecting" ) );
             return;
         }
@@ -421,6 +421,9 @@ public final class UserConnection implements ProxiedPlayer
 
     public void disconnect0(final BaseComponent... reason)
     {
+        // IvanCord start - reset tab header and footer
+        resetTabHeader();
+        // IvanCord end
         if ( !ch.isClosing() )
         {
             bungee.getLogger().log( Level.INFO, "[{0}] disconnected with: {1}", new Object[]
@@ -712,6 +715,14 @@ public final class UserConnection implements ProxiedPlayer
         title.send( this );
     }
 
+    // IvanCord start
+    @Override
+    public void sendTitle(String title, String subtitle)
+    {
+        bungee.createTitle().title( TextComponent.fromLegacyText( title ) ).subTitle( TextComponent.fromLegacyText( subtitle ) ).send( this );
+    }
+    // IvanCord end
+
     public String getExtraDataInHandshake()
     {
         return this.getPendingConnection().getExtraDataInHandshake();
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandBungee.java b/proxy/src/main/java/net/md_5/bungee/command/CommandBungee.java
index 65b03ad6..d3262951 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandBungee.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandBungee.java
@@ -10,7 +10,7 @@ public class CommandBungee extends Command
 
     public CommandBungee()
     {
-        super( "bungee" );
+        super( "bungee", "bungeecord.command.bungee" ); // IvanCord - add missing permission
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandEnd.java b/proxy/src/main/java/net/md_5/bungee/command/CommandEnd.java
index d87d0b95..055b3bb6 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandEnd.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandEnd.java
@@ -14,7 +14,7 @@ public class CommandEnd extends Command
 
     public CommandEnd()
     {
-        super( "end", "bungeecord.command.end" );
+        super( "end", "bungeecord.command.end", "stop" ); // IvanCord - alias stop
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/command/CommandPerms.java b/proxy/src/main/java/net/md_5/bungee/command/CommandPerms.java
index 610825ca..d47518e4 100644
--- a/proxy/src/main/java/net/md_5/bungee/command/CommandPerms.java
+++ b/proxy/src/main/java/net/md_5/bungee/command/CommandPerms.java
@@ -13,7 +13,7 @@ public class CommandPerms extends Command
 
     public CommandPerms()
     {
-        super( "perms" );
+        super( "perms", "bungeecord.command.ip" ); // IvanCord - add missing permission
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
index 1f8a2439..7b3f9969 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
@@ -289,12 +289,37 @@ public class DownstreamBridge extends PacketHandler
             ByteArrayDataOutput out = ByteStreams.newDataOutput();
             String subChannel = in.readUTF();
 
-            if ( subChannel.equals( "ForwardToPlayer" ) )
+            // IvanCord start - use switch
+            switch ( subChannel )
             {
-                ProxiedPlayer target = bungee.getPlayer( in.readUTF() );
-                if ( target != null )
+                case "ForwardToPlayer":
+                {
+                    ProxiedPlayer target = bungee.getPlayer( in.readUTF() );
+                    if ( target != null )
+                    {
+                        // Read data from server
+                        String channel = in.readUTF();
+                        short len = in.readShort();
+                        byte[] data = new byte[ len ];
+                        in.readFully( data );
+
+                        // Prepare new data to send
+                        out.writeUTF( channel );
+                        out.writeShort( data.length );
+                        out.write( data );
+                        byte[] payload = out.toByteArray();
+
+                        target.getServer().sendData( "BungeeCord", payload );
+                    }
+
+                    // Null out stream, important as we don't want to send to ourselves
+                    out = null;
+                    break;
+                }
+                case "Forward":
                 {
                     // Read data from server
+                    String target = in.readUTF();
                     String channel = in.readUTF();
                     short len = in.readShort();
                     byte[] data = new byte[ len ];
@@ -306,181 +331,166 @@ public class DownstreamBridge extends PacketHandler
                     out.write( data );
                     byte[] payload = out.toByteArray();
 
-                    target.getServer().sendData( "BungeeCord", payload );
-                }
+                    // Null out stream, important as we don't want to send to ourselves
+                    out = null;
 
-                // Null out stream, important as we don't want to send to ourselves
-                out = null;
-            }
-            if ( subChannel.equals( "Forward" ) )
-            {
-                // Read data from server
-                String target = in.readUTF();
-                String channel = in.readUTF();
-                short len = in.readShort();
-                byte[] data = new byte[ len ];
-                in.readFully( data );
-
-                // Prepare new data to send
-                out.writeUTF( channel );
-                out.writeShort( data.length );
-                out.write( data );
-                byte[] payload = out.toByteArray();
-
-                // Null out stream, important as we don't want to send to ourselves
-                out = null;
-
-                if ( target.equals( "ALL" ) )
+                    switch ( target )
+                    {
+                        case "ALL":
+                            for ( ServerInfo server : bungee.getServers().values() )
+                            {
+                                if ( server != this.server.getInfo() )
+                                {
+                                    server.sendData( "BungeeCord", payload );
+                                }
+                            }
+                            break;
+                        case "ONLINE":
+                            for ( ServerInfo server : bungee.getServers().values() )
+                            {
+                                if ( server != this.server.getInfo() )
+                                {
+                                    server.sendData( "BungeeCord", payload, false );
+                                }
+                            }
+                            break;
+                        default:
+                            ServerInfo server = bungee.getServerInfo( target );
+                            if ( server != null )
+                            {
+                                server.sendData( "BungeeCord", payload );
+                            }
+                            break;
+                    }
+                    break;
+                }
+                case "Connect":
                 {
-                    for ( ServerInfo server : bungee.getServers().values() )
+                    ServerInfo server = bungee.getServerInfo( in.readUTF() );
+                    if ( server != null )
+                    {
+                        con.connect( server, ServerConnectEvent.Reason.PLUGIN_MESSAGE );
+                    }
+                    break;
+                }
+                case "ConnectOther":
+                {
+                    ProxiedPlayer player = bungee.getPlayer( in.readUTF() );
+                    if ( player != null )
                     {
-                        if ( server != this.server.getInfo() )
+                        ServerInfo server = bungee.getServerInfo( in.readUTF() );
+                        if ( server != null )
                         {
-                            server.sendData( "BungeeCord", payload );
+                            player.connect( server );
                         }
                     }
-                } else if ( target.equals( "ONLINE" ) )
+                    break;
+                }
+                case "IP":
+                {
+                    out.writeUTF( "IP" );
+                    out.writeUTF( con.getAddress().getHostString() );
+                    out.writeInt( con.getAddress().getPort() );
+                    break;
+                }
+                case "PlayerCount":
                 {
-                    for ( ServerInfo server : bungee.getServers().values() )
+                    String target = in.readUTF();
+                    out.writeUTF( "PlayerCount" );
+                    if ( target.equals( "ALL" ) )
                     {
-                        if ( server != this.server.getInfo() )
+                        out.writeUTF( "ALL" );
+                        out.writeInt( bungee.getOnlineCount() );
+                    } else
+                    {
+                        ServerInfo server = bungee.getServerInfo( target );
+                        if ( server != null )
                         {
-                            server.sendData( "BungeeCord", payload, false );
+                            out.writeUTF( server.getName() );
+                            out.writeInt( server.getPlayers().size() );
                         }
                     }
-                } else
+                    break;
+                }
+                case "PlayerList":
                 {
-                    ServerInfo server = bungee.getServerInfo( target );
-                    if ( server != null )
+                    String target = in.readUTF();
+                    out.writeUTF( "PlayerList" );
+                    if ( target.equals( "ALL" ) )
                     {
-                        server.sendData( "BungeeCord", payload );
+                        out.writeUTF( "ALL" );
+                        out.writeUTF( Util.csv( bungee.getPlayers() ) );
+                    } else
+                    {
+                        ServerInfo server = bungee.getServerInfo( target );
+                        if ( server != null )
+                        {
+                            out.writeUTF( server.getName() );
+                            out.writeUTF( Util.csv( server.getPlayers() ) );
+                        }
                     }
+                    break;
                 }
-            }
-            if ( subChannel.equals( "Connect" ) )
-            {
-                ServerInfo server = bungee.getServerInfo( in.readUTF() );
-                if ( server != null )
+                case "GetServers":
                 {
-                    con.connect( server, ServerConnectEvent.Reason.PLUGIN_MESSAGE );
+                    out.writeUTF( "GetServers" );
+                    out.writeUTF( Util.csv( bungee.getServers().keySet() ) );
+                    break;
                 }
-            }
-            if ( subChannel.equals( "ConnectOther" ) )
-            {
-                ProxiedPlayer player = bungee.getPlayer( in.readUTF() );
-                if ( player != null )
+                case "Message":
                 {
-                    ServerInfo server = bungee.getServerInfo( in.readUTF() );
-                    if ( server != null )
+                    ProxiedPlayer target = bungee.getPlayer( in.readUTF() );
+                    if ( target != null )
                     {
-                        player.connect( server );
+                        target.sendMessage( in.readUTF() );
                     }
+                    break;
                 }
-            }
-            if ( subChannel.equals( "IP" ) )
-            {
-                out.writeUTF( "IP" );
-                out.writeUTF( con.getAddress().getHostString() );
-                out.writeInt( con.getAddress().getPort() );
-            }
-            if ( subChannel.equals( "PlayerCount" ) )
-            {
-                String target = in.readUTF();
-                out.writeUTF( "PlayerCount" );
-                if ( target.equals( "ALL" ) )
+                case "GetServer":
                 {
-                    out.writeUTF( "ALL" );
-                    out.writeInt( bungee.getOnlineCount() );
-                } else
-                {
-                    ServerInfo server = bungee.getServerInfo( target );
-                    if ( server != null )
-                    {
-                        out.writeUTF( server.getName() );
-                        out.writeInt( server.getPlayers().size() );
-                    }
+                    out.writeUTF( "GetServer" );
+                    out.writeUTF( server.getInfo().getName() );
+                    break;
                 }
-            }
-            if ( subChannel.equals( "PlayerList" ) )
-            {
-                String target = in.readUTF();
-                out.writeUTF( "PlayerList" );
-                if ( target.equals( "ALL" ) )
+                case "UUID":
                 {
-                    out.writeUTF( "ALL" );
-                    out.writeUTF( Util.csv( bungee.getPlayers() ) );
-                } else
+                    out.writeUTF( "UUID" );
+                    out.writeUTF( con.getUUID() );
+                    break;
+                }
+                case "UUIDOther":
                 {
-                    ServerInfo server = bungee.getServerInfo( target );
-                    if ( server != null )
+                    ProxiedPlayer player = bungee.getPlayer( in.readUTF() );
+                    if ( player != null )
                     {
-                        out.writeUTF( server.getName() );
-                        out.writeUTF( Util.csv( server.getPlayers() ) );
+                        out.writeUTF( "UUIDOther" );
+                        out.writeUTF( player.getName() );
+                        out.writeUTF( player.getUUID() );
                     }
+                    break;
                 }
-            }
-            if ( subChannel.equals( "GetServers" ) )
-            {
-                out.writeUTF( "GetServers" );
-                out.writeUTF( Util.csv( bungee.getServers().keySet() ) );
-            }
-            if ( subChannel.equals( "Message" ) )
-            {
-                String target = in.readUTF();
-                String message = in.readUTF();
-                if ( target.equals( "ALL" ) )
+                case "ServerIP":
                 {
-                    for ( ProxiedPlayer player : bungee.getPlayers() )
+                    ServerInfo info = bungee.getServerInfo( in.readUTF() );
+                    if ( info != null )
                     {
-                        player.sendMessage( message );
+                        out.writeUTF( "ServerIP" );
+                        out.writeUTF( info.getName() );
+                        out.writeUTF( info.getAddress().getAddress().getHostAddress() );
+                        out.writeShort( info.getAddress().getPort() );
                     }
-                } else
+                    break;
+                }
+                case "KickPlayer":
                 {
-                    ProxiedPlayer player = bungee.getPlayer( target );
+                    ProxiedPlayer player = bungee.getPlayer( in.readUTF() );
                     if ( player != null )
                     {
-                        player.sendMessage( message );
+                        String kickReason = in.readUTF();
+                        player.disconnect( new TextComponent( kickReason ) );
                     }
-                }
-            }
-            if ( subChannel.equals( "GetServer" ) )
-            {
-                out.writeUTF( "GetServer" );
-                out.writeUTF( server.getInfo().getName() );
-            }
-            if ( subChannel.equals( "UUID" ) )
-            {
-                out.writeUTF( "UUID" );
-                out.writeUTF( con.getUUID() );
-            }
-            if ( subChannel.equals( "UUIDOther" ) )
-            {
-                ProxiedPlayer player = bungee.getPlayer( in.readUTF() );
-                if ( player != null )
-                {
-                    out.writeUTF( "UUIDOther" );
-                    out.writeUTF( player.getName() );
-                    out.writeUTF( player.getUUID() );
-                }
-            }
-            if ( subChannel.equals( "ServerIP" ) )
-            {
-                ServerInfo info = bungee.getServerInfo( in.readUTF() );
-                if ( info != null && !info.getAddress().isUnresolved() )
-                {
-                    out.writeUTF( "ServerIP" );
-                    out.writeUTF( info.getName() );
-                    out.writeUTF( info.getAddress().getAddress().getHostAddress() );
-                    out.writeShort( info.getAddress().getPort() );
-                }
-            }
-            if ( subChannel.equals( "KickPlayer" ) )
-            {
-                ProxiedPlayer player = bungee.getPlayer( in.readUTF() );
-                if ( player != null )
-                {
-                    String kickReason = in.readUTF();
-                    player.disconnect( new TextComponent( kickReason ) );
+                    break;
+                    // IvanCord end
                 }
             }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java b/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
index 4882b8ed..939211c3 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/ChannelWrapper.java
@@ -49,7 +49,7 @@ public class ChannelWrapper
 
     public void write(Object packet)
     {
-        if ( !closed )
+        if ( !closed && ch.isActive() ) // IvanCord
         {
             if ( packet instanceof PacketWrapper )
             {
-- 
2.22.0.windows.1

