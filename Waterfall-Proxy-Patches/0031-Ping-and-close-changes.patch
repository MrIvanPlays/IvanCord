From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: foss-mc <69294560+foss-mc@users.noreply.github.com>
Date: Tue, 11 Jan 2022 16:30:55 +0200
Subject: [PATCH] Ping and close changes

close on exception whenever a channel is initializing and close without
response on proxy ping if result is null.

diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index 1617d8202fc362f8c50656606a08c3d675ff1af8..94b1d997c64140caccb96fc94253e99e075e0b49 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -221,6 +221,13 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                         }
 
                         ServerPing legacy = result.getResponse();
+                        // IvanCord start - do not send ping if result is null
+                        if ( legacy == null )
+                        {
+                            ch.close();
+                            return;
+                        }
+                        // IvanCord end
                         String kickMessage;
 
                         if ( v1_5 )
@@ -296,6 +303,17 @@ public class InitialHandler extends PacketHandler implements PendingConnection
                     @Override
                     public void done(ProxyPingEvent pingResult, Throwable error)
                     {
+                        // IvanCord start - close if response is null and do not do any action if channel got closed
+                        if ( ch.isClosed() )
+                        {
+                            return;
+                        }
+                        if ( pingResult.getResponse() == null )
+                        {
+                            ch.close();
+                            return;
+                        }
+                        // IvanCord end
                         Gson gson = BungeeCord.getInstance().gson;
                         unsafe.sendPacket( new StatusResponse( gson.toJson( pingResult.getResponse() ) ) );
                         if ( bungee.getConnectionThrottle() != null )
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index 4fd6f300d70309687b7cc4167f4cc3b67e1a27da..b6777880a4baeafecc2744098b1998a9c6066b6b 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -110,6 +110,16 @@ public class PipelineUtils
 
             BungeeCord.getInstance().getPluginManager().callEvent(connectionInitEvent);
         }
+
+        // IvanCord start - close on exception caught
+        @Override
+        public void exceptionCaught(final io.netty.channel.ChannelHandlerContext ctx, final Throwable cause) throws Exception
+        {
+            BungeeCord.getInstance().getLogger().log( Level.SEVERE, "An error encountered whilst initializing channel for a connection", cause );
+
+            ctx.close();
+        }
+        // IvanCord end
     };
     public static final Base BASE = new Base( false );
     public static final Base BASE_SERVERSIDE = new Base( true );
@@ -262,5 +272,15 @@ public class PipelineUtils
 
             ch.pipeline().addLast( BOSS_HANDLER, new HandlerBoss() );
         }
+
+        // IvanCord start - close on exception caught
+        @Override
+        public void exceptionCaught(final io.netty.channel.ChannelHandlerContext ctx, final Throwable cause) throws Exception
+        {
+            BungeeCord.getInstance().getLogger().log( Level.SEVERE, "An error encountered whilst initializing channel for a connection", cause );
+
+            ctx.close();
+        }
+        // IvanCord end
     }
 }
