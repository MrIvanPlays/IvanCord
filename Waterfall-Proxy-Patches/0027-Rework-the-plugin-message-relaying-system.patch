From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PSNRigner <loic.frasse-mathon@epitech.eu>
Date: Tue, 9 Nov 2021 08:03:25 +0200
Subject: [PATCH] Rework the plugin message relaying system

Current BungeeCord behavior is to keep track of all of the received REGISTER plugin messages.
This patch changes it so that it keeps track of which channels should be relayed upon receiving
a REGISTER/UNREGISTER plugin message, because it is useless to send the same over and over again.

The branding plugin message has been separated and only the latest from the client is kept (it should be
always the same anyways, but be on the safe side).

This is a proper fix of issues such as PaperMC/Waterfall#545

Co-authored-by: Ivan Pekov <ivan@mrivanplays.com> - some small QOL issues and bumped the data length limit to match
client and server's limit.

diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/util/BoundedHashSet.java b/proxy/src/main/java/com/mrivanplays/ivancord/util/BoundedHashSet.java
new file mode 100644
index 0000000000000000000000000000000000000000..da56c0ff0ce6d6cb514c06f6afd598f6422c81fc
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/util/BoundedHashSet.java
@@ -0,0 +1,33 @@
+package com.mrivanplays.ivancord.util;
+
+import com.google.common.base.Preconditions;
+import java.util.Collection;
+import java.util.HashSet;
+import lombok.RequiredArgsConstructor;
+
+@RequiredArgsConstructor
+public class BoundedHashSet<E> extends HashSet<E>
+{
+
+    private final int maxSize;
+
+    private void checkSize(int increment)
+    {
+        Preconditions.checkState( size() + increment <= maxSize,
+            "Adding %s elements would exceed capacity of %s", increment, maxSize );
+    }
+
+    @Override
+    public boolean add(E e)
+    {
+        checkSize( 1 );
+        return super.add( e );
+    }
+
+    @Override
+    public boolean addAll(Collection<? extends E> c)
+    {
+        checkSize( c.size() );
+        return super.addAll( c );
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index 6ea153dd9f360781e3c0f3dd0475b906cde24506..d1d42722431e4a48c845f0032e479af32f73424b 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -228,10 +228,26 @@ public class ServerConnector extends PacketHandler
             }
         }
 
+        // IvanCord start - handle relay messages better
+        /*
         for ( PluginMessage message : user.getPendingConnection().getRelayMessages() )
         {
             ch.write( message );
         }
+         */
+        PluginMessage brandMessage = user.getPendingConnection().getRelayBrandMessage();
+        if ( brandMessage != null )
+        {
+            ch.write( brandMessage );
+        }
+        java.util.Set<String> relayRegisteredChannels = user.getPendingConnection().getRelayRegisteredChannels();
+        if ( !relayRegisteredChannels.isEmpty() )
+        {
+            String tag = user.getPendingConnection().getVersion() >= ProtocolConstants.MINECRAFT_1_13 ? "minecraft:register" : "REGISTER";
+            byte[] combinedChannels = com.google.common.base.Joiner.on( "\0" ).join( relayRegisteredChannels ).getBytes( java.nio.charset.StandardCharsets.UTF_8 );
+            ch.write( new PluginMessage( tag, combinedChannels, false ) );
+        }
+        // IvanCord end
 
         /* IvanCord - comment this
         if (!user.isDisableEntityMetadataRewrite() && user.getSettings() != null )
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
index c1ade83a60eb698fbd7e6aaeafc996921587b5e4..31629e10bf5c18aa8599fbcf2ea1019f3b6b0cca 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/InitialHandler.java
@@ -86,7 +86,46 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     private LoginRequest loginRequest;
     private EncryptionRequest request;
     @Getter
+    // IvanCord start - changes for relay messages
+    /*
     private final List<PluginMessage> relayMessages = new BoundedArrayList<>( 128 );
+     */
+    private PluginMessage relayBrandMessage = null;
+    @Getter
+    private final java.util.Set<String> relayRegisteredChannels = new com.mrivanplays.ivancord.util.BoundedHashSet<>( 128 );
+    public void handleRelayMessage(PluginMessage input)
+    {
+        // the client and the vanilla server allow a max of 32767
+        // before BungeeCord was only allowing 126
+        // this change makes IvanCord allow the same maximum, making it friendlier to modded clients and servers.
+        if ( input.getData().length >= Short.MAX_VALUE )
+        {
+            return;
+        }
+        switch ( input.getTag() )
+        {
+            case "REGISTER":
+            case "minecraft:register":
+                String content = new String( input.getData(), java.nio.charset.StandardCharsets.UTF_8 );
+                relayRegisteredChannels.addAll( java.util.Arrays.asList( content.split( "\0" ) ) );
+                break;
+            case "UNREGISTER":
+            case "minecraft:unregister":
+                content = new String( input.getData(), java.nio.charset.StandardCharsets.UTF_8 );
+                for ( String id : content.split( "\0" ) )
+                {
+                    relayRegisteredChannels.remove( id );
+                }
+                break;
+            case "MC|Brand":
+            case "minecraft:brand":
+                relayBrandMessage = input;
+                break;
+            default:
+                break;
+        }
+    }
+    // IvanCord end
     private State thisState = State.HANDSHAKE;
     private final Unsafe unsafe = new Unsafe()
     {
@@ -164,11 +203,7 @@ public class InitialHandler extends PacketHandler implements PendingConnection
     @Override
     public void handle(PluginMessage pluginMessage) throws Exception
     {
-        // TODO: Unregister?
-        if ( PluginMessage.SHOULD_RELAY.apply( pluginMessage ) )
-        {
-            relayMessages.add( pluginMessage );
-        }
+        this.handleRelayMessage( pluginMessage ); // IvanCord
     }
 
     @Override
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index 75f878e3b3dab639f5b3a204758373750c559854..f9eda560fb13700df137354e4be7274367c1ce98 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -383,11 +383,7 @@ public class UpstreamBridge extends PacketHandler
             throw CancelSendSignal.INSTANCE;
         }
 
-        // TODO: Unregister as well?
-        if ( PluginMessage.SHOULD_RELAY.apply( pluginMessage ) )
-        {
-            con.getPendingConnection().getRelayMessages().add( pluginMessage );
-        }
+        con.getPendingConnection().handleRelayMessage( pluginMessage ); // IvanCord
     }
 
     // IvanCord start
diff --git a/proxy/src/test/java/com/mrivanplays/ivancord/util/BoundedHashSetTest.java b/proxy/src/test/java/com/mrivanplays/ivancord/util/BoundedHashSetTest.java
new file mode 100644
index 0000000000000000000000000000000000000000..bf46f1987277c1de502a805d684f8a8dc05eff28
--- /dev/null
+++ b/proxy/src/test/java/com/mrivanplays/ivancord/util/BoundedHashSetTest.java
@@ -0,0 +1,51 @@
+package com.mrivanplays.ivancord.util;
+
+import com.google.common.collect.ImmutableList;
+import org.junit.Test;
+
+public class BoundedHashSetTest
+{
+    @Test
+    public void testGoodAdd()
+    {
+        BoundedHashSet<Object> set = new BoundedHashSet<>( 2 );
+        set.add( new Object() );
+        set.add( new Object() );
+    }
+
+    @Test
+    public void testSizeOneAdd()
+    {
+        BoundedHashSet<Object> set = new BoundedHashSet<>( 1 );
+        set.add( new Object() );
+    }
+
+    @Test(expected = IllegalStateException.class)
+    public void testBadAdd()
+    {
+        BoundedHashSet<Object> set = new BoundedHashSet<>( 0 );
+        set.add( new Object() );
+    }
+
+    @Test
+    public void testGoodAddAll()
+    {
+        BoundedHashSet<Object> set = new BoundedHashSet<>( 1 );
+        set.addAll( ImmutableList.of( new Object() ) );
+    }
+
+    @Test(expected = IllegalStateException.class)
+    public void testBadAddAll()
+    {
+        BoundedHashSet<Object> set = new BoundedHashSet<>( 0 );
+        set.addAll( ImmutableList.of( new Object() ) );
+    }
+
+    @Test(expected = IllegalStateException.class)
+    public void testBadAddAll1()
+    {
+        BoundedHashSet<Object> set = new BoundedHashSet<>( 1 );
+        set.add( new Object() );
+        set.addAll( ImmutableList.of( new Object() ) );
+    }
+}
