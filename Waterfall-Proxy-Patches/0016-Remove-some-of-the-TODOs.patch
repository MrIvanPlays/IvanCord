From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Sun, 30 Jun 2019 21:13:31 +0300
Subject: [PATCH] Remove some of the TODOs


diff --git a/api/src/main/java/io/github/waterfallmc/waterfall/QueryResult.java b/api/src/main/java/io/github/waterfallmc/waterfall/QueryResult.java
index 9a262c8a11caeade95a084e5e5bc0be398917bbf..266a46e3abf3c4948477cb15c19a7e3b081bac02 100644
--- a/api/src/main/java/io/github/waterfallmc/waterfall/QueryResult.java
+++ b/api/src/main/java/io/github/waterfallmc/waterfall/QueryResult.java
@@ -56,4 +56,23 @@ public class QueryResult {
      */
     @NonNull
     private String version;
+    // IvanCord start
+    /**
+     * The plugins to return for this server
+     */
+    private final List<PluginInfo> plugins = new java.util.LinkedList<>();
+
+    /**
+     * Represents a PluginInfo, containing a name and version of a plugin
+     */
+    @Data
+    public static final class PluginInfo
+    {
+        @NonNull
+        private final String name;
+
+        @NonNull
+        private final String version;
+    }
+    // IvanCord end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
index 08c32f6ec3dfdc62102983067c47dd49466cf358..5e0af575712120c46a06f9f393fd4566f99c575b 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
@@ -313,5 +313,12 @@ public interface ProxyConfig
      * @return type of the reconnect handler
      */
     String getReconnectHandlerType();
+
+    /**
+     * Returns whether IvanCord should populate with plugins a query.
+     *
+     * @return whether to populate query with plugins
+     */
+    boolean shouldPopulatePluginsWhenQuery();
     // IvanCord end
 }
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/conf/IvanCordConfiguration.java b/proxy/src/main/java/com/mrivanplays/ivancord/conf/IvanCordConfiguration.java
index 8da2ff6a2b590968422c23a456552223e2501ba7..86dc461793e25b62999665b2ee881b07293ad5ae 100644
--- a/proxy/src/main/java/com/mrivanplays/ivancord/conf/IvanCordConfiguration.java
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/conf/IvanCordConfiguration.java
@@ -23,6 +23,8 @@ public class IvanCordConfiguration extends WaterfallConfiguration
     private int getTCPFastOpenMode = TCPFastOpenMode.CLIENT_ONLY.getValue();
     @Accessors(fluent = true)
     private boolean shouldCheckForGlobalOpIndependently = true;
+    @Accessors(fluent = true)
+    private boolean shouldPopulatePluginsWhenQuery = false;
 
     @Override
     public void load()
@@ -35,6 +37,7 @@ public class IvanCordConfiguration extends WaterfallConfiguration
         getTCPFastOpenMode = setupTFO( config.getInt( "tcp_fast_open_mode", getTCPFastOpenMode ) );
         shouldCheckForGlobalOpIndependently = config.getBoolean( "should_check_for_global_op_independently", shouldCheckForGlobalOpIndependently );
         reconnectHandlerType = setupReconnectHandlerType( config.getString( "reconnect_handler_type", reconnectHandlerType ) );
+        shouldPopulatePluginsWhenQuery = config.getBoolean( "should_populate_plugins_when_query", shouldPopulatePluginsWhenQuery );
     }
 
     private int setupTFO(int incoming)
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index a371fd2b6b9db17b345196eed818a880eef3c6c1..a416fccba6866958a2bfb60696d3f8677436bd11 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -394,7 +394,10 @@ public class ServerConnector extends PacketHandler
         }
 
         // Add to new server
-        // TODO: Move this to the connected() method of DownstreamBridge
+        // IvanCord - remove the to do "Move this to the connected() method of DownstreamBridge"
+        // the to do was removed because if you move this where it is said, the dimension change
+        // and the other stuff won't happen. Because of no dimension change set to false the
+        // connection will always get disconnected from the proxy if cant connect to the server he want.
         target.addPlayer( user );
         user.getPendingConnects().remove( target );
         user.setServerJoinQueue( null );
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index 55a7f799597ff0b82dac2ed4a4a41f8854d4d76e..6aaf3d45bc327b85c32458140e5f8365cdd214b7 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -37,6 +37,7 @@ import net.md_5.bungee.protocol.packet.TabCompleteRequest;
 import net.md_5.bungee.protocol.packet.TabCompleteResponse;
 import net.md_5.bungee.util.AllowedCharacters;
 import com.mrivanplays.ivancord.api.Position; // IvanCord
+import net.md_5.bungee.tab.ServerUnique; // IvanCord
 
 public class UpstreamBridge extends PacketHandler
 {
@@ -76,9 +77,9 @@ public class UpstreamBridge extends PacketHandler
             // Manually remove from everyone's tab list
             // since the packet from the server arrives
             // too late
-            // TODO: This should only done with server_unique
-            //       tab list (which is the only one supported
-            //       currently)
+            // IvanCord start - remove to do "This should only done with server_unique tab list"
+            if ( con.getTabListHandler() instanceof ServerUnique )
+            {
             PlayerListItem packet = new PlayerListItem();
             packet.setAction( PlayerListItem.Action.REMOVE_PLAYER );
             PlayerListItem.Item item = new PlayerListItem.Item();
@@ -91,6 +92,7 @@ public class UpstreamBridge extends PacketHandler
             {
                 player.unsafe().sendPacket( packet );
             }
+            } // IvanCord end
             con.getServer().disconnect( "Quitting" );
         }
     }
diff --git a/query/src/main/java/net/md_5/bungee/query/QueryHandler.java b/query/src/main/java/net/md_5/bungee/query/QueryHandler.java
index 1b9f054bc4a7b87ac3531e4e49d5e93d15420d26..b4f1b231c702f68fa0eeb1aa97f5f3e95e4939c3 100644
--- a/query/src/main/java/net/md_5/bungee/query/QueryHandler.java
+++ b/query/src/main/java/net/md_5/bungee/query/QueryHandler.java
@@ -33,6 +33,7 @@ public class QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
     private final Random random = new Random();
     private final Cache<InetAddress, QuerySession> sessions = CacheBuilder.newBuilder().expireAfterWrite( 30, TimeUnit.SECONDS ).build();
     private static io.github.waterfallmc.waterfall.utils.FastException cachedNoSessionException = new io.github.waterfallmc.waterfall.utils.FastException("No Session!");
+    private volatile List<QueryResult.PluginInfo> cachedPluginInfoList = null; // IvanCord
 
     private void writeShort(ByteBuf buf, int s)
     {
@@ -99,13 +100,39 @@ public class QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
             {
                 throw cachedNoSessionException; // Waterfall
             }
-
+            // IvanCord start
+            List<QueryResult.PluginInfo> plugins = this.cachedPluginInfoList;
+            boolean populateWithPlugins = bungee.getConfig().shouldPopulatePluginsWhenQuery();
+            if ( populateWithPlugins && plugins == null )
+            {
+                synchronized ( this )
+                {
+                    if ( cachedPluginInfoList == null )
+                    {
+                        cachedPluginInfoList = plugins = bungee.getPluginManager().getPlugins()
+                                .parallelStream()
+                                .map( plugin ->
+                                {
+                                    net.md_5.bungee.api.plugin.PluginDescription pluginDescription = plugin.getDescription();
+                                    return new QueryResult.PluginInfo( pluginDescription.getName(), pluginDescription.getVersion() );
+                                } )
+                                .collect( Collectors.toList() );
+                    }
+                }
+            }
+            // IvanCord end
             // Waterfall start
             List<String> players = bungee.getPlayers().stream().map(ProxiedPlayer::getName).collect(Collectors.toList());
 
             ProxyQueryEvent event = new ProxyQueryEvent(listener, new QueryResult(listener.getMotd(), "SMP", "IvanCord_Proxy", // IvanCord - rebranding
                     bungee.getOnlineCount(), listener.getMaxPlayers(), listener.getHost().getPort(),
                     listener.getHost().getHostString(), "MINECRAFT",  players, bungee.getGameVersion()));
+            // IvanCord start
+            if ( populateWithPlugins && plugins != null )
+            {
+                event.getResult().getPlugins().addAll( plugins );
+            }
+            // IvanCord end
             QueryResult result = bungee.getPluginManager().callEvent(event).getResult();
             // Waterfall end
 
@@ -139,7 +166,28 @@ public class QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
                 // Start Extra Info
                 data.put( "game_id", result.getGameId() );
                 data.put( "version", result.getVersion() );
-                data.put( "plugins", "" ); // TODO: Allow population?
+                // IvanCord start - remove to do "Allow population?"
+                if ( !populateWithPlugins )
+                {
+                data.put( "plugins", "" );
+                } else
+                {
+
+                    StringBuilder pluginsString = new StringBuilder();
+                    pluginsString.append( bungee.getName() ).append( ' ' ).append( bungee.getGameVersion() ).append( ':' ).append( ' ' );
+                    java.util.Iterator<QueryResult.PluginInfo> iterator = plugins.iterator();
+                    while ( iterator.hasNext() )
+                    {
+                        QueryResult.PluginInfo pluginInfo = iterator.next();
+                        pluginsString.append( pluginInfo.getName() ).append( ' ' ).append( pluginInfo.getVersion() );
+                        if ( iterator.hasNext() )
+                        {
+                            pluginsString.append( ';' ).append( ' ' );
+                        }
+                    }
+                    data.put( "plugins", pluginsString.toString() );
+                }
+                // IvanCord end
                 // End Extra Info
                 data.put( "map", result.getWorldName() );
                 data.put( "numplayers", Integer.toString( result.getOnlinePlayers() ) );
