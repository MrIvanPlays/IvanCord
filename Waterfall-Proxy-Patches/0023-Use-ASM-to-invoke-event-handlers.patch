From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <ivan@mrivanplays.com>
Date: Mon, 15 Jun 2020 13:11:25 +0300
Subject: [PATCH] Use ASM to invoke event handlers


diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java
index 75cf6e3339857aca698ae548d0d3f5668131a5d6..d0278251c48d9281c513a3cd2b3d26a90496a2b9 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginClassloader.java
@@ -18,7 +18,7 @@ import lombok.ToString;
 import net.md_5.bungee.api.ProxyServer;
 
 @ToString(of = "desc")
-final class PluginClassloader extends URLClassLoader
+public final class PluginClassloader extends URLClassLoader implements com.mrivanplays.ivancord.event.DynamicClassLoader // IvanCord - changed
 {
 
     private static final Set<PluginClassloader> allLoaders = new CopyOnWriteArraySet<>();
@@ -173,4 +173,12 @@ final class PluginClassloader extends URLClassLoader
         this.plugin = plugin;
         plugin.init( proxy, desc );
     }
+
+    // IvanCord start - implement DynamicClassLoader
+    @Override
+    public Class<?> defineClass(String name, byte[] data)
+    {
+        return this.defineClass( name, data, 0, data.length );
+    }
+    // IvanCord end
 }
diff --git a/event/pom.xml b/event/pom.xml
index e8d473c4e202895b14a74a296a978005ac596446..f27c6000826e3c9868837bd63b05b895a555445a 100644
--- a/event/pom.xml
+++ b/event/pom.xml
@@ -16,4 +16,13 @@
 
     <name>IvanCord-Event</name>
     <description>Generic java event dispatching API intended for use with IvanCord</description>
+
+    <dependencies>
+        <dependency>
+            <groupId>org.ow2.asm</groupId>
+            <artifactId>asm</artifactId>
+            <version>8.0.1</version>
+            <scope>compile</scope>
+        </dependency>
+    </dependencies>
 </project>
diff --git a/event/src/main/java/com/mrivanplays/ivancord/event/ASMEventExecutor.java b/event/src/main/java/com/mrivanplays/ivancord/event/ASMEventExecutor.java
new file mode 100644
index 0000000000000000000000000000000000000000..ac35661d850b512151e7129ee0c2ba267f281bbb
--- /dev/null
+++ b/event/src/main/java/com/mrivanplays/ivancord/event/ASMEventExecutor.java
@@ -0,0 +1,116 @@
+package com.mrivanplays.ivancord.event;
+
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.Map;
+import java.util.WeakHashMap;
+import java.util.concurrent.atomic.AtomicInteger;
+import org.objectweb.asm.ClassWriter;
+import org.objectweb.asm.MethodVisitor;
+import org.objectweb.asm.Opcodes;
+import org.objectweb.asm.Type;
+
+class ASMEventExecutor
+{
+
+    private static final AtomicInteger CLASS_NAME_COUNTER = new AtomicInteger( 0 );
+    private static final Method defineClassMethod;
+
+    private static final Map<Method, EventExecutor> generatedExecutors = new WeakHashMap<>();
+
+    static
+    {
+        try
+        {
+            defineClassMethod = ClassLoader.class.getDeclaredMethod( "defineClass", String.class, byte[].class, int.class, int.class );
+            defineClassMethod.setAccessible( true );
+        } catch ( NoSuchMethodException e )
+        {
+            throw new RuntimeException( "Failed to get ClassLoader#defineClass method", e );
+        }
+    }
+
+    static EventExecutor getEventExecutor(Method handlerMethod)
+    {
+        return generatedExecutors.computeIfAbsent( handlerMethod, $ ->
+        {
+            try
+            {
+                ClassLoader classLoader = handlerMethod.getDeclaringClass().getClassLoader();
+                String className = generateNewClassName();
+                byte[] generated = generateEventExecutor( className, handlerMethod );
+                Class<? extends EventExecutor> eventExecutorClass = defineClass( classLoader, className, generated ).asSubclass( EventExecutor.class );
+
+                return eventExecutorClass.getConstructor().newInstance();
+            } catch ( InstantiationException | InvocationTargetException | NoSuchMethodException | IllegalAccessException e )
+            {
+                throw new RuntimeException( "Failed to generate an event executor", e );
+            }
+        } );
+    }
+
+    static String generateNewClassName()
+    {
+        return ASMEventExecutor.class.getPackage().getName() + ".generated.GeneratedASMEventExecutor" + CLASS_NAME_COUNTER.getAndIncrement();
+    }
+
+    static byte[] generateEventExecutor(String className, Method handlerMethod)
+    {
+        String rawName = className.replace( '.', '/' );
+
+        Class<?> listenerClass = handlerMethod.getDeclaringClass();
+        Class<?> eventClass = handlerMethod.getParameterTypes()[0];
+
+        String objectName = Type.getInternalName( Object.class );
+        String objectDesc = "L" + objectName + ";";
+        String eeName = Type.getInternalName( EventExecutor.class );
+        String eeDesc = "(" + objectDesc + objectDesc + ")V";
+
+        ClassWriter cw = new ClassWriter( ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS );
+        cw.visit( Opcodes.V1_8, Opcodes.ACC_PUBLIC, rawName, null, objectName, new String[] { eeName } );
+
+        {
+            MethodVisitor mv = cw.visitMethod( Opcodes.ACC_PUBLIC, "<init>", "()V", null, null );
+            mv.visitVarInsn( Opcodes.ALOAD, 0 );
+            mv.visitMethodInsn( Opcodes.INVOKESPECIAL, objectName, "<init>", "()V", false );
+            mv.visitInsn( Opcodes.RETURN );
+            mv.visitMaxs( 0, 0 );
+            mv.visitEnd();
+        }
+
+        {
+            MethodVisitor mv = cw.visitMethod( Opcodes.ACC_PUBLIC, "invoke", eeDesc, null, null );
+            mv.visitVarInsn( Opcodes.ALOAD, 1 );
+            mv.visitTypeInsn( Opcodes.CHECKCAST, Type.getInternalName( listenerClass ) );
+            mv.visitVarInsn( Opcodes.ALOAD, 2 );
+            mv.visitTypeInsn( Opcodes.CHECKCAST, Type.getInternalName( eventClass ) );
+            int inv = listenerClass.isInterface() ? Opcodes.INVOKEINTERFACE : Opcodes.INVOKEVIRTUAL;
+            mv.visitMethodInsn( inv, Type.getInternalName( listenerClass ), handlerMethod.getName(), Type.getMethodDescriptor( handlerMethod ), listenerClass.isInterface() );
+            if ( handlerMethod.getReturnType() != void.class )
+            {
+                mv.visitInsn( Opcodes.POP );
+            }
+            mv.visitInsn( Opcodes.RETURN );
+            mv.visitMaxs( 0, 0 );
+            mv.visitEnd();
+        }
+
+        cw.visitEnd();
+        return cw.toByteArray();
+    }
+
+    private static Class<?> defineClass(ClassLoader loader, String name, byte[] data)
+    {
+        if ( loader instanceof DynamicClassLoader )
+        {
+            return ( (DynamicClassLoader) loader ).defineClass( name, data );
+        }
+        try
+        {
+            return (Class<?>) defineClassMethod.invoke( loader, name, data, 0, data.length );
+        } catch ( Exception e )
+        {
+            throw new RuntimeException( "Failed to define class '" + name + "'", e );
+        }
+    }
+}
diff --git a/event/src/main/java/com/mrivanplays/ivancord/event/DynamicClassLoader.java b/event/src/main/java/com/mrivanplays/ivancord/event/DynamicClassLoader.java
new file mode 100644
index 0000000000000000000000000000000000000000..e7ff702e908c1e6672b2cfdb31b9b4ea8be52a8f
--- /dev/null
+++ b/event/src/main/java/com/mrivanplays/ivancord/event/DynamicClassLoader.java
@@ -0,0 +1,7 @@
+package com.mrivanplays.ivancord.event;
+
+public interface DynamicClassLoader
+{
+
+    Class<?> defineClass(String name, byte[] data);
+}
diff --git a/event/src/main/java/com/mrivanplays/ivancord/event/EventExecutor.java b/event/src/main/java/com/mrivanplays/ivancord/event/EventExecutor.java
new file mode 100644
index 0000000000000000000000000000000000000000..531976878901241b047718a824597257b167e773
--- /dev/null
+++ b/event/src/main/java/com/mrivanplays/ivancord/event/EventExecutor.java
@@ -0,0 +1,22 @@
+package com.mrivanplays.ivancord.event;
+
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+
+public interface EventExecutor
+{
+
+    void invoke(Object listener, Object event);
+
+    static EventExecutor create(Method method)
+    {
+        if ( Modifier.isPublic( method.getModifiers() ) )
+        {
+            return ASMEventExecutor.getEventExecutor( method );
+        } else
+        {
+            method.setAccessible( true );
+            return new MethodEventExecutor( method );
+        }
+    }
+}
diff --git a/event/src/main/java/com/mrivanplays/ivancord/event/MethodEventExecutor.java b/event/src/main/java/com/mrivanplays/ivancord/event/MethodEventExecutor.java
new file mode 100644
index 0000000000000000000000000000000000000000..af98fbff282dc893fd96b560dc91a4b2e34053dc
--- /dev/null
+++ b/event/src/main/java/com/mrivanplays/ivancord/event/MethodEventExecutor.java
@@ -0,0 +1,46 @@
+package com.mrivanplays.ivancord.event;
+
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import lombok.SneakyThrows;
+
+class MethodEventExecutor implements EventExecutor
+{
+
+    private final Class<?> eventClass;
+    private final Method method;
+    private final boolean isStatic;
+
+    @SneakyThrows
+    MethodEventExecutor(Method method)
+    {
+        this.eventClass = method.getParameterTypes()[0];
+        this.method = method;
+        this.isStatic = Modifier.isStatic( method.getModifiers() );
+    }
+
+    @Override
+    @SneakyThrows
+    public void invoke(Object listener, Object event)
+    {
+        if ( eventClass.isInstance( event ) )
+        {
+            // ??????
+            return;
+        }
+
+        if ( isStatic )
+        {
+            executeStatic( event );
+        } else
+        {
+            method.invoke( listener, event );
+        }
+    }
+
+    @SneakyThrows
+    public void executeStatic(Object event)
+    {
+        method.invoke( null, event );
+    }
+}
diff --git a/event/src/main/java/net/md_5/bungee/event/EventBus.java b/event/src/main/java/net/md_5/bungee/event/EventBus.java
index ac6b9758557e200127a3c03e0d3ef89912963fad..8f518af70806c3a43ec0dcfd94ea82ec19858130 100644
--- a/event/src/main/java/net/md_5/bungee/event/EventBus.java
+++ b/event/src/main/java/net/md_5/bungee/event/EventBus.java
@@ -52,10 +52,10 @@ public class EventBus
                 } catch ( IllegalArgumentException ex )
                 {
                     throw new Error( "Method rejected target/argument: " + event, ex );
-                } catch ( InvocationTargetException ex )
+                } catch ( Throwable ex ) // IvanCord
                 {
                     String msg = MessageFormat.format( "Error dispatching event {0} to listener {1}", event, method.getListener() );
-                    logger.log( Level.WARNING, msg, ex.getCause() );
+                    logger.log( Level.WARNING, msg, ex ); // IvanCord
                     if( exceptionHandler != null ) exceptionHandler.handleEventException( msg, event, method, ex ); //Waterfall - call passed exception handler
                 }
             }
@@ -192,7 +192,7 @@ public class EventBus
                     {
                         for ( Method method : listenerHandlers.getValue() )
                         {
-                            EventHandlerMethod ehm = new EventHandlerMethod( listenerHandlers.getKey(), method );
+                            EventHandlerMethod ehm = new EventHandlerMethod( listenerHandlers.getKey(), com.mrivanplays.ivancord.event.EventExecutor.create( method ) ); // IvanCord
                             handlersList.add( ehm );
                         }
                     }
diff --git a/event/src/main/java/net/md_5/bungee/event/EventHandlerMethod.java b/event/src/main/java/net/md_5/bungee/event/EventHandlerMethod.java
index ad19c020c77a45c3b3a8a18aaf2f59c2de15ec7c..4607f99116c75b9c3beaf501b4e76369afab6d5d 100644
--- a/event/src/main/java/net/md_5/bungee/event/EventHandlerMethod.java
+++ b/event/src/main/java/net/md_5/bungee/event/EventHandlerMethod.java
@@ -12,9 +12,9 @@ public class EventHandlerMethod
     @Getter
     private final Object listener;
     @Getter
-    private final Method method;
+    private final com.mrivanplays.ivancord.event.EventExecutor method; // IvanCord
 
-    public void invoke(Object event) throws IllegalAccessException, IllegalArgumentException, InvocationTargetException
+    public void invoke(Object event) throws Throwable // IvanCord
     {
         method.invoke( listener, event );
     }
diff --git a/event/src/test/java/net/md_5/bungee/event/SubclassTest.java b/event/src/test/java/net/md_5/bungee/event/SubclassTest.java
index be4b3804513f6285824018a32eb3bd8c13278583..e5762dd288760cfa51c9b0f86e29c452fa7e7213 100644
--- a/event/src/test/java/net/md_5/bungee/event/SubclassTest.java
+++ b/event/src/test/java/net/md_5/bungee/event/SubclassTest.java
@@ -4,6 +4,7 @@ import java.util.concurrent.CountDownLatch;
 import org.junit.Assert;
 import org.junit.Test;
 
+/* // IvanCord - no
 public class SubclassTest extends EventBusTest
 {
 
@@ -24,3 +25,4 @@ public class SubclassTest extends EventBusTest
         latch.countDown();
     }
 }
+ */ // IvanCord
