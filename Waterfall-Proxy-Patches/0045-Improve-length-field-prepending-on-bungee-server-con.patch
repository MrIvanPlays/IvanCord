From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Janmm14 <gitconfig1@janmm14.de>
Date: Thu, 23 Mar 2023 09:56:47 +0200
Subject: [PATCH] Improve length field prepending on bungee -> server
 connections

Use alternative implementation of Varint21LengthFieldPrepender
on bungee -> server connection for improved speed - it uses
separate buffer to prepend the length to avoid copying large
data buffer.

Not applied bungee -> client because encrypting 1-5 bytes of
length spearately through expensive jni calls could make it not
worth (not measured).

Netty's LengthFieldPrepender also uses an extra buffer for the length

diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Varint21LengthFieldExtraBufPrepender.java b/protocol/src/main/java/net/md_5/bungee/protocol/Varint21LengthFieldExtraBufPrepender.java
new file mode 100644
index 0000000000000000000000000000000000000000..0829b88f208e06fa046c5eb8026d9716a15efe63
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Varint21LengthFieldExtraBufPrepender.java
@@ -0,0 +1,22 @@
+// IvanCord start
+package net.md_5.bungee.protocol;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.channel.ChannelHandlerContext;
+import io.netty.handler.codec.MessageToMessageEncoder;
+import java.util.List;
+
+public class Varint21LengthFieldExtraBufPrepender extends MessageToMessageEncoder<ByteBuf>
+{
+
+    @Override
+    protected void encode(ChannelHandlerContext ctx, ByteBuf msg, List<Object> out) throws Exception
+    {
+        int bodyLen = msg.readableBytes();
+        ByteBuf lenBuf = ctx.alloc().ioBuffer( Varint21LengthFieldPrepender.varintSize( bodyLen ) );
+        DefinedPacket.writeVarInt( bodyLen, lenBuf );
+        out.add( lenBuf );
+        out.add( msg.retain() );
+    }
+}
+// IvanCord end
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Varint21LengthFieldPrepender.java b/protocol/src/main/java/net/md_5/bungee/protocol/Varint21LengthFieldPrepender.java
index 71b5abc429630d9a03f7af3e08809f4847300202..d4c2226a2b8bdb4430021cf85b3966ced42c4f74 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Varint21LengthFieldPrepender.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Varint21LengthFieldPrepender.java
@@ -36,7 +36,7 @@ public class Varint21LengthFieldPrepender extends MessageToByteEncoder<Object> /
         // IvanCord end
     }
 
-    private static int varintSize(int paramInt)
+    static int varintSize(int paramInt) // IvanCord
     {
         if ( ( paramInt & 0xFFFFFF80 ) == 0 )
         {
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
index fad67ed9bfc38e5deb29e6da428f32f004b484b8..c0ff44adce1de77d1623cfa3b78d18796041f3b6 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
@@ -194,7 +194,7 @@ public class BungeeServerInfo implements ServerInfo
         new Bootstrap()
                 .channelFactory( PipelineUtils.getChannelFactory( socketAddress ) ) // IvanCord
                 .group( BungeeCord.getInstance().workerEventLoopGroup )
-                .handler( PipelineUtils.BASE )
+                .handler( PipelineUtils.BASE_SERVERSIDE ) // IvanCord
                 .option( ChannelOption.CONNECT_TIMEOUT_MILLIS, BungeeCord.getInstance().getConfig().getRemotePingTimeout() )
                 .remoteAddress( socketAddress )
                 .connect()
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 500137bcebfe570ee80b8b468c098e5a5a5221fb..5ffd4a96e4b967a14e7a7b8c228a3cbe75ace7a5 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -387,7 +387,7 @@ public final class UserConnection implements ProxiedPlayer
             @Override
             protected void initChannel(Channel ch) throws Exception
             {
-                PipelineUtils.BASE.initChannel( ch );
+                PipelineUtils.BASE_SERVERSIDE.initChannel( ch ); // IvanCord
                 ch.pipeline().addAfter( PipelineUtils.FRAME_DECODER, PipelineUtils.PACKET_DECODER, new MinecraftDecoder( Protocol.HANDSHAKE, false, getPendingConnection().getVersion() ) );
                 ch.pipeline().addAfter( PipelineUtils.FRAME_PREPENDER, PipelineUtils.PACKET_ENCODER, new MinecraftEncoder( Protocol.HANDSHAKE, false, getPendingConnection().getVersion() ) );
                 ch.pipeline().get( HandlerBoss.class ).setHandler( new ServerConnector( bungee, UserConnection.this, target ) );
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index c4c8c50456ebcd51cb9503d04be7f8550564ca20..353116ecf9385b6318084621b4817c8060bace07 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -119,8 +119,10 @@ public class PipelineUtils
     };
     public static final Base BASE = new Base();
     public static final Base LIMITED_BASE = new Base( true ); // IvanCord - Add LIMITED_BASE for connections from clients
+    public static final Base BASE_SERVERSIDE = new Base( false, true ); // IvanCord - serverside base
     private static final KickStringWriter legacyKicker = new KickStringWriter();
     private static final Varint21LengthFieldPrepender framePrepender = new Varint21LengthFieldPrepender();
+    private static final net.md_5.bungee.protocol.Varint21LengthFieldExtraBufPrepender serversideFramePrepender = new net.md_5.bungee.protocol.Varint21LengthFieldExtraBufPrepender(); // IvanCord
     public static final String TIMEOUT_HANDLER = "timeout";
     public static final String PACKET_DECODER = "packet-decoder";
     public static final String PACKET_ENCODER = "packet-encoder";
@@ -240,15 +242,20 @@ public class PipelineUtils
     private static final int HIGH_MARK = Integer.getInteger( "net.md_5.bungee.high_mark", 2 << 20 ); // 2 mb
     private static final WriteBufferWaterMark MARK = new WriteBufferWaterMark( LOW_MARK, HIGH_MARK );
 
-    @lombok.RequiredArgsConstructor // IvanCord
+    @lombok.AllArgsConstructor // IvanCord
     public static final class Base extends ChannelInitializer<Channel>
     {
 
         // IvanCord start
         private final boolean fromClient;
+        private final boolean serverside;
         public Base()
         {
-            this( false );
+            this( false, false );
+        }
+        public Base(boolean fromClient)
+        {
+            this( fromClient, false );
         }
         // IvanCord end
 
@@ -269,7 +276,7 @@ public class PipelineUtils
 
             ch.pipeline().addLast( FRAME_DECODER, fromClient ? new Varint21FrameDecoder( true ) : new Varint21FrameDecoder() ); // IvanCord - limit decoding length for client packets
             ch.pipeline().addLast( TIMEOUT_HANDLER, new ReadTimeoutHandler( BungeeCord.getInstance().config.getTimeout(), TimeUnit.MILLISECONDS ) );
-            ch.pipeline().addLast( FRAME_PREPENDER, framePrepender );
+            ch.pipeline().addLast( FRAME_PREPENDER, serverside ? serversideFramePrepender : framePrepender ); // IvanCord
 
             ch.pipeline().addLast( BOSS_HANDLER, new HandlerBoss() );
         }
