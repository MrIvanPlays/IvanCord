From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Sat, 13 Apr 2019 20:04:14 +0300
Subject: [PATCH] Get rid of modules


diff --git a/pom.xml b/pom.xml
index 7129d0e38da23e3fc07f2afc9eaf197adf7d9ef8..11a5f7b995a2514749b0109d649d6f5e42634e3e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -38,7 +38,9 @@
         <module>log</module>
         -->
         <module>log4j</module>
+        <!-- IvanCord - remove the bungee "modules"
         <module>module</module>
+        -->
         <module>protocol</module>
         <module>proxy</module>
         <module>query</module>
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/modules/CommandAlert.java b/proxy/src/main/java/com/mrivanplays/ivancord/modules/CommandAlert.java
new file mode 100644
index 0000000000000000000000000000000000000000..39f8ea16065200f62e391658d0e6c0c33cecf836
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/modules/CommandAlert.java
@@ -0,0 +1,47 @@
+package com.mrivanplays.ivancord.modules;
+
+import com.mrivanplays.ivancord.util.ICUtil;
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.chat.TextComponent;
+import net.md_5.bungee.api.plugin.Command;
+
+public class CommandAlert extends Command
+{
+
+    public CommandAlert()
+    {
+        super( "alert", "bungeecord.command.alert" );
+    }
+
+    @Override
+    public void execute(CommandSender sender, String[] args)
+    {
+        if ( args.length == 0 )
+        {
+            sender.sendMessage( ICUtil.translation( "message_needed" ) );
+        } else
+        {
+            StringBuilder builder = new StringBuilder();
+            if ( args[0].startsWith( "&h" ) )
+            {
+                // Remove &h
+                args[0] = args[0].substring( 2 );
+            } else
+            {
+                builder.append( ProxyServer.getInstance().getTranslation( "alert" ) );
+            }
+
+            for ( String s : args )
+            {
+                builder.append( ChatColor.translateAlternateColorCodes( '&', s ) );
+                builder.append( " " );
+            }
+
+            String message = builder.substring( 0, builder.length() - 1 );
+
+            ProxyServer.getInstance().broadcast( TextComponent.fromLegacyText( message ) );
+        }
+    }
+}
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/modules/CommandAlertRaw.java b/proxy/src/main/java/com/mrivanplays/ivancord/modules/CommandAlertRaw.java
new file mode 100644
index 0000000000000000000000000000000000000000..271ea4b559d7fce7c09ab56a971bf2cd30552906
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/modules/CommandAlertRaw.java
@@ -0,0 +1,57 @@
+package com.mrivanplays.ivancord.modules;
+
+import com.google.common.base.Joiner;
+import com.mrivanplays.ivancord.util.ICUtil;
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.chat.ComponentBuilder;
+import net.md_5.bungee.api.chat.HoverEvent;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.api.plugin.Command;
+import net.md_5.bungee.chat.ComponentSerializer;
+
+public class CommandAlertRaw extends Command
+{
+
+    public CommandAlertRaw()
+    {
+        super( "alertraw", "bungeecord.command.alert" );
+    }
+
+    @Override
+    public void execute(CommandSender sender, String[] args)
+    {
+        if ( args.length == 0 )
+        {
+            sender.sendMessage( ICUtil.translation( "message_needed" ) );
+        } else
+        {
+            String message = Joiner.on( ' ' ).join( args );
+
+            try
+            {
+                ProxyServer.getInstance().broadcast( ComponentSerializer.parse( message ) );
+            } catch ( Exception e )
+            {
+                Throwable error = e;
+                while ( error.getCause() != null )
+                {
+                    error = error.getCause();
+                }
+                if ( sender instanceof ProxiedPlayer )
+                {
+                    sender.sendMessage( new ComponentBuilder( "" )
+                            .append( ICUtil.translation( "error_occurred_player" ) )
+                            .event( new HoverEvent( HoverEvent.Action.SHOW_TEXT, new ComponentBuilder( error.getMessage() ).color( ChatColor.RED ).create() ) )
+                            .create()
+                    );
+                } else
+                {
+                    sender.sendMessage( new ComponentBuilder( "" ).append( ICUtil.translation( "error_occurred_console" ) )
+                            .append( error.getMessage() ).create() );
+                }
+            }
+        }
+    }
+}
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/modules/CommandFind.java b/proxy/src/main/java/com/mrivanplays/ivancord/modules/CommandFind.java
new file mode 100644
index 0000000000000000000000000000000000000000..f8cd072326c78518f6b2dec796fc3eaa7afb405c
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/modules/CommandFind.java
@@ -0,0 +1,38 @@
+package com.mrivanplays.ivancord.modules;
+
+import com.mrivanplays.ivancord.util.ICUtil;
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.chat.ComponentBuilder;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.command.PlayerCommand;
+
+public class CommandFind extends PlayerCommand
+{
+
+    public CommandFind()
+    {
+        super( "find", "bungeecord.command.find" );
+    }
+
+    @Override
+    public void execute(CommandSender sender, String[] args)
+    {
+        if ( args.length != 1 )
+        {
+            sender.sendMessage( ICUtil.translation( "username_needed" ) );
+        } else
+        {
+            ProxiedPlayer player = ProxyServer.getInstance().getPlayer( args[0] );
+            if ( player == null || player.getServer() == null )
+            {
+                sender.sendMessage( ICUtil.translation( "user_not_online" ) );
+            } else
+            {
+                sender.sendMessage( ICUtil.translation( "user_online_at",
+                        player.getName(), player.getServer().getInfo().getName() ) );
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/modules/CommandList.java b/proxy/src/main/java/com/mrivanplays/ivancord/modules/CommandList.java
new file mode 100644
index 0000000000000000000000000000000000000000..460482042d0b6f38fdd75aa7b4e74b58c02cfb8d
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/modules/CommandList.java
@@ -0,0 +1,47 @@
+package com.mrivanplays.ivancord.modules;
+
+import java.util.ArrayList;
+import java.util.List;
+import com.mrivanplays.ivancord.util.ICUtil;
+import net.md_5.bungee.Util;
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.config.ServerInfo;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.api.plugin.Command;
+
+/**
+ * Command to list all players connected to the proxy.
+ */
+public class CommandList extends Command
+{
+
+    public CommandList()
+    {
+        super( "glist", "bungeecord.command.list" );
+    }
+
+    @Override
+    public void execute(CommandSender sender, String[] args)
+    {
+        for ( ServerInfo server : ProxyServer.getInstance().getServersCopy().values() )
+        {
+            if ( !server.canAccess( sender ) )
+            {
+                continue;
+            }
+
+            List<String> players = new ArrayList<>();
+            for ( ProxiedPlayer player : server.getPlayers() )
+            {
+                players.add( player.getDisplayName() );
+            }
+            players.sort( String.CASE_INSENSITIVE_ORDER );
+
+            sender.sendMessage( ICUtil.translation( "command_list", server.getName(), server.getPlayers().size(), Util.format( players, ChatColor.RESET + ", " ) ) );
+        }
+
+        sender.sendMessage( ProxyServer.getInstance().getTranslation( "total_players", ProxyServer.getInstance().getOnlineCount() ) );
+    }
+}
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/modules/CommandSend.java b/proxy/src/main/java/com/mrivanplays/ivancord/modules/CommandSend.java
new file mode 100644
index 0000000000000000000000000000000000000000..a51e7ecc32234d020a99dc6de676aa7fd1c19f73
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/modules/CommandSend.java
@@ -0,0 +1,127 @@
+package com.mrivanplays.ivancord.modules;
+
+import java.util.Collections;
+import java.util.HashSet;
+import java.util.Locale;
+import java.util.Set;
+import java.util.stream.Collectors;
+import com.mrivanplays.ivancord.util.ICUtil;
+import net.md_5.bungee.api.ChatColor;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.config.ServerInfo;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.api.event.ServerConnectEvent;
+import net.md_5.bungee.api.plugin.Command;
+import net.md_5.bungee.api.plugin.TabExecutor;
+
+public class CommandSend extends Command implements TabExecutor
+{
+
+    public CommandSend()
+    {
+        super( "send", "bungeecord.command.send" );
+    }
+
+    @Override
+    public void execute(CommandSender sender, String[] args)
+    {
+        if ( args.length != 2 )
+        {
+            sender.sendMessage( ICUtil.translation( "send_cmd_usage" ) );
+            return;
+        }
+        ServerInfo target = ProxyServer.getInstance().getServerInfo( args[1] );
+        if ( target == null )
+        {
+            sender.sendMessage( ICUtil.translation( "no_server" ) );
+            return;
+        }
+
+        if ( args[0].equalsIgnoreCase( "all" ) )
+        {
+            for ( ProxiedPlayer p : ProxyServer.getInstance().getPlayers() )
+            {
+                summon( p, target, sender );
+            }
+        } else if ( args[0].equalsIgnoreCase( "current" ) )
+        {
+            if ( !( sender instanceof ProxiedPlayer ) )
+            {
+                sender.sendMessage( ICUtil.translation( "player_only" ) );
+                return;
+            }
+            ProxiedPlayer player = (ProxiedPlayer) sender;
+            for ( ProxiedPlayer p : player.getServer().getInfo().getPlayers() )
+            {
+                summon( p, target, sender );
+            }
+        } else
+        {
+            // If we use a server name, send the entire server. This takes priority over players.
+            ServerInfo serverTarget = ProxyServer.getInstance().getServerInfo( args[0] );
+            if ( serverTarget != null )
+            {
+                for ( ProxiedPlayer p : serverTarget.getPlayers() )
+                {
+                    summon( p, target, sender );
+                }
+            } else
+            {
+                ProxiedPlayer player = ProxyServer.getInstance().getPlayer( args[0] );
+                if ( player == null )
+                {
+                    sender.sendMessage( ICUtil.translation( "user_not_online" ) );
+                    return;
+                }
+                summon( player, target, sender );
+            }
+        }
+        sender.sendMessage( ICUtil.translation( "successfully_summoned" ) );
+    }
+
+    private void summon(ProxiedPlayer player, ServerInfo target, CommandSender sender)
+    {
+        if ( player.getServer() != null && !player.getServer().getInfo().equals( target ) )
+        {
+            player.connect( target, ServerConnectEvent.Reason.COMMAND );
+            player.sendMessage( ICUtil.translation( "you_got_summoned", target.getName(), sender.getName() ) );
+        }
+    }
+
+    @Override
+    public Iterable<String> onTabComplete(CommandSender sender, String[] args)
+    {
+        if ( args.length > 2 || args.length == 0 )
+        {
+            return Collections.emptyList();
+        }
+
+        Set<String> matches = new HashSet<>();
+        if ( args.length == 1 )
+        {
+            String search = args[0].toLowerCase( Locale.ROOT );
+            matches.addAll( ProxyServer.getInstance().getPlayers()
+                    .parallelStream()
+                    .map( CommandSender::getName )
+                    .filter( name -> name.toLowerCase( Locale.ROOT ).startsWith( search ) )
+                    .collect( Collectors.toList() ) );
+            if ( "all".startsWith( search ) )
+            {
+                matches.add( "all" );
+            }
+            if ( "current".startsWith( search ) )
+            {
+                matches.add( "current" );
+            }
+        } else
+        {
+            String search = args[1].toLowerCase( Locale.ROOT );
+            matches.addAll( ProxyServer.getInstance().getServersCopy().keySet()
+                    .parallelStream()
+                    .filter( name -> name.toLowerCase( Locale.ROOT ).startsWith( search ) )
+                    .collect( Collectors.toList() ) );
+        }
+        return matches;
+    }
+}
\ No newline at end of file
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/modules/CommandServer.java b/proxy/src/main/java/com/mrivanplays/ivancord/modules/CommandServer.java
new file mode 100644
index 0000000000000000000000000000000000000000..6f186fca7a972f6bc6e204b2cef79719e56f61f4
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/modules/CommandServer.java
@@ -0,0 +1,97 @@
+package com.mrivanplays.ivancord.modules;
+
+import java.util.Collections;
+import java.util.Locale;
+import java.util.Map;
+import java.util.stream.Collectors;
+import com.mrivanplays.ivancord.util.ICUtil;
+import net.md_5.bungee.api.CommandSender;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.chat.ClickEvent;
+import net.md_5.bungee.api.chat.ComponentBuilder;
+import net.md_5.bungee.api.chat.HoverEvent;
+import net.md_5.bungee.api.chat.TextComponent;
+import net.md_5.bungee.api.config.ServerInfo;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.api.event.ServerConnectEvent;
+import net.md_5.bungee.api.plugin.Command;
+import net.md_5.bungee.api.plugin.TabExecutor;
+
+/**
+ * Command to list and switch a player between available servers.
+ */
+public class CommandServer extends Command implements TabExecutor
+{
+
+    public CommandServer()
+    {
+        super( "server", "bungeecord.command.server" );
+    }
+
+    @Override
+    public void execute(CommandSender sender, String[] args)
+    {
+        Map<String, ServerInfo> servers = ProxyServer.getInstance().getServersCopy();
+        if ( args.length == 0 )
+        {
+            if ( sender instanceof ProxiedPlayer )
+            {
+                sender.sendMessage( ICUtil.translation( "current_server", ( (ProxiedPlayer) sender ).getServer().getInfo().getName() ) );
+            }
+
+            ComponentBuilder serverList = new ComponentBuilder( "" ).append( ICUtil.translation( "server_list" ) );
+            boolean first = true;
+            for ( ServerInfo server : servers.values() )
+            {
+                if ( server.canAccess( sender ) )
+                {
+                    TextComponent serverTextComponent = new TextComponent( first ? server.getName() : ", " + server.getName() );
+                    int count = server.getPlayers().size();
+                    serverTextComponent.setHoverEvent( new HoverEvent(
+                            HoverEvent.Action.SHOW_TEXT,
+                            new ComponentBuilder( count + ( count == 1 ? " player" : " players" ) + "\n" )
+                                    .append( ProxyServer.getInstance().getTranslation( "click_to_connect" ) ).create() )
+                    );
+                    serverTextComponent.setClickEvent( new ClickEvent( ClickEvent.Action.RUN_COMMAND, "/server " + server.getName() ) );
+                    serverList.append( serverTextComponent );
+                    first = false;
+                }
+            }
+            sender.sendMessage( serverList.create() );
+        } else
+        {
+            if ( !( sender instanceof ProxiedPlayer ) )
+            {
+                return;
+            }
+            ProxiedPlayer player = (ProxiedPlayer) sender;
+
+            ServerInfo server = servers.get( args[0] );
+            if ( server == null )
+            {
+                player.sendMessage( ICUtil.translation( "no_server" ) );
+            } else if ( !server.canAccess( player ) )
+            {
+                player.sendMessage( ICUtil.translation( "no_server_permission" ) );
+            } else
+            {
+                player.connect( server, ServerConnectEvent.Reason.COMMAND );
+            }
+        }
+    }
+
+    @Override
+    public Iterable<String> onTabComplete(final CommandSender sender, final String[] args)
+    {
+        if ( args.length == 0 )
+        {
+            return Collections.emptyList();
+        }
+        String lower = args[0].toLowerCase( Locale.ROOT );
+        return ProxyServer.getInstance().getServersCopy().values()
+                .parallelStream()
+                .filter( info -> info.getName().toLowerCase( Locale.ROOT ).startsWith( lower ) && info.canAccess( sender ) )
+                .map( info -> info.getName().toLowerCase() )
+                .collect( Collectors.toList() );
+    }
+}
\ No newline at end of file
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/modules/YamlReconnectHandler.java b/proxy/src/main/java/com/mrivanplays/ivancord/modules/YamlReconnectHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..33dadd66ea70ade0aa6784481ce5099a9e8f8391
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/modules/YamlReconnectHandler.java
@@ -0,0 +1,115 @@
+package com.mrivanplays.ivancord.modules;
+
+import java.io.File;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.UUID;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+import java.util.logging.Level;
+import net.md_5.bungee.api.AbstractReconnectHandler;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.config.ServerInfo;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import org.yaml.snakeyaml.Yaml;
+
+public class YamlReconnectHandler extends AbstractReconnectHandler
+{
+
+    private final Yaml yaml = new Yaml();
+    private final File file = new File( "locations.yml" );
+    private final ReadWriteLock lock = new ReentrantReadWriteLock();
+    /*========================================================================*/
+    private Map<UUID, String> data;
+
+    public YamlReconnectHandler()
+    {
+        try
+        {
+            file.createNewFile();
+            try ( FileReader rd = new FileReader( file ) )
+            {
+                Map<String, String> map = yaml.loadAs( rd, Map.class );
+                if ( map != null )
+                {
+                    data = new ConcurrentHashMap<>();
+                    for ( Map.Entry<String, String> entry : map.entrySet() )
+                    {
+                        data.put( UUID.fromString( entry.getKey() ), entry.getValue() );
+                    }
+                }
+            }
+        } catch ( Exception ex )
+        {
+            file.renameTo( new File( "locations.yml.old" ) );
+            ProxyServer.getInstance().getLogger().log( Level.WARNING, "Could not load reconnect locations, resetting them" );
+        }
+
+        if ( data == null )
+        {
+            data = new ConcurrentHashMap<>();
+        }
+    }
+
+    @Override
+    protected ServerInfo getStoredServer(ProxiedPlayer player)
+    {
+        ServerInfo server;
+        lock.readLock().lock();
+        try
+        {
+            server = ProxyServer.getInstance().getServerInfo( data.get( player.getUniqueId() ) );
+        } finally
+        {
+            lock.readLock().unlock();
+        }
+        return server;
+    }
+
+    @Override
+    public void setServer(ProxiedPlayer player)
+    {
+        lock.writeLock().lock();
+        try
+        {
+            data.put( player.getUniqueId(), ( player.getReconnectServer() != null ) ? player.getReconnectServer().getName() : player.getServer().getInfo().getName() );
+        } finally
+        {
+            lock.writeLock().unlock();
+        }
+    }
+
+    @Override
+    public void save()
+    {
+        Map<String, String> copy = new HashMap<>();
+        lock.readLock().lock();
+        try
+        {
+            for ( Map.Entry<UUID, String> entry : data.entrySet() )
+            {
+                copy.put( entry.getKey().toString(), entry.getValue() );
+            }
+        } finally
+        {
+            lock.readLock().unlock();
+        }
+
+        try ( FileWriter wr = new FileWriter( file ) )
+        {
+            yaml.dump( copy, wr );
+        } catch ( IOException ex )
+        {
+            ProxyServer.getInstance().getLogger().log( Level.WARNING, "Could not save reconnect locations", ex );
+        }
+    }
+
+    @Override
+    public void close()
+    {
+    }
+}
\ No newline at end of file
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/util/ICUtil.java b/proxy/src/main/java/com/mrivanplays/ivancord/util/ICUtil.java
new file mode 100644
index 0000000000000000000000000000000000000000..4915d8d7b55c1f6d16ad55024ec807a2b18870eb
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/util/ICUtil.java
@@ -0,0 +1,14 @@
+package com.mrivanplays.ivancord.util;
+
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.chat.BaseComponent;
+import net.md_5.bungee.api.chat.TextComponent;
+
+public class ICUtil
+{
+
+    public static BaseComponent[] translation(String translation, Object... args)
+    {
+        return TextComponent.fromLegacyText( ProxyServer.getInstance().getTranslation( translation, args ) );
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index efbf316486fb89e1da3a38e511bb7a9210d17f91..a13e8ff0ae39c961c54a19aa23ef485ffe55ef22 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -91,6 +91,15 @@ import net.md_5.bungee.query.RemoteQuery;
 import net.md_5.bungee.scheduler.BungeeScheduler;
 import net.md_5.bungee.util.CaseInsensitiveMap;
 
+// IvanCord start
+import com.mrivanplays.ivancord.modules.CommandAlert;
+import com.mrivanplays.ivancord.modules.CommandAlertRaw;
+import com.mrivanplays.ivancord.modules.CommandFind;
+import com.mrivanplays.ivancord.modules.CommandList;
+import com.mrivanplays.ivancord.modules.CommandSend;
+import com.mrivanplays.ivancord.modules.CommandServer;
+// IvanCord end
+
 /**
  * Main BungeeCord proxy class.
  */
@@ -164,7 +173,9 @@ public class BungeeCord extends ProxyServer
             .registerTypeAdapter( Favicon.class, Favicon.getFaviconTypeAdapter() ).create();
     @Getter
     private ConnectionThrottle connectionThrottle;
+    /* IvanCord - remove module maanger
     private final ModuleManager moduleManager = new ModuleManager();
+     */
 
     {
         // TODO: Proper fallback when we interface the manager
@@ -222,6 +233,15 @@ public class BungeeCord extends ProxyServer
         getPluginManager().registerCommand( null, new CommandBungee() );
         getPluginManager().registerCommand( null, new CommandPerms() );
 
+        // IvanCord start - register module commands
+        getPluginManager().registerCommand( null, new CommandAlert() );
+        getPluginManager().registerCommand( null, new CommandAlertRaw() );
+        getPluginManager().registerCommand( null, new CommandFind() );
+        getPluginManager().registerCommand( null, new CommandList() );
+        getPluginManager().registerCommand( null, new CommandSend() );
+        getPluginManager().registerCommand( null, new CommandServer() );
+        // IvanCord end
+
         if ( !Boolean.getBoolean( "net.md_5.bungee.native.disable" ) )
         {
             if ( EncryptionUtil.nativeFactory.load() )
@@ -259,9 +279,11 @@ public class BungeeCord extends ProxyServer
         bossEventLoopGroup = PipelineUtils.newEventLoopGroup( 0, new ThreadFactoryBuilder().setNameFormat( "Netty Boss IO Thread #%1$d" ).build() );
         workerEventLoopGroup = PipelineUtils.newEventLoopGroup( 0, new ThreadFactoryBuilder().setNameFormat( "Netty Worker IO Thread #%1$d" ).build() );
 
+        /* IvanCord - remove modules
         File moduleDirectory = new File( "modules" );
         moduleManager.load( this, moduleDirectory );
         pluginManager.detectPlugins( moduleDirectory );
+         */
 
         pluginsFolder.mkdir();
         pluginManager.detectPlugins( pluginsFolder );
