From e9fb5123e32b10ead88b4fbb3ef91353e41487f0 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Fri, 14 Jun 2019 16:38:20 +0300
Subject: [PATCH] Add support for json configuration files


diff --git a/config/pom.xml b/config/pom.xml
index 32a005ff..d4f495bf 100644
--- a/config/pom.xml
+++ b/config/pom.xml
@@ -24,5 +24,12 @@
             <version>1.23</version>
             <scope>compile</scope>
         </dependency>
+        <!-- IvanCord - add gson -->
+        <dependency>
+            <groupId>com.google.code.gson</groupId>
+            <artifactId>gson</artifactId>
+            <version>2.8.0</version>
+            <scope>provided</scope>
+        </dependency>
     </dependencies>
 </project>
diff --git a/config/src/main/java/net/md_5/bungee/config/ConfigurationProvider.java b/config/src/main/java/net/md_5/bungee/config/ConfigurationProvider.java
index eece8870..d5c5420d 100644
--- a/config/src/main/java/net/md_5/bungee/config/ConfigurationProvider.java
+++ b/config/src/main/java/net/md_5/bungee/config/ConfigurationProvider.java
@@ -20,9 +20,29 @@ public abstract class ConfigurationProvider
 
     public static ConfigurationProvider getProvider(Class<? extends ConfigurationProvider> provider)
     {
+        // IvanCord start
+        if ( provider.isAssignableFrom( JsonConfiguration.class ) )
+        {
+            return getJsonConfigurationProvider( true );
+        }
+        // IvanCord end
         return providers.get( provider );
     }
 
+    // IvanCord start
+
+    /**
+     * Gets a json configuration provider.
+     *
+     * @param prettyPrinting should the typen json when saving be readable for humans, or no?
+     * @return json configuration provider
+     */
+    public static ConfigurationProvider getJsonConfigurationProvider(boolean prettyPrinting)
+    {
+        return new JsonConfiguration( prettyPrinting );
+    }
+    // IvanCord end
+
     /*------------------------------------------------------------------------*/
     public abstract void save(Configuration config, File file) throws IOException;
 
diff --git a/config/src/main/java/net/md_5/bungee/config/JsonConfiguration.java b/config/src/main/java/net/md_5/bungee/config/JsonConfiguration.java
new file mode 100644
index 00000000..69c1165a
--- /dev/null
+++ b/config/src/main/java/net/md_5/bungee/config/JsonConfiguration.java
@@ -0,0 +1,146 @@
+package net.md_5.bungee.config;
+// IvanCord start
+
+import java.io.File;
+import java.io.FileReader;
+import java.io.FileWriter;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.io.Writer;
+import java.util.LinkedHashMap;
+import java.util.Map;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.reflect.TypeToken;
+import com.google.gson.stream.JsonWriter;
+
+public class JsonConfiguration extends ConfigurationProvider
+{
+
+    private Gson gson;
+
+    public JsonConfiguration(boolean prettyPrinting)
+    {
+        if ( prettyPrinting )
+        {
+            gson = new GsonBuilder().setPrettyPrinting().create();
+        } else
+        {
+            gson = new Gson();
+        }
+    }
+
+    @Override
+    public void save(Configuration config, File file) throws IOException
+    {
+        try ( FileWriter writer = new FileWriter( file ) )
+        {
+            save( config, writer );
+        }
+    }
+
+    @Override
+    public void save(Configuration config, Writer writer)
+    {
+        try ( JsonWriter jsonWriter = gson.newJsonWriter( writer ) )
+        {
+            jsonWriter.beginObject();
+            for ( Map.Entry<String, Object> entry : config.self.entrySet() )
+            {
+                Object value = entry.getValue();
+                if ( value instanceof Boolean )
+                {
+                    jsonWriter.name( entry.getKey() ).value( (Boolean) value );
+                }
+                if ( value instanceof String )
+                {
+                    jsonWriter.name( entry.getKey() ).value( (String) value );
+                }
+                if ( value instanceof Number )
+                {
+                    jsonWriter.name( entry.getKey() ).value( (Number) value );
+                }
+            }
+            jsonWriter.endObject();
+        } catch ( IOException e )
+        {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public Configuration load(File file) throws IOException
+    {
+        return load( file, null );
+    }
+
+    @Override
+    public Configuration load(File file, Configuration defaults) throws IOException
+    {
+        try ( FileReader reader = new FileReader( file ) )
+        {
+            return load( reader, defaults );
+        }
+    }
+
+    @Override
+    public Configuration load(Reader reader)
+    {
+        return load( reader, null );
+    }
+
+    @Override
+    public Configuration load(Reader reader, Configuration defaults)
+    {
+        Map<String, Object> map = gson.fromJson( reader, new TypeToken<Map<String, Object>>(){}.getType() );
+        if ( map == null )
+        {
+            map = new LinkedHashMap<>();
+        }
+        return new Configuration( map, defaults );
+    }
+
+    @Override
+    public Configuration load(InputStream is)
+    {
+        return load( is, null );
+    }
+
+    @Override
+    public Configuration load(InputStream is, Configuration defaults)
+    {
+        try ( InputStreamReader reader = new InputStreamReader( is ) )
+        {
+            Map<String, Object> map = gson.fromJson( reader, new TypeToken<Map<String, Object>>(){}.getType() );
+            if ( map == null )
+            {
+                map = new LinkedHashMap<>();
+            }
+            return new Configuration( map, defaults );
+        } catch ( IOException e )
+        {
+            return new Configuration( new LinkedHashMap<>(), defaults );
+        }
+    }
+
+    @Override
+    public Configuration load(String string)
+    {
+        return load( string, null );
+    }
+
+    @Override
+    public Configuration load(String string, Configuration defaults)
+    {
+        Map<String, Object> map = gson.fromJson( string, new TypeToken<Map<String, Object>>(){}.getType() );
+        if ( map == null )
+        {
+            map = new LinkedHashMap<>();
+        }
+        return new Configuration( map, defaults );
+    }
+}
+// IvanCord end
\ No newline at end of file
-- 
2.21.0.windows.1

