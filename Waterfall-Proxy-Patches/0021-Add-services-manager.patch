From 8aba0703f46ec7211907145e30f96d1267626534 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Tue, 2 Jul 2019 16:31:36 +0300
Subject: [PATCH] Add services manager


diff --git a/api/src/main/java/com/github/mrivanplays/ivancord/api/event/ServiceRegisteredEvent.java b/api/src/main/java/com/github/mrivanplays/ivancord/api/event/ServiceRegisteredEvent.java
new file mode 100644
index 00000000..4a086874
--- /dev/null
+++ b/api/src/main/java/com/github/mrivanplays/ivancord/api/event/ServiceRegisteredEvent.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright 2019 Ivan Pekov (MrIvanPlays)
+
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in the
+ * Software without restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+ * The above copyright notice and this permission notice shall be included in all copies
+ * or substantial portions of the Software.
+
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
+package com.github.mrivanplays.ivancord.api.event;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import net.md_5.bungee.api.plugin.Event;
+
+import com.github.mrivanplays.ivancord.api.plugin.RegisteredServiceProvider;
+
+/**
+ * Event, called when a service have
+ * got registered
+ */
+@Getter
+@AllArgsConstructor
+public class ServiceRegisteredEvent extends Event
+{
+
+    /**
+     * The service provider registered
+     */
+    private RegisteredServiceProvider<?> serviceProvider;
+}
diff --git a/api/src/main/java/com/github/mrivanplays/ivancord/api/event/ServiceUnregisteredEvent.java b/api/src/main/java/com/github/mrivanplays/ivancord/api/event/ServiceUnregisteredEvent.java
new file mode 100644
index 00000000..c2578c96
--- /dev/null
+++ b/api/src/main/java/com/github/mrivanplays/ivancord/api/event/ServiceUnregisteredEvent.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright 2019 Ivan Pekov (MrIvanPlays)
+
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in the
+ * Software without restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+ * The above copyright notice and this permission notice shall be included in all copies
+ * or substantial portions of the Software.
+
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
+package com.github.mrivanplays.ivancord.api.event;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import net.md_5.bungee.api.plugin.Event;
+
+import com.github.mrivanplays.ivancord.api.plugin.RegisteredServiceProvider;
+
+/**
+ * Event, called when a service have
+ * got unregistered
+ */
+@Getter
+@AllArgsConstructor
+public class ServiceUnregisteredEvent extends Event
+{
+
+    /**
+     * The service provider unregistered
+     */
+    private RegisteredServiceProvider<?> serviceProvider;
+}
diff --git a/api/src/main/java/com/github/mrivanplays/ivancord/api/plugin/RegisteredServiceProvider.java b/api/src/main/java/com/github/mrivanplays/ivancord/api/plugin/RegisteredServiceProvider.java
new file mode 100644
index 00000000..d19d0372
--- /dev/null
+++ b/api/src/main/java/com/github/mrivanplays/ivancord/api/plugin/RegisteredServiceProvider.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright 2019 Ivan Pekov (MrIvanPlays)
+
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in the
+ * Software without restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+ * The above copyright notice and this permission notice shall be included in all copies
+ * or substantial portions of the Software.
+
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
+package com.github.mrivanplays.ivancord.api.plugin;
+
+import lombok.AllArgsConstructor;
+import lombok.EqualsAndHashCode;
+import lombok.Getter;
+import lombok.ToString;
+import net.md_5.bungee.api.plugin.Plugin;
+
+/**
+ * Represents a registered service provider
+ *
+ * @param <T> stored type
+ */
+@Getter
+@AllArgsConstructor
+@EqualsAndHashCode
+@ToString
+public class RegisteredServiceProvider<T>
+{
+
+    /**
+     * The plugin, who registered this provider
+     */
+    private Plugin plugin;
+
+    /**
+     * The service representing this provider
+     */
+    private Class<T> service;
+
+    /**
+     * The provider
+     */
+    private T provider;
+
+    /**
+     * Priority of the provider
+     */
+    private int priority;
+}
diff --git a/api/src/main/java/com/github/mrivanplays/ivancord/api/plugin/ServicePriority.java b/api/src/main/java/com/github/mrivanplays/ivancord/api/plugin/ServicePriority.java
new file mode 100644
index 00000000..cc2697f9
--- /dev/null
+++ b/api/src/main/java/com/github/mrivanplays/ivancord/api/plugin/ServicePriority.java
@@ -0,0 +1,43 @@
+/*
+ * Copyright 2019 Ivan Pekov (MrIvanPlays)
+ * Copyright 2019 contributors
+
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in the
+ * Software without restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+ * The above copyright notice and this permission notice shall be included in all copies
+ * or substantial portions of the Software.
+
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
+package com.github.mrivanplays.ivancord.api.plugin;
+
+/**
+ * Represents a service priority
+ */
+public class ServicePriority
+{
+
+    /**
+     * The service is of high importance
+     */
+    public static final int HIGH = -10;
+
+    /**
+     * The service is of normal importance
+     */
+    public static final int NORMAL = 1;
+
+    /**
+     * The service is of low importance
+     */
+    public static final int LOW = 10;
+}
diff --git a/api/src/main/java/com/github/mrivanplays/ivancord/api/plugin/ServicesManager.java b/api/src/main/java/com/github/mrivanplays/ivancord/api/plugin/ServicesManager.java
new file mode 100644
index 00000000..ed2863a7
--- /dev/null
+++ b/api/src/main/java/com/github/mrivanplays/ivancord/api/plugin/ServicesManager.java
@@ -0,0 +1,92 @@
+/*
+ * Copyright 2019 Ivan Pekov (MrIvanPlays)
+
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in the
+ * Software without restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+ * The above copyright notice and this permission notice shall be included in all copies
+ * or substantial portions of the Software.
+
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
+package com.github.mrivanplays.ivancord.api.plugin;
+
+import java.util.Collection;
+import java.util.Optional;
+
+import net.md_5.bungee.api.plugin.Plugin;
+
+/**
+ * Represents a manager of services, registered by plugins and probably used by
+ * other plugins
+ */
+public interface ServicesManager
+{
+
+    /**
+     * Registers a service and sorts it by the specified priority.
+     *
+     * @param plugin   plugin registerer
+     * @param service  service registered
+     * @param provider service instance
+     * @param priority priority of the service. should be a number of which: -10, 1 or 10
+     * @param <T>      type
+     */
+    <T> void register(Plugin plugin, Class<T> service, T provider, int priority);
+
+    /**
+     * Registers a service
+     *
+     * @param plugin   plugin registerer
+     * @param service  service registered
+     * @param provider service instance
+     * @param <T>      type
+     * @see #register(Plugin, Class, Object, int)
+     */
+    default <T> void register(Plugin plugin, Class<T> service, T provider)
+    {
+        register( plugin, service, provider, ServicePriority.NORMAL );
+    }
+
+    /**
+     * Unregisters a service
+     *
+     * @param plugin  plugin registerer of this service
+     * @param service service class
+     * @param <T>     type
+     */
+    <T> void unregister(Plugin plugin, Class<T> service);
+
+    /**
+     * Unregisters all services, registered by the specified plugin
+     *
+     * @param plugin the plugin you wish to unregister its services
+     */
+    void unregisterAll(Plugin plugin);
+
+    /**
+     * Gets registration for the specified service
+     *
+     * @param service service class
+     * @param <T>     type
+     * @return service provider if registered, otherwise empty optional
+     */
+    <T> Optional<RegisteredServiceProvider<T>> getRegistration(Class<T> service);
+
+    /**
+     * Returns a sorted by priority collection of all registered services by the
+     * specified plugin.
+     *
+     * @param plugin the plugin you wish to get the registrations of
+     * @return collection with the services, or empty collection if no services registered
+     */
+    Collection<RegisteredServiceProvider<?>> getRegistrations(Plugin plugin);
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
index d44ac67e..c797ec9e 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
@@ -16,6 +16,8 @@ import net.md_5.bungee.api.plugin.Plugin;
 import net.md_5.bungee.api.plugin.PluginManager;
 import net.md_5.bungee.api.scheduler.TaskScheduler;
 
+import com.github.mrivanplays.ivancord.api.plugin.ServicesManager;
+
 public abstract class ProxyServer
 {
 
@@ -315,4 +317,15 @@ public abstract class ProxyServer
      */
     public abstract Title createTitle();
 
+    // IvanCord start
+
+    /**
+     * Gets the services manager
+     *
+     * @return services manager
+     */
+    public abstract ServicesManager getServicesManager();
+
+    // IvanCord end
+
 }
diff --git a/proxy/src/main/java/com/github/mrivanplays/ivancord/EntryImpl.java b/proxy/src/main/java/com/github/mrivanplays/ivancord/EntryImpl.java
new file mode 100644
index 00000000..9955b63c
--- /dev/null
+++ b/proxy/src/main/java/com/github/mrivanplays/ivancord/EntryImpl.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright 2019 Ivan Pekov (MrIvanPlays)
+ * Copyright 2019 contributors
+
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in the
+ * Software without restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+ * The above copyright notice and this permission notice shall be included in all copies
+ * or substantial portions of the Software.
+
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
+package com.github.mrivanplays.ivancord;
+
+import java.util.Map;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+
+@Getter
+@AllArgsConstructor
+public class EntryImpl<K, V> implements Map.Entry<K, V>
+{
+
+    private K key;
+    private V value;
+
+    @Override
+    public V setValue(V value)
+    {
+        this.value = value;
+        return value;
+    }
+}
diff --git a/proxy/src/main/java/com/github/mrivanplays/ivancord/SimpleServicesManager.java b/proxy/src/main/java/com/github/mrivanplays/ivancord/SimpleServicesManager.java
new file mode 100644
index 00000000..f6ef586c
--- /dev/null
+++ b/proxy/src/main/java/com/github/mrivanplays/ivancord/SimpleServicesManager.java
@@ -0,0 +1,197 @@
+/*
+ * Copyright 2019 Ivan Pekov (MrIvanPlays)
+
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in the
+ * Software without restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+ * The above copyright notice and this permission notice shall be included in all copies
+ * or substantial portions of the Software.
+
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
+package com.github.mrivanplays.ivancord;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Optional;
+import java.util.Set;
+import java.util.TreeSet;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
+import java.util.stream.Collectors;
+
+import com.google.common.base.Preconditions;
+import net.md_5.bungee.api.plugin.Plugin;
+
+import com.github.mrivanplays.ivancord.api.event.ServiceRegisteredEvent;
+import com.github.mrivanplays.ivancord.api.event.ServiceUnregisteredEvent;
+import com.github.mrivanplays.ivancord.api.plugin.RegisteredServiceProvider;
+import com.github.mrivanplays.ivancord.api.plugin.ServicesManager;
+
+public class SimpleServicesManager implements ServicesManager
+{
+
+    private final Map<Class<?>, Set<RegisteredServiceProvider<?>>> providers = new ConcurrentHashMap<>();
+    private final Lock providersLock = new ReentrantLock();
+    private final Comparator<RegisteredServiceProvider<?>> COMPARATOR = Comparator.comparingInt( RegisteredServiceProvider::getPriority );
+
+    @Override
+    public <T> void register(Plugin plugin, Class<T> service, T provider, int priority)
+    {
+        Preconditions.checkArgument( priority == -10 || priority == 1 || priority == 10, "Priority should be -10, 1 or 10" );
+        RegisteredServiceProvider<T> createdProvider = new RegisteredServiceProvider<>( plugin, service, provider, priority );
+        providersLock.lock();
+        try
+        {
+            if ( providers.containsKey( service ) )
+            {
+                Set<RegisteredServiceProvider<?>> registered = providers.get( service );
+                registered.add( createdProvider );
+                providers.replace( service, registered );
+            } else
+            {
+                Set<RegisteredServiceProvider<?>> registered = new TreeSet<>( COMPARATOR );
+                registered.add( createdProvider );
+                providers.put( service, registered );
+            }
+        } finally
+        {
+            providersLock.unlock();
+        }
+        new ServiceRegisteredEvent( createdProvider ).call();
+    }
+
+    @Override
+    public <T> void unregister(Plugin plugin, Class<T> service)
+    {
+        providersLock.lock();
+        try
+        {
+            if ( !providers.containsKey( service ) )
+            {
+                // no providers found for this service, stopping code
+                return;
+            }
+            Set<RegisteredServiceProvider<?>> registered = providers.get( service );
+            Collection<RegisteredServiceProvider<?>> toRemove = new TreeSet<>();
+            for ( RegisteredServiceProvider<?> provider : registered )
+            {
+                if ( provider.getPlugin().getDescription().equals( plugin.getDescription() ) )
+                {
+                    toRemove.add( provider );
+                }
+            }
+            for ( RegisteredServiceProvider<?> providerRemoved : toRemove )
+            {
+                registered.remove( providerRemoved );
+                new ServiceUnregisteredEvent( providerRemoved ).call();
+            }
+            providers.replace( service, registered );
+            toRemove.clear();
+        } finally
+        {
+            providersLock.unlock();
+        }
+    }
+
+    @Override
+    public void unregisterAll(Plugin plugin)
+    {
+        providersLock.lock();
+        try
+        {
+            Set<Map.Entry<Class<?>, RegisteredServiceProvider<?>>> toRemove = new TreeSet<>();
+            for ( Map.Entry<Class<?>, Set<RegisteredServiceProvider<?>>> entry : providers.entrySet() )
+            {
+                if ( entry.getValue().parallelStream().anyMatch( provider -> provider.getPlugin().getDescription().equals( plugin.getDescription() ) ) )
+                {
+                    Set<RegisteredServiceProvider<?>> filtered = entry.getValue().parallelStream()
+                            .filter( provider -> provider.getPlugin().getDescription().equals( plugin.getDescription() ) )
+                            .collect( Collectors.toSet() );
+                    try
+                    {
+                        for ( RegisteredServiceProvider<?> provider : filtered )
+                        {
+                            toRemove.add( new EntryImpl<>( provider.getService(), provider ) );
+                        }
+                    } finally
+                    {
+                        filtered.clear();
+                    }
+                }
+            }
+            for ( Map.Entry<Class<?>, RegisteredServiceProvider<?>> entryToRemove : toRemove )
+            {
+                Set<RegisteredServiceProvider<?>> registered = providers.get( entryToRemove.getKey() );
+                registered.remove( entryToRemove.getValue() );
+                providers.replace( entryToRemove.getKey(), registered );
+                new ServiceUnregisteredEvent( entryToRemove.getValue() ).call();
+            }
+            toRemove.clear();
+        } finally
+        {
+            providersLock.unlock();
+        }
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public <T> Optional<RegisteredServiceProvider<T>> getRegistration(Class<T> service)
+    {
+        providersLock.lock();
+        try
+        {
+            List<RegisteredServiceProvider<?>> registered = new ArrayList<>( providers.get( service ) );
+            registered.sort( COMPARATOR );
+            if ( registered.isEmpty() )
+            {
+                return Optional.empty();
+            } else
+            {
+                return Optional.of( (RegisteredServiceProvider<T>) registered.get( 0 ) );
+            }
+        } finally
+        {
+            providersLock.unlock();
+        }
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public Collection<RegisteredServiceProvider<?>> getRegistrations(Plugin plugin)
+    {
+        Set<RegisteredServiceProvider<?>> collection = new TreeSet<>( COMPARATOR );
+        providersLock.lock();
+        try
+        {
+            for ( Map.Entry<Class<?>, Set<RegisteredServiceProvider<?>>> entry : providers.entrySet() )
+            {
+                if ( entry.getValue().parallelStream().anyMatch( provider -> provider.getPlugin().getDescription().equals( plugin.getDescription() ) ) )
+                {
+                    Set<RegisteredServiceProvider<?>> filtered = entry.getValue().parallelStream()
+                            .filter( provider -> provider.getPlugin().getDescription().equals( plugin.getDescription() ) )
+                            .collect( Collectors.toSet() );
+                    collection.addAll( filtered );
+                }
+            }
+        } finally
+        {
+            providersLock.unlock();
+        }
+        return Collections.unmodifiableCollection( collection );
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 7d58aa35..11d09a50 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -92,6 +92,8 @@ import net.md_5.bungee.util.CaseInsensitiveMap;
 
 import com.github.mrivanplays.ivancord.JsonReconnectHandler;
 import com.github.mrivanplays.ivancord.ReconnectHandlerType;
+import com.github.mrivanplays.ivancord.SimpleServicesManager;
+import com.github.mrivanplays.ivancord.api.plugin.ServicesManager;
 import com.github.mrivanplays.ivancord.commands.CommandPlugins;
 import com.github.mrivanplays.ivancord.commands.op.CommandDeop;
 import com.github.mrivanplays.ivancord.commands.op.CommandOp;
@@ -185,6 +187,11 @@ public class BungeeCord extends ProxyServer
     private final ModuleManager moduleManager = new ModuleManager();
      */
 
+    // IvanCord start
+    @Getter
+    private ServicesManager servicesManager;
+    // IvanCord end
+
     {
         // TODO: Proper fallback when we interface the manager
         registerChannel( "BungeeCord" );
@@ -302,6 +309,10 @@ public class BungeeCord extends ProxyServer
         pluginsFolder.mkdir();
         pluginManager.detectPlugins( pluginsFolder );
 
+        // IvanCord start
+        servicesManager = new SimpleServicesManager();
+        // IvanCord end
+
         pluginManager.loadPlugins();
         config.load();
 
-- 
2.22.0.windows.1

