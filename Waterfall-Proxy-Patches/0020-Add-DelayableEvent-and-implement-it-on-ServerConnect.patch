From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Mon, 8 Jul 2019 16:54:00 +0300
Subject: [PATCH] Add DelayableEvent and implement it on ServerConnectEvent


diff --git a/api/src/main/java/com/mrivanplays/ivancord/api/event/DelayableEvent.java b/api/src/main/java/com/mrivanplays/ivancord/api/event/DelayableEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..43747a43f2e6d49d0bebce85ebb52a668530aa96
--- /dev/null
+++ b/api/src/main/java/com/mrivanplays/ivancord/api/event/DelayableEvent.java
@@ -0,0 +1,87 @@
+package com.mrivanplays.ivancord.api.event;
+
+import java.util.HashSet;
+import java.util.Set;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.function.Consumer;
+
+import com.google.common.base.Preconditions;
+import com.google.common.util.concurrent.ThreadFactoryBuilder;
+import lombok.EqualsAndHashCode;
+import lombok.ToString;
+import net.md_5.bungee.api.Callback;
+import net.md_5.bungee.api.plugin.Event;
+
+/**
+ * Represents a event that allows listeners
+ * to perform certain actions asynchronously
+ * after the specified event was called
+ */
+@ToString(callSuper = true)
+@EqualsAndHashCode(callSuper = true)
+public abstract class DelayableEvent<T> extends Event
+{
+
+    private static final ExecutorService DELAYABLE_EXECUTOR = Executors.newCachedThreadPool(
+            new ThreadFactoryBuilder()
+                    .setDaemon( true )
+                    .setNameFormat( "Delayables executor - #%d" )
+                    .build()
+    );
+
+    private Set<Consumer<T>> tasks;
+    private AtomicBoolean fired;
+
+    private final Callback<T> callback;
+
+    public DelayableEvent(Callback<T> callback)
+    {
+        this.callback = callback;
+        this.tasks = new HashSet<>();
+        this.fired = new AtomicBoolean( false );
+    }
+
+    /**
+     * Adds a task to run for this event
+     *
+     * @param task task
+     */
+    public void addTask(Consumer<T> task)
+    {
+        Preconditions.checkState( !fired.get(), "Event %s already fired", toString() );
+        tasks.add( Preconditions.checkNotNull( task ) );
+    }
+
+    @Override
+    public void postCall()
+    {
+        if ( !fired.compareAndSet( false, true ) )
+        {
+            return;
+        }
+
+        if ( !tasks.isEmpty() )
+        {
+            DELAYABLE_EXECUTOR.execute( () ->
+            {
+                for ( Consumer<T> consumer : tasks )
+                {
+                    try
+                    {
+                        consumer.accept( (T) this );
+                    } catch ( Throwable t )
+                    {
+                        callback.done( null, t );
+                    }
+                }
+            } );
+
+            callback.done( (T) this, null );
+        } else
+        {
+            callback.done( (T) this, null );
+        }
+    }
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/event/ServerConnectEvent.java b/api/src/main/java/net/md_5/bungee/api/event/ServerConnectEvent.java
index 9be3b8fb524f256ccf5fadf127c249656996acef..42f96b5ea22f771b5e881fd36bf304ea9da0eddc 100644
--- a/api/src/main/java/net/md_5/bungee/api/event/ServerConnectEvent.java
+++ b/api/src/main/java/net/md_5/bungee/api/event/ServerConnectEvent.java
@@ -5,10 +5,15 @@ import lombok.EqualsAndHashCode;
 import lombok.NonNull;
 import lombok.ToString;
 import net.md_5.bungee.api.ServerConnectRequest;
+import net.md_5.bungee.api.Callback; // IvanCord
 import net.md_5.bungee.api.config.ServerInfo;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.api.plugin.Cancellable;
+/* IvanCord start
 import net.md_5.bungee.api.plugin.Event;
+ */
+import com.mrivanplays.ivancord.api.event.DelayableEvent;
+// IvanCord end
 
 /**
  * Called when deciding to connect to a server. At the time when this event is
@@ -19,7 +24,7 @@ import net.md_5.bungee.api.plugin.Event;
 @Data
 @ToString(callSuper = false)
 @EqualsAndHashCode(callSuper = false)
-public class ServerConnectEvent extends Event implements Cancellable
+public class ServerConnectEvent extends DelayableEvent<ServerConnectEvent> implements Cancellable // IvanCord - delayable event
 {
 
     /**
@@ -44,20 +49,19 @@ public class ServerConnectEvent extends Event implements Cancellable
      */
     private boolean cancelled;
 
-    @Deprecated
-    public ServerConnectEvent(ProxiedPlayer player, ServerInfo target)
-    {
-        this( player, target, Reason.UNKNOWN );
-    }
-
+    // IvanCord start
+    /*
     @Deprecated
     public ServerConnectEvent(ProxiedPlayer player, ServerInfo target, Reason reason)
     {
-        this( player, target, reason, null );
+        this( player, target, Reason.UNKNOWN );
     }
+     */
 
-    public ServerConnectEvent(ProxiedPlayer player, ServerInfo target, Reason reason, ServerConnectRequest request)
+    public ServerConnectEvent(ProxiedPlayer player, ServerInfo target, Reason reason, ServerConnectRequest request, Callback<ServerConnectEvent> callback)
     {
+        super( callback );
+        // IvanCord end
         this.player = player;
         this.target = target;
         this.reason = reason;
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index e2f6c8d5098b41217e8e78b9da5524f74529c9b9..a0e677094911ff9457239ca9fe511d13645c3d09 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -329,8 +329,11 @@ public final class UserConnection implements ProxiedPlayer
         Preconditions.checkNotNull( request, "request" );
 
         final Callback<ServerConnectRequest.Result> callback = request.getCallback();
+        /* // IvanCord
         ServerConnectEvent event = new ServerConnectEvent( this, request.getTarget(), request.getReason(), request );
-        if ( bungee.getPluginManager().callEvent( event ).isCancelled() )
+         */ // IvanCord
+        Callback<ServerConnectEvent> callCallback = (result, error) -> { // IvanCord
+        if ( result.isCancelled() ) // IvanCord
         {
             if ( callback != null )
             {
@@ -344,7 +347,7 @@ public final class UserConnection implements ProxiedPlayer
             return;
         }
 
-        final BungeeServerInfo target = (BungeeServerInfo) event.getTarget(); // Update in case the event changed target
+        final BungeeServerInfo target = (BungeeServerInfo) result.getTarget(); // Update in case the event changed target // IvanCord - changed
 
         if ( getServer() != null && Objects.equals( getServer().getInfo(), target ) )
         {
@@ -423,6 +426,8 @@ public final class UserConnection implements ProxiedPlayer
             b.localAddress( getPendingConnection().getListener().getHost().getHostString(), 0 );
         }
         b.connect().addListener( listener );
+        }; // IvanCord
+        bungee.getPluginManager().callEvent( new ServerConnectEvent( this, request.getTarget(), request.getReason(), request, callCallback ) ); // IvanCord
     }
 
     @Override
