From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Thu, 13 Jun 2019 19:20:09 +0300
Subject: [PATCH] Add TCP fast open


diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
index b913d0d2b3f48ca8357f45d15720c4d0c1fa53ec..151e4e97773d87d2b73e727f635e7140fc1a6a69 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
@@ -285,5 +285,19 @@ public interface ProxyConfig
      * @return should the player kicked be transferred to lobby
      */
     boolean isKickToLobby();
+
+    /**
+     * Returns whenever the TCP fast open mode is enabled.
+     *
+     * @return is tcp fast open mode enabled
+     */
+    boolean isTCPFastOpenEnabled();
+
+    /**
+     * Gets the TCP fast open mode
+     *
+     * @return tcp fast open mode
+     */
+    int getTCPFastOpenMode();
     // IvanCord end
 }
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/conf/IvanCordConfiguration.java b/proxy/src/main/java/com/mrivanplays/ivancord/conf/IvanCordConfiguration.java
index 238bc3c1f43aa5bd6de34f4355ede2dee818fef3..077dbc9f5ba7375a3ecd9607c515ed72d3e87874 100644
--- a/proxy/src/main/java/com/mrivanplays/ivancord/conf/IvanCordConfiguration.java
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/conf/IvanCordConfiguration.java
@@ -1,10 +1,13 @@
 package com.mrivanplays.ivancord.conf;
 
 import java.io.File;
-
+import java.util.logging.Level;
 import io.github.waterfallmc.waterfall.conf.WaterfallConfiguration;
 import lombok.Getter;
+import lombok.experimental.Accessors;
+import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.conf.YamlConfig;
+import com.mrivanplays.ivancord.tcpfastopen.TCPFastOpenMode;
 
 @Getter
 public class IvanCordConfiguration extends WaterfallConfiguration
@@ -12,6 +15,11 @@ public class IvanCordConfiguration extends WaterfallConfiguration
 
     private boolean kickToLobby = true;
 
+    @Accessors(fluent = true)
+    private boolean isTCPFastOpenEnabled = true;
+    @Accessors(fluent = true)
+    private int getTCPFastOpenMode = TCPFastOpenMode.CLIENT_ONLY.getValue();
+
     @Override
     public void load()
     {
@@ -19,5 +27,14 @@ public class IvanCordConfiguration extends WaterfallConfiguration
         YamlConfig config = new YamlConfig( new File( "ivancord.yml" ) );
         config.load( false );
         kickToLobby = config.getBoolean( "kick_to_lobby", kickToLobby );
+        isTCPFastOpenEnabled = config.getBoolean( "tcp_fast_open_enabled", isTCPFastOpenEnabled );
+        getTCPFastOpenMode = setupTFO( config.getInt( "tcp_fast_open_mode", getTCPFastOpenMode ) );
+    }
+
+    private int setupTFO(int incoming)
+    {
+        TCPFastOpenMode actual = TCPFastOpenMode.fromValue( incoming );
+        ProxyServer.getInstance().getLogger().log( Level.INFO, "TCP fast open mode is set to {0}", actual.name() );
+        return actual.getValue();
     }
 }
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/tcpfastopen/TCPFastOpenMode.java b/proxy/src/main/java/com/mrivanplays/ivancord/tcpfastopen/TCPFastOpenMode.java
new file mode 100644
index 0000000000000000000000000000000000000000..ffa0e1f58e1750bbc3d2332a2c2ebaa781b7cd1a
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/tcpfastopen/TCPFastOpenMode.java
@@ -0,0 +1,27 @@
+package com.mrivanplays.ivancord.tcpfastopen;
+
+import java.util.Arrays;
+
+import lombok.Getter;
+
+public enum TCPFastOpenMode
+{
+    DISABLED( 0 ),
+    CLIENT_ONLY( 1 ),
+    SERVER_ONLY( 2 ),
+    BOTH( 3 )
+    ;
+
+    @Getter
+    private int value;
+
+    TCPFastOpenMode(int value)
+    {
+        this.value = value;
+    }
+
+    public static TCPFastOpenMode fromValue(int value)
+    {
+        return Arrays.stream( values() ).filter( a -> a.getValue() == value ).findFirst().orElse( DISABLED );
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index 3163ea3a5b956a04b5ad8709200465991707a66a..8ee81218411de824cf78255c5ccb3390bb5b70c7 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -12,6 +12,7 @@ import io.netty.channel.EventLoopGroup;
 import io.netty.channel.ServerChannel;
 import io.netty.channel.WriteBufferWaterMark;
 import io.netty.channel.epoll.Epoll;
+import io.netty.channel.epoll.EpollChannelOption; // IvanCord
 import io.netty.channel.epoll.EpollDatagramChannel;
 import io.netty.channel.epoll.EpollDomainSocketChannel;
 import io.netty.channel.epoll.EpollEventLoopGroup;
@@ -88,6 +89,13 @@ public class PipelineUtils
                 ch.close();
                 return;
             }
+            // IvanCord start - TCP fast open
+            int configValue = ProxyServer.getInstance().getConfig().getTCPFastOpenMode();
+            if ( epoll && ProxyServer.getInstance().getConfig().isTCPFastOpenEnabled() )
+            {
+                ch.config().setOption( EpollChannelOption.TCP_FASTOPEN, configValue );
+            }
+            // IvanCord end
             ch.pipeline().addBefore( FRAME_DECODER, LEGACY_DECODER, new LegacyDecoder() );
             ch.pipeline().addAfter( FRAME_DECODER, PACKET_DECODER, new MinecraftDecoder( Protocol.HANDSHAKE, true, ProxyServer.getInstance().getProtocolVersion() ) );
             ch.pipeline().addAfter( FRAME_PREPENDER, PACKET_ENCODER, new MinecraftEncoder( Protocol.HANDSHAKE, true, ProxyServer.getInstance().getProtocolVersion() ) );
