From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Wed, 21 Aug 2019 21:21:33 +0300
Subject: [PATCH] Add OfflinePlayer concept


diff --git a/api/src/main/java/com/mrivanplays/ivancord/api/connection/OfflinePlayer.java b/api/src/main/java/com/mrivanplays/ivancord/api/connection/OfflinePlayer.java
new file mode 100644
index 0000000000000000000000000000000000000000..3a0afe137062596b7a3d3903a5a2594d1f1253b9
--- /dev/null
+++ b/api/src/main/java/com/mrivanplays/ivancord/api/connection/OfflinePlayer.java
@@ -0,0 +1,54 @@
+package com.mrivanplays.ivancord.api.connection;
+
+import java.util.Optional;
+import java.util.UUID;
+
+import net.md_5.bungee.api.config.ServerInfo;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+
+/**
+ * Represents a player, which is probably offline.
+ */
+public interface OfflinePlayer
+{
+
+    /**
+     * Returns the name of the player. This might be null if the player was
+     * just created and the mojang servers were down. The name could change
+     * at any time and its not a key authentication for a player and its
+     * encouraged to use {@link #getUniqueId()} for a key authentication
+     *
+     * @return name of the offline player or null
+     */
+    String getName();
+
+    /**
+     * Returns the unique id of the player. This might be null if the player
+     * was just created and the mojang servers were down.
+     *
+     * @return unique id
+     */
+    UUID getUniqueId();
+
+    /**
+     * Returns whenever this player has played before.
+     *
+     * @return <code>true</code> if played, <code>false</code> otherwise
+     */
+    boolean hasPlayedBefore();
+
+    /**
+     * Gets the specified offline player as a online player. The optional
+     * will be empty if the player is not online.
+     *
+     * @return optional of player
+     */
+    Optional<ProxiedPlayer> getPlayer();
+
+    /**
+     * Returns the last known server where the player was.
+     *
+     * @return optional of the last known server of the player
+     */
+    Optional<ServerInfo> getLastServer();
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
index e52b8f201d68db7806809be7711624c1a636d2f1..3619ff12e483f60e5610c611a30401bf4c480adc 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
@@ -9,6 +9,7 @@ import java.util.Map;
 import java.util.UUID;
 import java.util.function.BiConsumer; // IvanCord
 import java.util.logging.Logger;
+import com.mrivanplays.ivancord.api.connection.OfflinePlayer; // IvanCord
 import lombok.Getter;
 import net.md_5.bungee.api.chat.BaseComponent;
 import net.md_5.bungee.api.config.ConfigurationAdapter;
@@ -363,6 +364,31 @@ public abstract class ProxyServer
      */
     public abstract void registerOutboundPacketListener(Plugin plugin, BiConsumer<DefinedPacket, PacketDirection> packetListener);
 
+    /**
+     * Returns a {@link OfflinePlayer}, specified by his name. This method
+     * will never return null
+     *
+     * @param name the name of the player you want to get
+     * @return offline player
+     */
+    public abstract OfflinePlayer getOfflinePlayer(String name);
+
+    /**
+     * Returns a {@link OfflinePlayer}, specified by his unique id. This
+     * will never return null
+     *
+     * @param uuid the unique id of the player you want to get
+     * @return offline player
+     */
+    public abstract OfflinePlayer getOfflinePlayer(UUID uuid);
+
+    /**
+     * Returns a immutable copy of all known players, that are currently offline.
+     *
+     * @return offline players
+     */
+    public abstract Collection<OfflinePlayer> getOfflinePlayers();
+
     // IvanCord end
 
 }
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/DataFetcher.java b/proxy/src/main/java/com/mrivanplays/ivancord/DataFetcher.java
new file mode 100644
index 0000000000000000000000000000000000000000..ffc705d8642fcb2905573ed6b52a1047a91f6e8a
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/DataFetcher.java
@@ -0,0 +1,109 @@
+package com.mrivanplays.ivancord;
+
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.util.Optional;
+import java.util.UUID;
+import java.util.concurrent.CompletableFuture;
+
+import com.google.gson.JsonArray;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
+import io.github.waterfallmc.waterfall.utils.UUIDUtils;
+import lombok.Getter;
+import net.md_5.bungee.Util;
+
+public class DataFetcher
+{
+
+    private String playerName;
+    private UUID uuid;
+
+    public static DataFetcher create(String playerName)
+    {
+        return new DataFetcher( playerName );
+    }
+
+    public static DataFetcher create(UUID uuid)
+    {
+        return new DataFetcher( uuid );
+    }
+
+    private DataFetcher(String playerName)
+    {
+        this.playerName = playerName;
+        this.uuid = null;
+    }
+
+    private DataFetcher(UUID uuid)
+    {
+        this.uuid = uuid;
+        this.playerName = null;
+    }
+
+    public CompletableFuture<Callback> retrieve()
+    {
+        return CompletableFuture.supplyAsync( () ->
+        {
+            // UUID retrieve: https://api.mojang.com/users/profiles/minecraft/NAME
+            // Name retrieve: https://api.mojang.com/user/profiles/UNDASHED_UUID/names array.get( array.size() - 1 )
+            if ( playerName != null )
+            {
+                try
+                {
+                    URL url = new URL( "https://api.mojang.com/users/profiles/minecraft/" + playerName );
+                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+                    connection.setRequestMethod( "GET" );
+                    connection.addRequestProperty( "User-Agent", "IvanCord-UUID-Fetcher" );
+
+                    InputStreamReader inputStream = new InputStreamReader( connection.getInputStream() );
+                    JsonElement element = new JsonParser().parse( inputStream );
+                    inputStream.close();
+
+                    JsonObject object = element.getAsJsonObject();
+                    return new Callback( playerName, Util.getUUID( object.get( "id" ).getAsString() ) );
+                } catch ( IOException e )
+                {
+                    return new Callback( null, null );
+                }
+            } else
+            {
+                try
+                {
+                    URL url = new URL( "https://api.mojang.com/user/profiles/" + UUIDUtils.undash( uuid.toString() ) + "/names" );
+                    HttpURLConnection connection = (HttpURLConnection) url.openConnection();
+                    connection.setRequestMethod( "GET" );
+                    connection.addRequestProperty( "User-Agent", "IvanCord-UUID-Fetcher" );
+
+                    InputStreamReader inputStream = new InputStreamReader( connection.getInputStream() );
+                    JsonArray array = new JsonParser().parse( inputStream ).getAsJsonArray();
+                    inputStream.close();
+
+                    JsonObject nameObject = array.get( array.size() - 1 ).getAsJsonObject();
+                    return new Callback( nameObject.get( "name" ).getAsString(), uuid );
+                } catch ( IOException e )
+                {
+                    return new Callback( null, null );
+                }
+            }
+        } );
+    }
+
+    @Getter
+    public static class Callback
+    {
+
+        private Optional<UUID> uuid;
+        private Optional<String> name;
+
+        public Callback(String name, UUID uuid)
+        {
+            this.name = Optional.ofNullable( name );
+            this.uuid = Optional.ofNullable( uuid );
+        }
+    }
+
+}
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/connection/BungeeOfflinePlayer.java b/proxy/src/main/java/com/mrivanplays/ivancord/connection/BungeeOfflinePlayer.java
new file mode 100644
index 0000000000000000000000000000000000000000..4b91e441d89e36f05a6094304857745451c392b8
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/connection/BungeeOfflinePlayer.java
@@ -0,0 +1,44 @@
+package com.mrivanplays.ivancord.connection;
+
+import java.util.Optional;
+import java.util.UUID;
+
+import com.mrivanplays.ivancord.api.connection.OfflinePlayer;
+import lombok.AllArgsConstructor;
+import lombok.EqualsAndHashCode;
+import lombok.Getter;
+import lombok.ToString;
+import lombok.experimental.Accessors;
+import net.md_5.bungee.BungeeCord;
+import net.md_5.bungee.api.config.ServerInfo;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+
+@Getter
+@ToString
+@EqualsAndHashCode
+@AllArgsConstructor
+public class BungeeOfflinePlayer implements OfflinePlayer
+{
+
+    private String name;
+    private UUID uniqueId;
+    @Accessors(fluent = true)
+    private boolean hasPlayedBefore;
+    private ServerInfo lastKnownServer;
+
+    @Override
+    public Optional<ProxiedPlayer> getPlayer()
+    {
+        return Optional.ofNullable( BungeeCord.getInstance().getPlayer( uniqueId ) );
+    }
+
+    @Override
+    public Optional<ServerInfo> getLastServer()
+    {
+        if ( getPlayer().isPresent() )
+        {
+            return Optional.of( getPlayer().get().getServer().getInfo() );
+        }
+        return Optional.ofNullable( lastKnownServer );
+    }
+}
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/connection/Playerdata.java b/proxy/src/main/java/com/mrivanplays/ivancord/connection/Playerdata.java
new file mode 100644
index 0000000000000000000000000000000000000000..6326bed99c7f5578e79a0f89ba5ea535bb402a22
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/connection/Playerdata.java
@@ -0,0 +1,203 @@
+package com.mrivanplays.ivancord.connection;
+
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.OutputStreamWriter;
+import java.io.Reader;
+import java.io.Writer;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+import java.util.Optional;
+import java.util.UUID;
+import java.util.stream.Collectors;
+
+import com.google.common.collect.ImmutableList;
+import com.google.gson.Gson;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.mrivanplays.ivancord.DataFetcher;
+import com.mrivanplays.ivancord.api.connection.OfflinePlayer;
+import net.md_5.bungee.BungeeCord;
+import net.md_5.bungee.api.config.ServerInfo;
+
+public class Playerdata
+{
+
+    private File file;
+    private Gson gson;
+
+    public Playerdata()
+    {
+        this.file = new File( "playerdata.json" );
+        createFile();
+        gson = new Gson();
+    }
+
+    public Collection<OfflinePlayer> getOfflinePlayers()
+    {
+        return ImmutableList.copyOf( deserialize().parallelStream()
+                .filter( player -> !player.getPlayer().isPresent() )
+                .collect( Collectors.toList() ) );
+    }
+
+    public void createOrModify(String name, UUID uuid, ServerInfo lastServer)
+    {
+        Optional<OfflinePlayer> search = deserialize()
+                .parallelStream()
+                .filter( player -> player.getUniqueId().equals( uuid ) )
+                .findFirst();
+        if ( search.isPresent() )
+        {
+            OfflinePlayer player = search.get();
+            List<OfflinePlayer> known = new ArrayList<>( deserialize() );
+            known.remove( player );
+            OfflinePlayer modifiedObject = new BungeeOfflinePlayer( name, uuid, true, lastServer );
+            known.add( modifiedObject );
+            serialize( known );
+        } else
+        {
+            OfflinePlayer player = new BungeeOfflinePlayer( name, uuid, true, lastServer );
+            List<OfflinePlayer> known = new ArrayList<>( deserialize() );
+            known.add( player );
+            serialize( known );
+        }
+        System.gc();
+    }
+
+    public OfflinePlayer getOfflinePlayer(String name)
+    {
+        Optional<OfflinePlayer> search = deserialize()
+                .parallelStream()
+                .filter( player -> player.getName() != null && player.getName().equalsIgnoreCase( name ) )
+                .findFirst();
+        if ( search.isPresent() )
+        {
+            return search.get();
+        } else
+        {
+            DataFetcher dataFetcher = DataFetcher.create( name );
+            DataFetcher.Callback callback = dataFetcher.retrieve().join();
+            OfflinePlayer player;
+            if ( !callback.getUuid().isPresent() )
+            {
+                player = new BungeeOfflinePlayer( name, null, false, null );
+            } else
+            {
+                player = new BungeeOfflinePlayer( name, callback.getUuid().get(), false, null );
+            }
+            List<OfflinePlayer> known = new ArrayList<>( deserialize() );
+            known.add( player );
+            serialize( known );
+            return player;
+        }
+    }
+
+    public OfflinePlayer getOfflinePlayer(UUID uuid)
+    {
+        Optional<OfflinePlayer> search = deserialize()
+                .parallelStream()
+                .filter( player -> player.getUniqueId().equals( uuid ) )
+                .findFirst();
+        if ( search.isPresent() )
+        {
+            return search.get();
+        } else
+        {
+            DataFetcher dataFetcher = DataFetcher.create( uuid );
+            DataFetcher.Callback callback = dataFetcher.retrieve().join();
+            OfflinePlayer player;
+            if ( !callback.getName().isPresent() )
+            {
+                player = new BungeeOfflinePlayer( null, uuid, false, null );
+            } else
+            {
+                player = new BungeeOfflinePlayer( callback.getName().get(), uuid, false, null );
+            }
+            List<OfflinePlayer> known = new ArrayList<>( deserialize() );
+            known.add( player );
+            serialize( known );
+            return player;
+        }
+    }
+
+    private void serialize(List<OfflinePlayer> players)
+    {
+        file.delete();
+        createFile();
+        try ( Writer writer = new OutputStreamWriter( new FileOutputStream( file ) ) )
+        {
+            JsonArray array = new JsonArray();
+            for ( OfflinePlayer player : players )
+            {
+                JsonObject object = new JsonObject();
+                if ( player.getName() != null )
+                {
+                    object.addProperty( "name", player.getName() );
+                }
+                object.addProperty( "uuid", player.getUniqueId().toString() );
+                if ( player.getLastServer().isPresent() )
+                {
+                    object.addProperty( "lastKnownServer", player.getLastServer().get().getName() );
+                }
+                array.add( object );
+            }
+            gson.toJson( array, writer );
+        } catch ( IOException ignored )
+        {
+        }
+    }
+
+    private List<OfflinePlayer> deserialize()
+    {
+        List<OfflinePlayer> list = new ArrayList<>();
+        try ( Reader reader = new InputStreamReader( new FileInputStream( file ) ) )
+        {
+            JsonArray array = gson.fromJson( reader, JsonArray.class );
+            if ( array == null || array.size() == 0 )
+            {
+                return list;
+            }
+            for ( JsonElement element : array )
+            {
+                if ( !element.isJsonObject() )
+                {
+                    continue;
+                }
+                JsonObject object = element.getAsJsonObject();
+                UUID uniqueId = UUID.fromString( object.get( "uuid" ).getAsString() );
+                String name = null;
+                if ( object.has( "name" ) )
+                {
+                    name = object.get( "name" ).getAsString();
+                }
+                ServerInfo lastKnownServer = null;
+                if ( object.has( "lastKnownServer" ) )
+                {
+                    lastKnownServer = BungeeCord.getInstance().getServerInfo( object.get( "lastKnownServer" ).getAsString() );
+                }
+                list.add( new BungeeOfflinePlayer( name, uniqueId, true, lastKnownServer ) );
+            }
+        } catch ( IOException ignored )
+        {
+        }
+        return list;
+    }
+
+    private void createFile()
+    {
+        if ( !file.exists() )
+        {
+            try
+            {
+                file.createNewFile();
+            } catch ( IOException ignored )
+            {
+            }
+        }
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 963e31aeafbfceee09016f4902d2c8284cdb59ef..213039d4db60219055feca58813b3ec613de9f63 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -119,6 +119,8 @@ import com.mrivanplays.ivancord.SimpleServicesManager;
 import com.mrivanplays.ivancord.api.plugin.ServicesManager;
 import com.mrivanplays.ivancord.protocol.PacketListener;
 import com.mrivanplays.ivancord.api.PacketDirection;
+import com.mrivanplays.ivancord.api.connection.OfflinePlayer;
+import com.mrivanplays.ivancord.connection.Playerdata;
 // IvanCord end
 
 /**
@@ -217,6 +219,8 @@ public class BungeeCord extends ProxyServer
                     .setNameFormat( "PacketListener Executor/#%d" )
                     .build()
     );
+    @Getter
+    private Playerdata playerdata = new Playerdata();
     // IvanCord end
 
     {
@@ -913,5 +917,23 @@ public class BungeeCord extends ProxyServer
             }
         } );
     }
+
+    @Override
+    public OfflinePlayer getOfflinePlayer(String name)
+    {
+        return playerdata.getOfflinePlayer( name );
+    }
+
+    @Override
+    public OfflinePlayer getOfflinePlayer(UUID uuid)
+    {
+        return playerdata.getOfflinePlayer( uuid );
+    }
+
+    @Override
+    public Collection<OfflinePlayer> getOfflinePlayers()
+    {
+        return playerdata.getOfflinePlayers();
+    }
     // IvanCord end
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index 45e3ab213a72b4fdf28fac996323887bff84f1f0..82e129690627cce591c76ed51695b08ce24b0c82 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -68,6 +68,9 @@ public class UpstreamBridge extends PacketHandler
         bungee.getPluginManager().callEvent( event );
         con.getTabListHandler().onDisconnect();
         BungeeCord.getInstance().removeConnection( con );
+        // IvanCord start
+        BungeeCord.getInstance().getPlayerdata().createOrModify( con.getName(), con.getUniqueId(), con.getServer() != null ? con.getServer().getInfo() : null );
+        // IvanCord end
 
         if ( con.getServer() != null )
         {
