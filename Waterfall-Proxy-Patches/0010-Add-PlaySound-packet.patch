From d867c80a4ce404f75807dc5a3e34cb2755c8a2d1 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Tue, 11 Jun 2019 19:17:33 +0300
Subject: [PATCH] Add PlaySound packet


diff --git a/api/src/main/java/com/github/mrivanplays/ivancord/api/SoundCategory.java b/api/src/main/java/com/github/mrivanplays/ivancord/api/SoundCategory.java
new file mode 100644
index 000000000..ec2546b93
--- /dev/null
+++ b/api/src/main/java/com/github/mrivanplays/ivancord/api/SoundCategory.java
@@ -0,0 +1,140 @@
+/*
+ * Copyright 2019 Ivan Pekov (MrIvanPlays)
+
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in the
+ * Software without restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+ * The above copyright notice and this permission notice shall be included in all copies
+ * or substantial portions of the Software.
+
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
+package com.github.mrivanplays.ivancord.api;
+
+/**
+ * Represents a sound category
+ */
+public class SoundCategory
+{
+
+    public static final int MASTER = 0;
+    public static final int MUSIC = 1;
+    public static final int RECORDS = 2;
+    public static final int WEATHER = 3;
+    public static final int BLOCKS = 4;
+    public static final int HOSTILE = 5;
+    public static final int NEUTRAL = 6;
+    public static final int PLAYERS = 7;
+    public static final int AMBIENT = 8;
+    public static final int VOICE = 9;
+
+    /**
+     * Gets the exact name of the sound category specified.
+     *
+     * @param soundCategory sound category
+     * @return sound category name or empty string if the specified
+     *         integer as category is not a category
+     */
+    public static String getName(int soundCategory)
+    {
+        String name;
+        switch ( soundCategory )
+        {
+            case MASTER:
+                name = "master";
+                break;
+            case MUSIC:
+                name = "music";
+                break;
+            case RECORDS:
+                name = "records";
+                break;
+            case WEATHER:
+                name = "weather";
+                break;
+            case BLOCKS:
+                name = "blocks";
+                break;
+            case HOSTILE:
+                name = "hostile";
+                break;
+            case NEUTRAL:
+                name = "neutral";
+                break;
+            case PLAYERS:
+                name = "players";
+                break;
+            case AMBIENT:
+                name = "ambient";
+                break;
+            case VOICE:
+                name = "voice";
+                break;
+            default:
+                name = "";
+        }
+        return name;
+    }
+
+    /**
+     * Gets the exact value of the sound category name specified.
+     *
+     * @param name name
+     * @return the category matching the name or neutral
+     */
+    public static int valueOf(String name)
+    {
+        int value;
+        switch ( name.toLowerCase() )
+        {
+            case "master":
+                value = MASTER;
+                break;
+            case "music":
+                value = MUSIC;
+                break;
+            case "records":
+                value = RECORDS;
+                break;
+            case "weather":
+                value = WEATHER;
+                break;
+            case "blocks":
+                value = BLOCKS;
+                break;
+            case "hostile":
+                value = HOSTILE;
+                break;
+            case "players":
+                value = PLAYERS;
+                break;
+            case "ambient":
+                value = AMBIENT;
+                break;
+            case "voice":
+                value = VOICE;
+                break;
+            default:
+                value = NEUTRAL;
+        }
+        return value;
+    }
+
+    /**
+     * Gets all the values
+     *
+     * @return values
+     */
+    public static int[] values()
+    {
+        return new int[] {MASTER, MUSIC, RECORDS, WEATHER, BLOCKS, HOSTILE, NEUTRAL, PLAYERS, AMBIENT, VOICE};
+    }
+}
diff --git a/api/src/main/java/com/github/mrivanplays/ivancord/api/event/SoundPlayedEvent.java b/api/src/main/java/com/github/mrivanplays/ivancord/api/event/SoundPlayedEvent.java
new file mode 100644
index 000000000..2f627af86
--- /dev/null
+++ b/api/src/main/java/com/github/mrivanplays/ivancord/api/event/SoundPlayedEvent.java
@@ -0,0 +1,89 @@
+/*
+ * Copyright 2019 Ivan Pekov (MrIvanPlays)
+
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in the
+ * Software without restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+ * The above copyright notice and this permission notice shall be included in all copies
+ * or substantial portions of the Software.
+
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
+package com.github.mrivanplays.ivancord.api.event;
+
+import lombok.EqualsAndHashCode;
+import lombok.Getter;
+import lombok.ToString;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.api.plugin.Event;
+
+import com.github.mrivanplays.ivancord.api.Position;
+
+/**
+ * Event, called when a sound is played to player.
+ */
+@Getter
+@ToString
+@EqualsAndHashCode(callSuper = false)
+public class SoundPlayedEvent extends Event
+{
+
+    /**
+     * The position, the sound is played
+     */
+    private Position position;
+
+    /**
+     * The player, to which is played
+     */
+    private ProxiedPlayer player;
+
+    /**
+     * The sound name
+     */
+    private String soundName;
+
+    /**
+     * Volume of the sound
+     */
+    private float volume;
+
+    /**
+     * Pitch of the sound
+     */
+    private float pitch;
+
+    /**
+     * Category of the sound
+     */
+    private int category;
+
+    public SoundPlayedEvent(ProxiedPlayer player, Position position, String soundName, float volume, float pitch, int category)
+    {
+        this.player = player;
+        this.position = position;
+        this.soundName = soundName;
+        this.volume = volume;
+        this.pitch = pitch;
+        this.category = category;
+    }
+
+    /**
+     * Returns whenever the position, specified on the event
+     * is the player one.
+     *
+     * @return <code>true</code> if equal, otherwise <code>false</code>
+     */
+    public boolean isPositionThePlayerOne()
+    {
+        return position.equals( player.getPosition() );
+    }
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
index 2e96fc066..82e8b9be3 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
@@ -397,4 +397,19 @@ public interface ProxiedPlayer extends Connection, CommandSender
      */
     @Deprecated // IvanCord
     Scoreboard getScoreboard();
+
+    // IvanCord start - add api for playing sounds
+
+    /**
+     * Plays sound to the specified player
+     *
+     * @param position the position the sound will be played
+     * @param sound sound
+     * @param category category
+     * @param volume volume of the sound. 100% is 1
+     * @param pitch pitch of the sound. A number between 0.5 and 2
+     */
+    void playSound(Position position, String sound, int category, float volume, float pitch);
+
+    // IvanCord end
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
index e893a4727..3b8ee648f 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
@@ -21,6 +21,7 @@ import net.md_5.bungee.protocol.packet.LoginPayloadResponse;
 import net.md_5.bungee.protocol.packet.LoginRequest;
 import net.md_5.bungee.protocol.packet.LoginSuccess;
 import net.md_5.bungee.protocol.packet.PingPacket;
+import net.md_5.bungee.protocol.packet.PlaySound; // IvanCord
 import net.md_5.bungee.protocol.packet.PlayerListHeaderFooter;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
 import net.md_5.bungee.protocol.packet.PlayerPosition; // IvanCord
@@ -192,4 +193,10 @@ public abstract class AbstractPacketHandler
     {
     }
     // Waterfall end
+
+    // IvanCord start
+    public void handle(PlaySound playSound) throws Exception
+    {
+    }
+    // IvanCord end
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
index 3402862b9..175553fb8 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
@@ -28,6 +28,7 @@ import net.md_5.bungee.protocol.packet.LoginPayloadResponse;
 import net.md_5.bungee.protocol.packet.LoginRequest;
 import net.md_5.bungee.protocol.packet.LoginSuccess;
 import net.md_5.bungee.protocol.packet.PingPacket;
+import net.md_5.bungee.protocol.packet.PlaySound;
 import net.md_5.bungee.protocol.packet.PlayerListHeaderFooter;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
 import net.md_5.bungee.protocol.packet.PlayerPosition;
@@ -304,6 +305,15 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_13, 0x11 ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x12 )
             );
+            // play sound packet
+            TO_CLIENT.registerPacket(
+                    PlaySound.class,
+                    PlaySound::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x29 ),
+                    map( ProtocolConstants.MINECRAFT_1_9, 0x19 ),
+                    map( ProtocolConstants.MINECRAFT_1_13, 0x1A ),
+                    map( ProtocolConstants.MINECRAFT_1_14, 0x19 )
+            );
             // IvanCord end
         }
     },
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlaySound.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlaySound.java
new file mode 100644
index 000000000..c63a3adea
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlaySound.java
@@ -0,0 +1,126 @@
+/*
+ * Copyright 2019 Ivan Pekov (MrIvanPlays)
+
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in the
+ * Software without restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+ * The above copyright notice and this permission notice shall be included in all copies
+ * or substantial portions of the Software.
+
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
+package net.md_5.bungee.protocol.packet;
+
+import java.util.function.BiFunction;
+
+import io.netty.buffer.ByteBuf;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+@NoArgsConstructor
+@AllArgsConstructor(access = AccessLevel.PRIVATE)
+@Data
+@EqualsAndHashCode(callSuper = false)
+public class PlaySound extends DefinedPacket
+{
+
+    public static final BiFunction<String, Integer, String> NAME_FUNCTION = (s, protocolVersion) ->
+    {
+        String returned = s;
+        if ( protocolVersion > ProtocolConstants.MINECRAFT_1_12_2 )
+        {
+            if ( !s.startsWith( "minecraft:" ) )
+            {
+                returned = "minecraft:" + s;
+            }
+        } else
+        {
+            if ( s.startsWith( "minecraft:" ) )
+            {
+                returned = s.substring( s.indexOf( ':' ) + 1 );
+            }
+        }
+        return returned;
+    };
+
+    public static PlaySound create1_8(String name, int x, int y, int z, float volume, int legacyPitch)
+    {
+        return new PlaySound( name, x * 8, y * 8, z * 8, 0, legacyPitch, volume, 0 );
+    }
+
+    public static PlaySound create1_9(String name, int category, int x, int y, int z, float volume, int legacyPitch)
+    {
+        return new PlaySound( name, x * 8, y * 8, z * 8, category, legacyPitch, volume, 0 );
+    }
+
+    public static PlaySound create(String name, int category, int x, int y, int z, float volume, float pitch)
+    {
+        return new PlaySound( name, x * 8, y * 8, z * 8, category, 0, volume, pitch );
+    }
+
+    private String name;
+    private int x, y, z, category, legacyPitch;
+    private float volume, pitch;
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        name = NAME_FUNCTION.apply( readString( buf ), protocolVersion );
+        if ( protocolVersion > ProtocolConstants.MINECRAFT_1_8 )
+        {
+            category = readVarInt( buf );
+        }
+        x = buf.readInt();
+        y = buf.readInt();
+        z = buf.readInt();
+        volume = buf.readFloat();
+        if ( protocolVersion <= ProtocolConstants.MINECRAFT_1_9_4 )
+        {
+            legacyPitch = buf.readUnsignedByte();
+        } else
+        {
+            pitch = buf.readFloat();
+        }
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        writeString( NAME_FUNCTION.apply( name, protocolVersion ), buf );
+        if ( protocolVersion > ProtocolConstants.MINECRAFT_1_8 )
+        {
+            writeVarInt( category, buf );
+        }
+        buf.writeInt( x );
+        buf.writeInt( y );
+        buf.writeInt( z );
+        buf.writeFloat( volume );
+        if ( protocolVersion <= ProtocolConstants.MINECRAFT_1_9_4 )
+        {
+            buf.writeByte( legacyPitch );
+        } else
+        {
+            buf.writeFloat( pitch );
+        }
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        handler.handle( this );
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 1b6521c04..c4822dfbf 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -55,9 +55,11 @@ import net.md_5.bungee.protocol.MinecraftDecoder;
 import net.md_5.bungee.protocol.MinecraftEncoder;
 import net.md_5.bungee.protocol.PacketWrapper;
 import net.md_5.bungee.protocol.Protocol;
+import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.Chat;
 import net.md_5.bungee.protocol.packet.ClientSettings;
 import net.md_5.bungee.protocol.packet.Kick;
+import net.md_5.bungee.protocol.packet.PlaySound;
 import net.md_5.bungee.protocol.packet.PlayerListHeaderFooter;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.SetCompression;
@@ -66,6 +68,8 @@ import net.md_5.bungee.tab.TabList;
 import net.md_5.bungee.util.CaseInsensitiveSet;
 import net.md_5.bungee.util.ChatComponentTransformer;
 import com.github.mrivanplays.ivancord.api.Position; // IvanCord
+import com.github.mrivanplays.ivancord.api.event.SoundPlayedEvent; // IvanCord
+
 
 @RequiredArgsConstructor
 public final class UserConnection implements ProxiedPlayer
@@ -772,6 +776,31 @@ public final class UserConnection implements ProxiedPlayer
         return serverSentScoreboard;
     }
 
+    // IvanCord start - implement playSound
+    @Override
+    public void playSound(Position position, String sound, int category, float volume, float pitch)
+    {
+        int protocolVersion = getPendingConnection().getVersion();
+        int x = Math.round( Long.valueOf( Math.round( position.getX() ) ).intValue() );
+        int y = Math.round( Long.valueOf( Math.round( position.getY() ) ).intValue() );
+        int z = Math.round( Long.valueOf( Math.round( position.getZ() ) ).intValue() );
+        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_9 )
+        {
+            int pitchInt = Math.round( pitch );
+            unsafe().sendPacket( PlaySound.create1_8( sound, x, y, z, volume, pitchInt ) );
+        } else if ( !( protocolVersion > ProtocolConstants.MINECRAFT_1_9_4 ) )
+        {
+            int pitchInt = Math.round( pitch );
+            unsafe().sendPacket( PlaySound.create1_9( sound, category, x, y, z, volume, pitchInt ) );
+        } else
+        {
+            unsafe().sendPacket( PlaySound.create( sound, category, x, y, z, volume, pitch ) );
+        }
+        new SoundPlayedEvent( this, position,
+                PlaySound.NAME_FUNCTION.apply( sound, getPendingConnection().getVersion() ), volume, pitch, category ).call();
+    }
+    // IvanCord end
+
     // IvanCord start - comment this. Not used anywhere, so...
     /*
     // Waterfall start
-- 
2.22.0.windows.1

