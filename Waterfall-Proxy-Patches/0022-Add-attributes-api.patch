From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <ivan@mrivanplays.com>
Date: Mon, 15 Jun 2020 11:01:09 +0300
Subject: [PATCH] Add attributes api


diff --git a/api/src/main/java/com/mrivanplays/ivancord/api/attributes/Attribute.java b/api/src/main/java/com/mrivanplays/ivancord/api/attributes/Attribute.java
new file mode 100644
index 0000000000000000000000000000000000000000..14547ba459ac66a138643128fe0c3320ec04fdd0
--- /dev/null
+++ b/api/src/main/java/com/mrivanplays/ivancord/api/attributes/Attribute.java
@@ -0,0 +1,13 @@
+package com.mrivanplays.ivancord.api.attributes;
+
+import java.util.List;
+import lombok.Data;
+
+@Data
+public class Attribute
+{
+
+    private final AttributeKey key;
+    private final double value;
+    private List<AttributeModifier> modifierList;
+}
diff --git a/api/src/main/java/com/mrivanplays/ivancord/api/attributes/AttributeKey.java b/api/src/main/java/com/mrivanplays/ivancord/api/attributes/AttributeKey.java
new file mode 100644
index 0000000000000000000000000000000000000000..c972695198f2c93b96792c624ed222487115ae53
--- /dev/null
+++ b/api/src/main/java/com/mrivanplays/ivancord/api/attributes/AttributeKey.java
@@ -0,0 +1,78 @@
+package com.mrivanplays.ivancord.api.attributes;
+
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+public enum AttributeKey
+{
+    GENERIC_MAX_HEALTH( "generic.maxHealth", "generic.max_health", 20.0, 0.0, 1024.0 ),
+    GENERIC_FOLLOW_RANGE( "generic.followRange", "generic.follow_range", 32.0, 0.0, 2048.0 ),
+    GENERIC_KNOCKBACK_RESISTANCE( "generic.knockbackResistance", "generic.knockback_resistance", 0.0, 0.0, 1.0 ),
+    GENERIC_MOVEMENT_SPEED( "generic.movementSpeed", "generic.movement_speed", 0.7, 0.0, 1024.0 ),
+    GENERIC_ATTACK_DAMAGE( "generic.attackDamage", "generic.attack_damage", 2.0, 0.0, 2048.0 ),
+    GENERIC_FLYING_SPEED( "generic.flyingSpeed", "generic.flying_speed", 4.0, 0.0, 2048.0 ),
+    GENERIC_ARMOR( "generic.armor", null, 0.0, 0.0, 30.0 ),
+    GENERIC_ARMOR_TOUGHNESS( "generic.armorToughness", "generic.armor_toughness", 0.0, 0.0, 20.0 ),
+    GENERIC_ATTACK_KNOCKBACK( "generic.attackKnockback", "generic.attack_knockback", 0.0, 0.0, 5.0 ),
+    GENERIC_LUCK( "generic.luck", null, 0.0, -1024.0, 1024.0 ),
+    HORSE_JUMP_STRENGTH( "horse.jumpStrength", "horse.jump_strength", 0.7, 0.0, 2.0 ),
+    ZOMBIE_SPAWN_REINFORCEMENTS( "zombie.spawnReinforcements", "zombie.spawn_reinforcements", 0.0, 0.0, 1.0 );
+
+    private String pre1_16_key, after1_16_key;
+    private double defaultValue, minValue, maxValue;
+
+    AttributeKey(String preKey, String afterKey, double defaultValue, double minValue, double maxValue)
+    {
+        this.pre1_16_key = preKey;
+        if ( afterKey == null )
+        {
+            this.after1_16_key = preKey;
+        } else
+        {
+            this.after1_16_key = afterKey;
+        }
+        this.defaultValue = defaultValue;
+        this.minValue = minValue;
+        this.maxValue = maxValue;
+    }
+
+    public static AttributeKey fromKey(String key)
+    {
+        for ( AttributeKey attr : AttributeKey.values() )
+        {
+            if ( attr.after1_16_key.equalsIgnoreCase( key ) )
+            {
+                return attr;
+            } else if ( attr.pre1_16_key.equalsIgnoreCase( key ) )
+            {
+                return attr;
+            }
+        }
+        throw new IllegalArgumentException( "Invalid attribute key : " + key );
+    }
+
+    public String getKey(int protocolVersion)
+    {
+        if ( protocolVersion <= ProtocolConstants.MINECRAFT_1_15_2 )
+        {
+            return pre1_16_key;
+        } else
+        {
+            return after1_16_key;
+        }
+    }
+
+    public double getDefaultValue()
+    {
+        return defaultValue;
+    }
+
+    public double getMinValue()
+    {
+        return minValue;
+    }
+
+    public double getMaxValue()
+    {
+        return maxValue;
+    }
+}
diff --git a/api/src/main/java/com/mrivanplays/ivancord/api/attributes/AttributeModifier.java b/api/src/main/java/com/mrivanplays/ivancord/api/attributes/AttributeModifier.java
new file mode 100644
index 0000000000000000000000000000000000000000..8c83c3172888a0f83960a380bdce119816578e61
--- /dev/null
+++ b/api/src/main/java/com/mrivanplays/ivancord/api/attributes/AttributeModifier.java
@@ -0,0 +1,48 @@
+package com.mrivanplays.ivancord.api.attributes;
+
+import java.util.UUID;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class AttributeModifier
+{
+
+    private UUID uuid;
+    private double amount;
+    private Operation operation;
+
+    public enum Operation
+    {
+        ADD_SUBTRACT( (byte) 0 ),
+        ADD_SUBTRACT_PERCENT( (byte) 1 ),
+        MULTIPLY_PERCENT( (byte) 2 );
+
+        private final byte value;
+
+        Operation(byte value)
+        {
+            this.value = value;
+        }
+
+        public byte getByteValue()
+        {
+            return value;
+        }
+
+        public static Operation fromByteValue(byte byteValue)
+        {
+            for ( Operation operation : Operation.values() )
+            {
+                if ( operation.getByteValue() == byteValue )
+                {
+                    return operation;
+                }
+            }
+            throw new IllegalArgumentException( "Invalid byte value for attribute operation: " + byteValue );
+        }
+    }
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
index 07e3960d18a47b04f2a6e82140ae6fc4e117edde..5462e6e9e6a2ea43771d339d63173b22a92dde56 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
@@ -1,5 +1,9 @@
 package net.md_5.bungee.api.connection;
 
+import com.mrivanplays.ivancord.api.attributes.Attribute;
+import com.mrivanplays.ivancord.api.attributes.AttributeKey;
+import com.mrivanplays.ivancord.api.attributes.AttributeModifier;
+import java.util.List;
 import java.util.Locale;
 import java.util.Map;
 import java.util.UUID;
@@ -446,4 +450,10 @@ public interface ProxiedPlayer extends Connection, CommandSender
      */
     void setGlobalOp(boolean globalOp);
     // IvanCord end
+
+    // IvanCord start - attributes
+    List<Attribute> getAttributes();
+
+    void modifyAttribute(AttributeKey key, double value);
+    // IvanCord end
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
index 9619cb26ee2a6aaf65fcc9863ba79168a3e1a830..c0ea1264af309878353fa7eaac8542e319413b4c 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
@@ -8,6 +8,7 @@ import net.md_5.bungee.protocol.packet.ClientStatus;
 import net.md_5.bungee.protocol.packet.Commands;
 import net.md_5.bungee.protocol.packet.EncryptionRequest;
 import net.md_5.bungee.protocol.packet.EncryptionResponse;
+import net.md_5.bungee.protocol.packet.EntityAttributes;
 import net.md_5.bungee.protocol.packet.EntityEffect; // Waterfall
 import net.md_5.bungee.protocol.packet.EntityRemoveEffect; // Waterfall
 import net.md_5.bungee.protocol.packet.EntityStatus;
@@ -218,5 +219,9 @@ public abstract class AbstractPacketHandler
     public void handle(PlaySound playSound) throws Exception
     {
     }
+
+    public void handle(EntityAttributes entityAttributes) throws Exception
+    {
+    }
     // IvanCord end
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
index de4a958b9dfe24d46f2056c512cdf22ef3f0c733..f0eb9c5234bd284bb43b3ab36452117cbf0033d3 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
@@ -16,6 +16,7 @@ import net.md_5.bungee.protocol.packet.ClientSettings;
 import net.md_5.bungee.protocol.packet.Commands;
 import net.md_5.bungee.protocol.packet.EncryptionRequest;
 import net.md_5.bungee.protocol.packet.EncryptionResponse;
+import net.md_5.bungee.protocol.packet.EntityAttributes;
 import net.md_5.bungee.protocol.packet.EntityStatus;
 import net.md_5.bungee.protocol.packet.GameState;
 import net.md_5.bungee.protocol.packet.EntityEffect;
@@ -401,6 +402,22 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_16_2, 0x18 ),
                     map( ProtocolConstants.MINECRAFT_1_17, 0x19 )
             );
+            // entity attributes packet
+            TO_CLIENT.registerPacket(
+                    EntityAttributes.class,
+                    EntityAttributes::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x20 ),
+                    map( ProtocolConstants.MINECRAFT_1_9, 0x4B ),
+                    map( ProtocolConstants.MINECRAFT_1_9_4, 0x4A ),
+                    map( ProtocolConstants.MINECRAFT_1_12, 0x4D ),
+                    map( ProtocolConstants.MINECRAFT_1_12_1, 0x4E ),
+                    map( ProtocolConstants.MINECRAFT_1_13, 0x52 ),
+                    map( ProtocolConstants.MINECRAFT_1_14, 0x58 ),
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x59 ),
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x58 ),
+                    map( ProtocolConstants.MINECRAFT_1_17, 0x63 ),
+                    map( ProtocolConstants.MINECRAFT_1_18, 0x64 )
+            );
             // IvanCord end
         }
     },
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/EntityAttributes.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/EntityAttributes.java
new file mode 100644
index 0000000000000000000000000000000000000000..fe62e1d86a0c8c65717f54e5cfc83eb9085e0e21
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/EntityAttributes.java
@@ -0,0 +1,96 @@
+// IvanCord start
+package net.md_5.bungee.protocol.packet;
+
+import io.netty.buffer.ByteBuf;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.UUID;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class EntityAttributes extends DefinedPacket
+{
+
+    private int entityId;
+    private List<Attribute> attributes;
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        entityId = readVarInt( buf );
+        int count = readVarInt( buf );
+        attributes = new ArrayList<>( count );
+        for ( int i = 0; i < count; i++ )
+        {
+            Attribute attribute = new Attribute();
+            attribute.key = readString( buf );
+            attribute.value = buf.readDouble();
+            int modifierCount = readVarInt( buf );
+            attribute.modifierList = new ArrayList<>( modifierCount );
+            for ( int j = 0; j < modifierCount; j++ )
+            {
+                AttributeModifier modifier = new AttributeModifier();
+                modifier.uuid = readUUID( buf );
+                modifier.amount = buf.readDouble();
+                modifier.operation = buf.readByte();
+                attribute.modifierList.add( modifier );
+            }
+            attributes.add( attribute );
+        }
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        writeVarInt( entityId, buf );
+        writeVarInt( attributes.size(), buf );
+        for ( Attribute attribute : attributes )
+        {
+            writeString( attribute.key, buf );
+            buf.writeDouble( attribute.value );
+            writeVarInt( attribute.modifierList.size(), buf );
+            for ( AttributeModifier modifier : attribute.modifierList )
+            {
+                writeUUID( modifier.uuid, buf );
+                buf.writeDouble( modifier.amount );
+                buf.writeByte( modifier.operation );
+            }
+        }
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        handler.handle( this );
+    }
+
+    @Data
+    @NoArgsConstructor
+    @AllArgsConstructor
+    public static class Attribute
+    {
+
+        private String key;
+        private double value;
+        private List<AttributeModifier> modifierList;
+    }
+
+    @Data
+    public static class AttributeModifier
+    {
+
+        private UUID uuid;
+        private double amount;
+        private byte operation;
+    }
+}
+// IvanCord end
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index f488019745f80214ba5b75a6baf5e67d139e2355..e3bf67f76aaba70d7cccaf4dce7c4499cfdf4fa1 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -2,6 +2,7 @@ package net.md_5.bungee;
 
 import com.google.common.base.Joiner;
 import com.google.common.base.Preconditions;
+import com.mrivanplays.ivancord.api.attributes.AttributeKey; // IvanCord
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufAllocator;
 import java.net.InetSocketAddress;
@@ -330,6 +331,10 @@ public class ServerConnector extends PacketHandler
             user.resetTabHeader();
             // IvanCord end
 
+            // IvanCord start - reset max health attribute on server switch
+            user.modifyAttribute( AttributeKey.GENERIC_MAX_HEALTH, AttributeKey.GENERIC_MAX_HEALTH.getDefaultValue() );
+            // IvanCord end
+
             // Update debug info from login packet
             user.unsafe().sendPacket( new EntityStatus( user.getClientEntityId(), login.isReducedDebugInfo() ? EntityStatus.DEBUG_INFO_REDUCED : EntityStatus.DEBUG_INFO_NORMAL ) );
             // And immediate respawn
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index a80a27523c5bffbd5201e77fb994e3550218dbc1..89a983ea85d8a09ed0a9c26197dc2e5401b34972 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -4,6 +4,8 @@ import com.google.common.base.Preconditions;
 import com.google.common.collect.HashMultimap;
 import com.google.common.collect.ImmutableMap;
 import com.google.common.collect.Multimap;
+import com.mrivanplays.ivancord.api.attributes.Attribute; // IvanCord
+import com.mrivanplays.ivancord.api.attributes.AttributeKey; // IvanCord
 import io.netty.bootstrap.Bootstrap;
 import io.netty.channel.Channel;
 import io.netty.channel.ChannelFuture;
@@ -14,10 +16,12 @@ import io.netty.channel.ConnectTimeoutException;
 import io.netty.util.internal.PlatformDependent;
 import java.net.InetSocketAddress;
 import java.net.SocketAddress;
+import java.util.ArrayList; // IvanCord
 import java.util.Collection;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.LinkedList;
+import java.util.List; // IvanCord
 import java.util.Locale;
 import java.util.Map;
 import java.util.Objects;
@@ -58,6 +62,7 @@ import net.md_5.bungee.protocol.Protocol;
 import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.Chat;
 import net.md_5.bungee.protocol.packet.ClientSettings;
+import net.md_5.bungee.protocol.packet.EntityAttributes;
 import net.md_5.bungee.protocol.packet.Kick;
 import net.md_5.bungee.protocol.packet.PlaySound; // IvanCord
 import net.md_5.bungee.protocol.packet.PlayerListHeaderFooter;
@@ -118,6 +123,10 @@ public final class UserConnection implements ProxiedPlayer
     @Getter
     private boolean globalOp;
     // IvanCord end
+    // IvanCord start
+    @Setter
+    public List<Attribute> attributes;
+    // IvanCord end
     @Getter
     private int compressionThreshold = -1;
     // Used for trying multiple servers in order
@@ -844,6 +853,42 @@ public final class UserConnection implements ProxiedPlayer
         BungeeCord.getInstance().getOpsConfiguration().setOp( getUniqueId(), globalOp );
         this.globalOp = globalOp;
     }
+
+    @Override
+    public List<Attribute> getAttributes()
+    {
+        return attributes == null ? Collections.emptyList() : Collections.unmodifiableList( attributes );
+    }
+
+    @Override
+    public void modifyAttribute(AttributeKey key, double value)
+    {
+        if ( value > key.getMaxValue() )
+        {
+            value = key.getMaxValue();
+        }
+        if ( value < key.getMinValue() )
+        {
+            value = key.getMinValue();
+        }
+
+        String strKey = key.getKey( pendingConnection.getVersion() );
+        EntityAttributes packet = new EntityAttributes();
+        packet.setEntityId( clientEntityId );
+        packet.setAttributes( Collections.singletonList( new EntityAttributes.Attribute( strKey, value, Collections.emptyList() ) ) );
+        unsafe().sendPacket( packet );
+
+        Attribute newAttribute = new Attribute( key, value );
+        newAttribute.setModifierList( Collections.emptyList() );
+        if ( attributes != null )
+        {
+            attributes.stream().filter( attribute -> attribute.getKey() == key ).findFirst().ifPresent( attributes::remove );
+        } else
+        {
+            attributes = new ArrayList<>();
+        }
+        attributes.add( newAttribute );
+    }
     // IvanCord end
 
     // IvanCord start - comment this. Not used anywhere, so...
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index ac274f6e45430ae92053de6689e0607e5f1d5e74..7b6bd07d13336d53fe8061183d04a0e5375e1afa 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -4,6 +4,11 @@ import com.google.common.base.Preconditions;
 import com.mojang.brigadier.context.StringRange;
 import com.mojang.brigadier.suggestion.Suggestion;
 import com.mojang.brigadier.suggestion.Suggestions;
+// IvanCord start
+import com.mrivanplays.ivancord.api.attributes.Attribute;
+import com.mrivanplays.ivancord.api.attributes.AttributeKey;
+import com.mrivanplays.ivancord.api.attributes.AttributeModifier;
+// IvanCord end
 import io.netty.channel.Channel;
 import java.util.ArrayList;
 import java.util.LinkedList;
@@ -27,6 +32,7 @@ import net.md_5.bungee.protocol.PacketWrapper;
 import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.Chat;
 import net.md_5.bungee.protocol.packet.ClientSettings;
+import net.md_5.bungee.protocol.packet.EntityAttributes;
 import net.md_5.bungee.protocol.packet.KeepAlive;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
 import net.md_5.bungee.protocol.packet.PlayerPosition;
@@ -305,6 +311,26 @@ public class UpstreamBridge extends PacketHandler
     }
     // IvanCord end
 
+    // IvanCord start
+    @Override
+    public void handle(EntityAttributes attributes)
+    {
+        List<Attribute> attr = new ArrayList<>();
+        for ( EntityAttributes.Attribute packetAttr : attributes.getAttributes() )
+        {
+            Attribute attribute = new Attribute( AttributeKey.fromKey( packetAttr.getKey() ), packetAttr.getValue() );
+            List<AttributeModifier> modifiers = new ArrayList<>();
+            for ( EntityAttributes.AttributeModifier packetModifier : packetAttr.getModifierList() )
+            {
+                modifiers.add( new AttributeModifier( packetModifier.getUuid(), packetModifier.getAmount(), AttributeModifier.Operation.fromByteValue( packetModifier.getOperation() ) ) );
+            }
+            attribute.setModifierList( modifiers );
+            attr.add( attribute );
+        }
+        con.setAttributes( attr );
+    }
+    // IvanCord end
+
     @Override
     public String toString()
     {
