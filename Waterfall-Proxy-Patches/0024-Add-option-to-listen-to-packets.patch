From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Sun, 4 Aug 2019 11:36:40 +0300
Subject: [PATCH] Add option to listen to packets


diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
index 1eb8a79bb9f90916fc1b821d6bcb876a4e7a7e21..2588593967bb4f0deba4f35225d7817860e6ee4a 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
@@ -6,6 +6,7 @@ import java.net.InetSocketAddress;
 import java.util.Collection;
 import java.util.Map;
 import java.util.UUID;
+import java.util.function.BiConsumer; // IvanCord
 import java.util.logging.Logger;
 import lombok.Getter;
 import net.md_5.bungee.api.chat.BaseComponent;
@@ -15,9 +16,11 @@ import net.md_5.bungee.api.connection.ProxiedPlayer;
 import net.md_5.bungee.api.plugin.Plugin;
 import net.md_5.bungee.api.plugin.PluginManager;
 import net.md_5.bungee.api.scheduler.TaskScheduler;
+import net.md_5.bungee.protocol.DefinedPacket; // IvanCord
 
 import com.mrivanplays.ivancord.api.plugin.ServicesManager; // IvanCord
 import com.mrivanplays.ivancord.api.command.IvanCordCommandManager; // IvanCord
+import com.mrivanplays.ivancord.api.PacketDirection; // IvanCord
 
 public abstract class ProxyServer
 {
@@ -334,6 +337,28 @@ public abstract class ProxyServer
      */
     public abstract IvanCordCommandManager getIvanCordCommandManager();
 
+    /**
+     * Registers a inbound packet listener. "Inbound" stands for a packet listener, that is called
+     * whenever the proxy reads a packet.
+     *
+     * <p><i>NOTE: The listener is being called asynchronously</i>
+     *
+     * @param plugin the plugin assigned to
+     * @param packetListener the inbound packet listener
+     */
+    public abstract void registerInboundPacketListener(Plugin plugin, BiConsumer<DefinedPacket, PacketDirection> packetListener);
+
+    /**
+     * Registers a outbound packet listener. "Outbound" stands for a packet listener, that is called
+     * whenever the proxy sends a packet.
+     *
+     * <p><i>NOTE: The listener is being called asynchronously</i>
+     *
+     * @param plugin the plugin assigned to
+     * @param packetListener the outbound packet listener
+     */
+    public abstract void registerOutboundPacketListener(Plugin plugin, BiConsumer<DefinedPacket, PacketDirection> packetListener);
+
     // IvanCord end
 
 }
diff --git a/protocol/src/main/java/com/mrivanplays/ivancord/api/PacketDirection.java b/protocol/src/main/java/com/mrivanplays/ivancord/api/PacketDirection.java
new file mode 100644
index 0000000000000000000000000000000000000000..c0700576ee6fdc951242364303dd8e7aff87db20
--- /dev/null
+++ b/protocol/src/main/java/com/mrivanplays/ivancord/api/PacketDirection.java
@@ -0,0 +1,17 @@
+package com.mrivanplays.ivancord.api;
+
+/**
+ * Represents a sent packet direction
+ */
+public enum PacketDirection
+{
+    /**
+     * The packet is being sent to client
+     */
+    TO_CLIENT,
+
+    /**
+     * The packet is being sent to server
+     */
+    TO_SERVER
+}
diff --git a/protocol/src/main/java/com/mrivanplays/ivancord/protocol/PacketListener.java b/protocol/src/main/java/com/mrivanplays/ivancord/protocol/PacketListener.java
new file mode 100644
index 0000000000000000000000000000000000000000..1dcd9448d2bc9a34a1ad2abb17102650e7bbad6c
--- /dev/null
+++ b/protocol/src/main/java/com/mrivanplays/ivancord/protocol/PacketListener.java
@@ -0,0 +1,10 @@
+package com.mrivanplays.ivancord.protocol;
+
+import com.mrivanplays.ivancord.api.PacketDirection;
+import net.md_5.bungee.protocol.DefinedPacket;
+
+public interface PacketListener
+{
+
+    void handle(DefinedPacket packet, PacketDirection direction);
+}
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
index a46bbc785ebf26e7756a888426da991ea34c08ac..d819ee99fb247a4f8705e0b23dd9cfda68c464e9 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftDecoder.java
@@ -1,10 +1,15 @@
 package net.md_5.bungee.protocol;
 
+// IvanCord start
+import com.mrivanplays.ivancord.protocol.PacketListener;
+import com.mrivanplays.ivancord.api.PacketDirection;
+// IvanCord end
 import io.netty.buffer.ByteBuf;
 import io.netty.buffer.ByteBufUtil;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.DecoderException;
 import io.netty.handler.codec.MessageToMessageDecoder;
+import java.util.Collection; // IvanCord
 import java.util.List;
 import lombok.AllArgsConstructor;
 import lombok.Setter;
@@ -21,17 +26,21 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
     @Setter
     private boolean supportsForge = false;
     private final boolean allowEmptyPackets; // Waterfall
+    private Collection<PacketListener> inboundPacketListeners; // IvanCord
 
-    public MinecraftDecoder(Protocol protocol, boolean server, int protocolVersion) {
+    public MinecraftDecoder(Protocol protocol, boolean server, int protocolVersion, Collection<PacketListener> inboundPacketListeners) { // IvanCord
         // Waterfall start
-        this(protocol, server, protocolVersion, false);
+        // IvanCord start
+        this(protocol, server, protocolVersion, false, inboundPacketListeners);
     }
-    public MinecraftDecoder(Protocol protocol, boolean server, int protocolVersion, boolean allowEmptyPackets) {
+    public MinecraftDecoder(Protocol protocol, boolean server, int protocolVersion, boolean allowEmptyPackets, Collection<PacketListener> inboundPacketListeners) {
         // Waterfall end
+        // IvanCord end
         this.protocol = protocol;
         this.server = server;
         this.protocolVersion = protocolVersion;
         this.allowEmptyPackets = allowEmptyPackets; // Waterfall
+        this.inboundPacketListeners = inboundPacketListeners; // IvanCord
     }
 
     @Override
@@ -58,6 +67,12 @@ public class MinecraftDecoder extends MessageToMessageDecoder<ByteBuf>
             {
                 packetTypeInfo = packet.getClass();
                 packet.read( in, prot.getDirection(), protocolVersion );
+                // IvanCord start
+                for ( PacketListener packetListener : inboundPacketListeners )
+                {
+                    packetListener.handle( packet, PacketDirection.valueOf( prot.getDirection().name() ) );
+                }
+                // IvanCord end
 
                 if ( in.isReadable() )
                 {
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java
index d4b0384348c17de5c2350c8c5f928fcc0c1868db..15a74ecba539cca97fe01868a642659f91780984 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/MinecraftEncoder.java
@@ -1,5 +1,10 @@
 package net.md_5.bungee.protocol;
 
+// IvanCord start
+import java.util.Collection;
+import com.mrivanplays.ivancord.api.PacketDirection;
+import com.mrivanplays.ivancord.protocol.PacketListener;
+// IvanCord end
 import io.netty.buffer.ByteBuf;
 import io.netty.channel.ChannelHandlerContext;
 import io.netty.handler.codec.MessageToByteEncoder;
@@ -15,6 +20,7 @@ public class MinecraftEncoder extends MessageToByteEncoder<DefinedPacket>
     private boolean server;
     @Setter
     private int protocolVersion;
+    private Collection<PacketListener> outboundPacketListeners; // IvanCord
 
     @Override
     protected void encode(ChannelHandlerContext ctx, DefinedPacket msg, ByteBuf out) throws Exception
@@ -22,5 +28,11 @@ public class MinecraftEncoder extends MessageToByteEncoder<DefinedPacket>
         Protocol.DirectionData prot = ( server ) ? protocol.TO_CLIENT : protocol.TO_SERVER;
         DefinedPacket.writeVarInt( prot.getId( msg.getClass(), protocolVersion ), out );
         msg.write( out, prot.getDirection(), protocolVersion );
+        // IvanCord start
+        for ( PacketListener packetListener : outboundPacketListeners )
+        {
+            packetListener.handle( msg, server ? PacketDirection.TO_CLIENT : PacketDirection.TO_SERVER );
+        }
+        // IvanCord end
     }
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 12998fff1fde448d8f4ad486a0a3a26d3123f001..0ed98286d93d7c459c4e7fec4b245cd33bf8a058 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -3,6 +3,7 @@ package net.md_5.bungee;
 import com.google.common.base.Charsets;
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicate;
+import com.google.common.collect.ImmutableList; // IvanCord
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
@@ -35,12 +36,18 @@ import java.util.Map;
 import java.util.MissingResourceException;
 import java.util.PropertyResourceBundle;
 import java.util.ResourceBundle;
+import java.util.Set; // IvanCord
 import java.util.Timer;
 import java.util.TimerTask;
 import java.util.UUID;
+// IvanCord start
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+// IvanCord end
 import java.util.concurrent.TimeUnit;
 import java.util.concurrent.locks.ReadWriteLock;
 import java.util.concurrent.locks.ReentrantReadWriteLock;
+import java.util.function.BiConsumer; // IvanCord
 import java.util.logging.Handler;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -109,6 +116,8 @@ import com.mrivanplays.ivancord.modules.YamlReconnectHandler;
 import com.mrivanplays.ivancord.SimpleServicesManager;
 import com.mrivanplays.ivancord.api.plugin.ServicesManager;
 import com.mrivanplays.ivancord.api.command.IvanCordCommandManager;
+import com.mrivanplays.ivancord.protocol.PacketListener;
+import com.mrivanplays.ivancord.api.PacketDirection;
 // IvanCord end
 
 /**
@@ -197,6 +206,13 @@ public class BungeeCord extends ProxyServer
     private ServicesManager servicesManager;
     @Getter
     private IvanCordCommandManager ivanCordCommandManager;
+    private Set<PacketListener> inboundPacketListeners = new HashSet<>();
+    private Set<PacketListener> outboundPacketListeners = new HashSet<>();
+    private ExecutorService PACKET_LISTENER_EXECUTOR = Executors.newCachedThreadPool(
+            new ThreadFactoryBuilder()
+                    .setNameFormat( "PacketListener Executor/#%d" )
+                    .build()
+    );
     // IvanCord end
 
     {
@@ -502,6 +518,13 @@ public class BungeeCord extends ProxyServer
                 }
                 saveThread.cancel();
                 // metricsThread.cancel(); // Waterfall: Disable Metrics
+                // IvanCord start
+                PACKET_LISTENER_EXECUTOR.shutdown();
+                try
+                {
+                    PACKET_LISTENER_EXECUTOR.awaitTermination( Long.MAX_VALUE, TimeUnit.NANOSECONDS );
+                } catch (InterruptedException ignored) {}
+                // IvanCord end
 
                 getLogger().info( "Disabling plugins" );
                 // IvanCord start - fix this shit
@@ -815,4 +838,40 @@ public class BungeeCord extends ProxyServer
     {
         return new BungeeTitle();
     }
+
+    // IvanCord start
+    public Collection<PacketListener> getInboundPacketListeners()
+    {
+        return ImmutableList.copyOf( inboundPacketListeners );
+    }
+
+    public Collection<PacketListener> getOutboundPacketListeners()
+    {
+        return ImmutableList.copyOf( outboundPacketListeners );
+    }
+
+    @Override
+    public void registerInboundPacketListener(Plugin plugin, BiConsumer<DefinedPacket, PacketDirection> packetListener)
+    {
+        inboundPacketListeners.add( (packet, direction) ->
+        {
+            if ( plugin.isEnabled() )
+            {
+                PACKET_LISTENER_EXECUTOR.execute( () -> packetListener.accept( packet, direction ) );
+            }
+        } );
+    }
+
+    @Override
+    public void registerOutboundPacketListener(Plugin plugin, BiConsumer<DefinedPacket, PacketDirection> packetListener)
+    {
+        outboundPacketListeners.add( (packet, direction) ->
+        {
+            if ( plugin.isEnabled() )
+            {
+                PACKET_LISTENER_EXECUTOR.execute( () -> packetListener.accept( packet, direction ) );
+            }
+        } );
+    }
+    // IvanCord end
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 5a0ef6b7e7dbe612948d807d23c1518a274c9ac3..a18727d34389862e5ffb294a42b1d5f61fd58bfc 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -387,8 +387,8 @@ public final class UserConnection implements ProxiedPlayer
                     protected void initChannel(Channel ch) throws Exception
                     {
                         PipelineUtils.BASE.initChannel( ch );
-                        ch.pipeline().addAfter( PipelineUtils.FRAME_DECODER, PipelineUtils.PACKET_DECODER, new MinecraftDecoder( Protocol.HANDSHAKE, false, getPendingConnection().getVersion(), bungee.getConfig().isAllowEmptyPackets() ) ); // Waterfall
-                        ch.pipeline().addAfter( PipelineUtils.FRAME_PREPENDER, PipelineUtils.PACKET_ENCODER, new MinecraftEncoder( Protocol.HANDSHAKE, false, getPendingConnection().getVersion() ) );
+                        ch.pipeline().addAfter( PipelineUtils.FRAME_DECODER, PipelineUtils.PACKET_DECODER, new MinecraftDecoder( Protocol.HANDSHAKE, false, getPendingConnection().getVersion(), bungee.getConfig().isAllowEmptyPackets(), BungeeCord.getInstance().getInboundPacketListeners() ) ); // Waterfall // IvanCord
+                        ch.pipeline().addAfter( PipelineUtils.FRAME_PREPENDER, PipelineUtils.PACKET_ENCODER, new MinecraftEncoder( Protocol.HANDSHAKE, false, getPendingConnection().getVersion(), BungeeCord.getInstance().getOutboundPacketListeners() ) ); // IvanCord
                         ch.pipeline().get( HandlerBoss.class ).setHandler( new ServerConnector( bungee, UserConnection.this, target ) );
                     }
                 };
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java b/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java
index 6bc14d675249cab64433db9f57cb60ca7ab9da90..2db9f157dc30d7a9189d9b849d3c7d028447a3bd 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/PingHandler.java
@@ -34,9 +34,9 @@ public class PingHandler extends PacketHandler
     public void connected(ChannelWrapper channel) throws Exception
     {
         this.channel = channel;
-        MinecraftEncoder encoder = new MinecraftEncoder( Protocol.HANDSHAKE, false, protocol );
+        MinecraftEncoder encoder = new MinecraftEncoder( Protocol.HANDSHAKE, false, protocol, BungeeCord.getInstance().getOutboundPacketListeners() ); // IvanCord
 
-        channel.getHandle().pipeline().addAfter( PipelineUtils.FRAME_DECODER, PipelineUtils.PACKET_DECODER, new MinecraftDecoder( Protocol.STATUS, false, ProxyServer.getInstance().getProtocolVersion() ) );
+        channel.getHandle().pipeline().addAfter( PipelineUtils.FRAME_DECODER, PipelineUtils.PACKET_DECODER, new MinecraftDecoder( Protocol.STATUS, false, ProxyServer.getInstance().getProtocolVersion(), BungeeCord.getInstance().getInboundPacketListeners() ) ); // IvanCord
         channel.getHandle().pipeline().addAfter( PipelineUtils.FRAME_PREPENDER, PipelineUtils.PACKET_ENCODER, encoder );
 
         channel.write( new Handshake( protocol, target.getAddress().getHostString(), target.getAddress().getPort(), 1 ) );
diff --git a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
index 39ed623b65f52bb21f1dc777852fa2319f062458..77a39bc3fc9b6385d94670e70eb4126a9f1da3bf 100644
--- a/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
+++ b/proxy/src/main/java/net/md_5/bungee/netty/PipelineUtils.java
@@ -69,8 +69,8 @@ public class PipelineUtils
             }
             // IvanCord end
             ch.pipeline().addBefore( FRAME_DECODER, LEGACY_DECODER, new LegacyDecoder() );
-            ch.pipeline().addAfter( FRAME_DECODER, PACKET_DECODER, new MinecraftDecoder( Protocol.HANDSHAKE, true, ProxyServer.getInstance().getProtocolVersion() ) );
-            ch.pipeline().addAfter( FRAME_PREPENDER, PACKET_ENCODER, new MinecraftEncoder( Protocol.HANDSHAKE, true, ProxyServer.getInstance().getProtocolVersion() ) );
+            ch.pipeline().addAfter( FRAME_DECODER, PACKET_DECODER, new MinecraftDecoder( Protocol.HANDSHAKE, true, ProxyServer.getInstance().getProtocolVersion(), BungeeCord.getInstance().getInboundPacketListeners() ) ); // IvanCord
+            ch.pipeline().addAfter( FRAME_PREPENDER, PACKET_ENCODER, new MinecraftEncoder( Protocol.HANDSHAKE, true, ProxyServer.getInstance().getProtocolVersion(), BungeeCord.getInstance().getOutboundPacketListeners() ) ); // IvanCord
             ch.pipeline().addBefore( FRAME_PREPENDER, LEGACY_KICKER, legacyKicker );
             ch.pipeline().get( HandlerBoss.class ).setHandler( new InitialHandler( BungeeCord.getInstance(), listener ) );
 
