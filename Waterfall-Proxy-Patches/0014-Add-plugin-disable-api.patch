From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Thu, 27 Jun 2019 18:25:10 +0300
Subject: [PATCH] Add plugin disable api


diff --git a/api/src/main/java/com/mrivanplays/ivancord/api/event/PluginDisabledEvent.java b/api/src/main/java/com/mrivanplays/ivancord/api/event/PluginDisabledEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..6e3335e07bd197ed17c52a8018c732a92748d2fd
--- /dev/null
+++ b/api/src/main/java/com/mrivanplays/ivancord/api/event/PluginDisabledEvent.java
@@ -0,0 +1,20 @@
+package com.mrivanplays.ivancord.api.event;
+
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import net.md_5.bungee.api.plugin.Event;
+import net.md_5.bungee.api.plugin.Plugin;
+
+/**
+ * Represents a event, called when a plugin was disabled
+ */
+@Data
+@EqualsAndHashCode(callSuper = false)
+public class PluginDisabledEvent extends Event
+{
+
+    /**
+     * The plugin which was disabled
+     */
+    private final Plugin plugin;
+}
diff --git a/api/src/main/java/com/mrivanplays/ivancord/api/event/PluginEnabledEvent.java b/api/src/main/java/com/mrivanplays/ivancord/api/event/PluginEnabledEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..ab7c3978a708ff47c48dc56804cbdd753d870852
--- /dev/null
+++ b/api/src/main/java/com/mrivanplays/ivancord/api/event/PluginEnabledEvent.java
@@ -0,0 +1,20 @@
+package com.mrivanplays.ivancord.api.event;
+
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import net.md_5.bungee.api.plugin.Event;
+import net.md_5.bungee.api.plugin.Plugin;
+
+/**
+ * Represents a event, called when a plugin was enabled
+ */
+@Data
+@EqualsAndHashCode(callSuper = false)
+public class PluginEnabledEvent extends Event
+{
+
+    /**
+     * The plugin which was enabled.
+     */
+    private final Plugin plugin;
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java b/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
index 5dcc75914a72b7130c0463befb540cfc888baf08..8a2474878121c84b21c1d52112996b1e025f123c 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
@@ -184,6 +184,19 @@ public class Plugin
         return getClass().getClassLoader().getResourceAsStream( name );
     }
 
+    // IvanCord start
+
+    /**
+     * Returns whenever this plugin is enabled.
+     *
+     * @return <code>true</code> if enabled
+     */
+    public boolean isEnabled()
+    {
+        return proxy.getPluginManager().isPluginEnabled( this );
+    }
+    // IvanCord end
+
     /**
      * Called by the loader to initialize the fields in this plugin.
      *
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
index 7fc11bea01f066682305c36c46bbd7c56c0bec59..3ceb9f4ddafcf6ccad57e4955f13a135547af9c7 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
@@ -25,12 +25,17 @@ import java.util.Set;
 import java.util.Stack;
 import java.util.jar.JarEntry;
 import java.util.jar.JarFile;
+import java.util.logging.Handler; // IvanCord
 import java.util.logging.Level;
 import io.github.waterfallmc.waterfall.event.ProxyExceptionEvent; // Waterfall
 import io.github.waterfallmc.waterfall.exception.ProxyCommandException; // Waterfall
 import io.github.waterfallmc.waterfall.exception.ProxyEventException; // Waterfall
 import io.github.waterfallmc.waterfall.exception.ProxyPluginEnableDisableException; // Waterfall
 import io.github.waterfallmc.waterfall.exception.ProxyTabCompleteException; // Waterfall
+// IvanCord start
+import com.mrivanplays.ivancord.api.event.PluginDisabledEvent;
+import com.mrivanplays.ivancord.api.event.PluginEnabledEvent;
+// IvanCord end
 import lombok.RequiredArgsConstructor;
 import net.md_5.bungee.api.ChatColor;
 import net.md_5.bungee.api.CommandSender;
@@ -318,6 +323,9 @@ public final class PluginManager
                 {
                     plugin.getDescription().getName(), plugin.getDescription().getVersion(), plugin.getDescription().getAuthor()
                 } );
+                // IvanCord start
+                callEvent( new PluginEnabledEvent( plugin ) );
+                // IvanCord end
             } catch ( Throwable t )
             {
                 // Waterfall start - throw exception event
@@ -556,4 +564,80 @@ public final class PluginManager
         }
         return false;
     }
+
+    // IvanCord start - plugin disable api
+
+    /**
+     * @param pluginName the plugin's name you want to disable
+     * @throws IllegalArgumentException if plugin name is null/empty || found plugin is null
+     * @see #disablePlugin(Plugin) 
+     */
+    public void disablePlugin(String pluginName)
+    {
+        Preconditions.checkArgument( pluginName != null || !pluginName.isEmpty(), "Plugin name cannot be null/empty" );
+        Preconditions.checkArgument( getPlugin( pluginName ) != null, "Cannot find plugin for disable with name '" + pluginName + "'" );
+        disablePlugin( getPlugin( pluginName ) );
+    }
+
+    /**
+     * Disables the specified plugin, if it is enabled.
+     *
+     * @param plugin the plugin you want to disable
+     * @throws IllegalArgumentException if the plugin is null
+     */
+    public void disablePlugin(Plugin plugin)
+    {
+        Preconditions.checkNotNull( plugin, "Disabling plugin cannot be null" );
+        if ( !plugin.isEnabled() )
+        {
+            return;
+        }
+        try
+        {
+            plugin.onDisable();
+            for ( Handler handler : plugin.getLogger().getHandlers() )
+            {
+                handler.close();
+            }
+        } catch ( Throwable t )
+        {
+            // implement waterfall's stupid exception reporting shit
+            String msg = "Exception disabling plugin " + plugin.getDescription().getName();
+            proxy.getLogger().log( Level.SEVERE, msg, t );
+            callEvent( new ProxyExceptionEvent( new ProxyPluginEnableDisableException( msg, t, plugin) ) );
+        }
+        unregisterListeners( plugin );
+        unregisterCommands( plugin );
+        proxy.getScheduler().cancel( plugin );
+        plugin.getExecutorService().shutdownNow();
+        plugins.remove( plugin.getDescription().getName(), plugin );
+        callEvent( new PluginDisabledEvent( plugin ) );
+        System.gc();
+    }
+
+    /**
+     * @param pluginName the plugin's name you want to check
+     * @return <code>true</code> if enabled, otherwise <code>false</code>
+     * @throws IllegalArgumentException if plugin name is null/empty || found plugin is null
+     * @see #isPluginEnabled(Plugin)
+     */
+    public boolean isPluginEnabled(String pluginName)
+    {
+        Preconditions.checkArgument( pluginName != null || !pluginName.isEmpty(), "Plugin name cannot be null/empty" );
+        return plugins.containsKey( pluginName );
+    }
+
+    /**
+     * Returns whenever a plugin is enabled
+     *
+     * @param plugin plugin
+     * @return <code>true</code> if enabled, otherwise <code>false</code>
+     * @throws IllegalArgumentException if plugin is null
+     */
+    public boolean isPluginEnabled(Plugin plugin)
+    {
+        Preconditions.checkNotNull( plugin, "Checked plugin cannot be null" );
+        return plugins.containsKey( plugin.getDescription().getName() );
+    }
+    // IvanCord end
 }
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index 39449556690a241c07f0961aac6f77cec6ae9005..469cc6d5a9c4fc156e436d6068a3c61486bdb087 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -520,26 +520,12 @@ public class BungeeCord extends ProxyServer
         //metricsThread.cancel(); // Waterfall: Disable Metrics
 
         getLogger().info( "Disabling plugins" );
+        // IvanCord start - fix this shit
         for ( Plugin plugin : Lists.reverse( new ArrayList<>( pluginManager.getPlugins() ) ) )
         {
-            try
-            {
-                plugin.onDisable();
-                for ( Handler handler : plugin.getLogger().getHandlers() )
-                {
-                    handler.close();
-                }
-            } catch ( Throwable t )
-            {
-                // Waterfall start - throw exception event
-                String msg = "Exception disabling plugin " + plugin.getDescription().getName();
-                getLogger().log( Level.SEVERE, msg, t );
-                pluginManager.callEvent( new ProxyExceptionEvent( new ProxyPluginEnableDisableException( msg, t, plugin) ) );
-                // Waterfall end
-            }
-            getScheduler().cancel( plugin );
-            plugin.getExecutorService().shutdownNow();
+            pluginManager.disablePlugin( plugin );
         }
+        // IvanCord end
 
         getLogger().info( "Closing IO threads" );
                 // IvanCord start - speed up shutdown
