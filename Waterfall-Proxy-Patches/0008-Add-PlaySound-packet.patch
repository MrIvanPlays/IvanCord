From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Tue, 11 Jun 2019 19:17:33 +0300
Subject: [PATCH] Add PlaySound packet


diff --git a/api/src/main/java/com/mrivanplays/ivancord/api/SoundCategory.java b/api/src/main/java/com/mrivanplays/ivancord/api/SoundCategory.java
new file mode 100644
index 0000000000000000000000000000000000000000..e4785467cd6f47a4a37577fe44040283e31fb8c5
--- /dev/null
+++ b/api/src/main/java/com/mrivanplays/ivancord/api/SoundCategory.java
@@ -0,0 +1,32 @@
+package com.mrivanplays.ivancord.api;
+
+import java.util.Arrays;
+
+/**
+ * Represents a sound category
+ */
+public enum SoundCategory
+{
+
+    MASTER,
+    MUSIC,
+    RECORDS,
+    WEATHER,
+    BLOCKS,
+    HOSTILE,
+    NEUTRAL,
+    PLAYERS,
+    AMBIENT,
+    VOICE;
+
+    /**
+     * Returns the sound category with the specified category integer
+     *
+     * @param category the category you wish to get
+     * @return sound category
+     */
+    public static SoundCategory valueOf(int category)
+    {
+        return Arrays.stream( values() ).filter( sc -> sc.ordinal() == category ).findFirst().orElse( SoundCategory.MASTER );
+    }
+}
diff --git a/api/src/main/java/com/mrivanplays/ivancord/api/event/SoundPlayedEvent.java b/api/src/main/java/com/mrivanplays/ivancord/api/event/SoundPlayedEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..5ef58ad8ee5a67f84918be06f6b448e49da8aa17
--- /dev/null
+++ b/api/src/main/java/com/mrivanplays/ivancord/api/event/SoundPlayedEvent.java
@@ -0,0 +1,70 @@
+package com.mrivanplays.ivancord.api.event;
+
+import lombok.EqualsAndHashCode;
+import lombok.Getter;
+import lombok.ToString;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.api.plugin.Event;
+
+import com.mrivanplays.ivancord.api.Position;
+
+/**
+ * Event, called when a sound is played to player.
+ */
+@Getter
+@ToString
+@EqualsAndHashCode(callSuper = false)
+public class SoundPlayedEvent extends Event
+{
+
+    /**
+     * The position, the sound is played
+     */
+    private Position position;
+
+    /**
+     * The player, to which is played
+     */
+    private ProxiedPlayer player;
+
+    /**
+     * The sound name
+     */
+    private String soundName;
+
+    /**
+     * Volume of the sound
+     */
+    private float volume;
+
+    /**
+     * Pitch of the sound
+     */
+    private float pitch;
+
+    /**
+     * Category of the sound
+     */
+    private int category;
+
+    public SoundPlayedEvent(ProxiedPlayer player, Position position, String soundName, float volume, float pitch, int category)
+    {
+        this.player = player;
+        this.position = position;
+        this.soundName = soundName;
+        this.volume = volume;
+        this.pitch = pitch;
+        this.category = category;
+    }
+
+    /**
+     * Returns whenever the position, specified on the event
+     * is the player one.
+     *
+     * @return <code>true</code> if equal, otherwise <code>false</code>
+     */
+    public boolean isPositionThePlayerOne()
+    {
+        return position.equals( player.getPosition() );
+    }
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
index 6a4973fed3127bd4eb2a4207204b9df2d1a3af0b..b4382724e5f0d892466aa068e5040016cc63423b 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
@@ -14,6 +14,7 @@ import net.md_5.bungee.api.config.ServerInfo;
 import net.md_5.bungee.api.event.ServerConnectEvent;
 import net.md_5.bungee.api.score.Scoreboard;
 import com.mrivanplays.ivancord.api.Position; // IvanCord
+import com.mrivanplays.ivancord.api.SoundCategory; // IvanCord
 
 /**
  * Represents a player who's connection is being connected to somewhere else,
@@ -397,4 +398,19 @@ public interface ProxiedPlayer extends Connection, CommandSender
      */
     @Deprecated // IvanCord
     Scoreboard getScoreboard();
+
+    // IvanCord start - add api for playing sounds
+
+    /**
+     * Plays sound to the specified player
+     *
+     * @param position the position the sound will be played
+     * @param sound sound
+     * @param category category
+     * @param volume volume of the sound. 100% is 1
+     * @param pitch pitch of the sound. A number between 0.5 and 2
+     */
+    void playSound(Position position, String sound, SoundCategory category, float volume, float pitch);
+
+    // IvanCord end
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
index e0e68ecabbda76bf83011b67de558e83e7f7b4a7..e3c1f2ac922616234cf6f746ede040de3751d6ac 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
@@ -22,6 +22,7 @@ import net.md_5.bungee.protocol.packet.LoginPayloadResponse;
 import net.md_5.bungee.protocol.packet.LoginRequest;
 import net.md_5.bungee.protocol.packet.LoginSuccess;
 import net.md_5.bungee.protocol.packet.PingPacket;
+import net.md_5.bungee.protocol.packet.PlaySound; // IvanCord
 import net.md_5.bungee.protocol.packet.PlayerListHeaderFooter;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
 import net.md_5.bungee.protocol.packet.PlayerPosition; // IvanCord
@@ -197,4 +198,10 @@ public abstract class AbstractPacketHandler
     {
     }
     // Waterfall end
+
+    // IvanCord start
+    public void handle(PlaySound playSound) throws Exception
+    {
+    }
+    // IvanCord end
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
index a7642c562809353d12139ab425cd9f79e9dd5bb0..29f21145a1c636ce223a5afd7bbb871c0163313a 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
@@ -28,6 +28,7 @@ import net.md_5.bungee.protocol.packet.LoginPayloadResponse;
 import net.md_5.bungee.protocol.packet.LoginRequest;
 import net.md_5.bungee.protocol.packet.LoginSuccess;
 import net.md_5.bungee.protocol.packet.PingPacket;
+import net.md_5.bungee.protocol.packet.PlaySound;
 import net.md_5.bungee.protocol.packet.PlayerListHeaderFooter;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
 import net.md_5.bungee.protocol.packet.PlayerPosition;
@@ -352,6 +353,17 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_14, 0x12 ),
                     map( ProtocolConstants.MINECRAFT_1_16, 0x13 )
             );
+            // play sound packet
+            TO_CLIENT.registerPacket(
+                    PlaySound.class,
+                    PlaySound::new,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x29 ),
+                    map( ProtocolConstants.MINECRAFT_1_9, 0x19 ),
+                    map( ProtocolConstants.MINECRAFT_1_13, 0x1A ),
+                    map( ProtocolConstants.MINECRAFT_1_14, 0x19 ),
+                    map( ProtocolConstants.MINECRAFT_1_15, 0x1A ),
+                    map( ProtocolConstants.MINECRAFT_1_16, 0x19 )
+            );
             // IvanCord end
         }
     },
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlaySound.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlaySound.java
new file mode 100644
index 0000000000000000000000000000000000000000..6b8ef02070ddabb4edb23793901cd4d9eb957043
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlaySound.java
@@ -0,0 +1,128 @@
+// IvanCord start
+package net.md_5.bungee.protocol.packet;
+
+import java.util.function.BiFunction;
+
+import io.netty.buffer.ByteBuf;
+import lombok.AccessLevel;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+import net.md_5.bungee.protocol.ProtocolConstants;
+
+@NoArgsConstructor
+@AllArgsConstructor(access = AccessLevel.PRIVATE)
+@Data
+@EqualsAndHashCode(callSuper = false)
+public class PlaySound extends DefinedPacket
+{
+
+    public static final BiFunction<String, Integer, String> NAME_FUNCTION = (input, protocolVersion) ->
+    {
+        String sound = input;
+        if ( protocolVersion > ProtocolConstants.MINECRAFT_1_12_2 )
+        {
+            if ( !input.startsWith( "minecraft:" ) )
+            {
+                sound = "minecraft:" + input;
+            }
+        } else
+        {
+            if ( input.startsWith( "minecraft:" ) )
+            {
+                sound = input.replace( "minecraft:", "" );
+            }
+        }
+        return sound.trim();
+    };
+
+    public static PlaySound create1_8(String name, int x, int y, int z, float volume, int legacyPitch)
+    {
+        return new PlaySound( name, x * 8, y * 8, z * 8, volume, legacyPitch );
+    }
+
+    public static PlaySound create1_9(String name, int category, int x, int y, int z, float volume, int legacyPitch)
+    {
+        return new PlaySound( name, category, x * 8, y * 8, z * 8, volume, legacyPitch );
+    }
+
+    public static PlaySound create(String name, int category, int x, int y, int z, float volume, float pitch)
+    {
+        return new PlaySound( name, category, x * 8, y * 8, z * 8, volume, pitch );
+    }
+
+    // the down constructors are only if the packet is being invoked by the versions
+    // the constructors you should use while constructing the packet are the static
+    // create() methods.
+
+    public PlaySound(String name, int category, int x, int y, int z, float volume, float pitch)
+    {
+        this( name, x, y, z, category, 0, volume, pitch );
+    }
+
+    public PlaySound(String name, int category, int x, int y, int z, float volume, int pitch)
+    {
+        this( name, x, y, z, category, pitch, volume, 0 );
+    }
+
+    public PlaySound(String name, int x, int y, int z, float volume, int pitch)
+    {
+        this( name, x, y, z, 0, pitch, volume, 0 );
+    }
+
+    private String name;
+    private int x, y, z, category, legacyPitch;
+    private float volume, pitch;
+
+    @Override
+    public void read(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        name = NAME_FUNCTION.apply( readString( buf ), protocolVersion );
+        if ( protocolVersion > ProtocolConstants.MINECRAFT_1_8 )
+        {
+            category = readVarInt( buf );
+        }
+        x = buf.readInt();
+        y = buf.readInt();
+        z = buf.readInt();
+        volume = buf.readFloat();
+        if ( protocolVersion <= ProtocolConstants.MINECRAFT_1_9_4 )
+        {
+            legacyPitch = buf.readUnsignedByte();
+        } else
+        {
+            pitch = buf.readFloat();
+        }
+    }
+
+    @Override
+    public void write(ByteBuf buf, ProtocolConstants.Direction direction, int protocolVersion)
+    {
+        writeString( NAME_FUNCTION.apply( name, protocolVersion ), buf );
+        if ( protocolVersion > ProtocolConstants.MINECRAFT_1_8 )
+        {
+            writeVarInt( category, buf );
+        }
+        buf.writeInt( x );
+        buf.writeInt( y );
+        buf.writeInt( z );
+        buf.writeFloat( volume );
+        if ( protocolVersion <= ProtocolConstants.MINECRAFT_1_9_4 )
+        {
+            buf.writeByte( legacyPitch );
+        } else
+        {
+            buf.writeFloat( pitch );
+        }
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        handler.handle( this );
+    }
+}
+// IvanCord end
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index 17477febf6143afce297927cb806c68f3cf9d881..46bbe7e36ad646088cf53c6c0332e60553e5f815 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -46,6 +46,7 @@ import net.md_5.bungee.protocol.packet.Kick;
 import net.md_5.bungee.protocol.packet.Login;
 import net.md_5.bungee.protocol.packet.LoginRequest;
 import net.md_5.bungee.protocol.packet.LoginSuccess;
+import net.md_5.bungee.protocol.packet.PlaySound;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.Respawn;
 import net.md_5.bungee.protocol.packet.ScoreboardObjective;
@@ -481,6 +482,19 @@ public class ServerConnector extends PacketHandler
         user.unsafe().sendPacket( pluginMessage );
     }
 
+    // IvanCord start
+    // handle the PlaySound packet if a plugin have sent it
+    // into the ServerConnectEvent or ServerConnectedEvent
+    @Override
+    public void handle(PlaySound playSound)
+    {
+        if ( user.getServer() != null )
+        {
+            user.unsafe().sendPacket( playSound );
+        }
+    }
+    // IvanCord end
+
     @Override
     public String toString()
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index e73ac8210f954276d5b916faa9baf9e36bf12e4f..a3ab808d89dffd5cc567696f2595af3660e5dbe3 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -60,6 +60,7 @@ import net.md_5.bungee.protocol.ProtocolConstants;
 import net.md_5.bungee.protocol.packet.Chat;
 import net.md_5.bungee.protocol.packet.ClientSettings;
 import net.md_5.bungee.protocol.packet.Kick;
+import net.md_5.bungee.protocol.packet.PlaySound; // IvanCord
 import net.md_5.bungee.protocol.packet.PlayerListHeaderFooter;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.SetCompression;
@@ -68,6 +69,8 @@ import net.md_5.bungee.tab.TabList;
 import net.md_5.bungee.util.CaseInsensitiveSet;
 import net.md_5.bungee.util.ChatComponentTransformer;
 import com.mrivanplays.ivancord.api.Position; // IvanCord
+import com.mrivanplays.ivancord.api.SoundCategory; // IvanCord
+import com.mrivanplays.ivancord.api.event.SoundPlayedEvent; // IvanCord
 
 @RequiredArgsConstructor
 public final class UserConnection implements ProxiedPlayer
@@ -782,6 +785,31 @@ public final class UserConnection implements ProxiedPlayer
         return serverSentScoreboard;
     }
 
+    // IvanCord start - implement playSound
+    @Override
+    public void playSound(Position position, String sound, SoundCategory category, float volume, float pitch)
+    {
+        int protocolVersion = getPendingConnection().getVersion();
+        int x = Math.round( Long.valueOf( Math.round( position.getX() ) ).intValue() );
+        int y = Math.round( Long.valueOf( Math.round( position.getY() ) ).intValue() );
+        int z = Math.round( Long.valueOf( Math.round( position.getZ() ) ).intValue() );
+        if ( protocolVersion < ProtocolConstants.MINECRAFT_1_9 )
+        {
+            int pitchInt = Math.round( pitch );
+            unsafe().sendPacket( PlaySound.create1_8( sound, x, y, z, volume, pitchInt ) );
+        } else if ( !( protocolVersion > ProtocolConstants.MINECRAFT_1_9_4 ) )
+        {
+            int pitchInt = Math.round( pitch );
+            unsafe().sendPacket( PlaySound.create1_9( sound, category.ordinal(), x, y, z, volume, pitchInt ) );
+        } else
+        {
+            unsafe().sendPacket( PlaySound.create( sound, category.ordinal(), x, y, z, volume, pitch ) );
+        }
+        new SoundPlayedEvent( this, position,
+                PlaySound.NAME_FUNCTION.apply( sound, getPendingConnection().getVersion() ), volume, pitch, category.ordinal() ).callEvent();
+    }
+    // IvanCord end
+
     // IvanCord start - comment this. Not used anywhere, so...
     /*
     // Waterfall start
