From dc25ddc41e7771c52927a6180c9bef9284f8e2bf Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Tue, 25 Jun 2019 20:20:49 +0300
Subject: [PATCH] Add option to choose between reconnect handlers

This patch adds json reconnect handler and a option to choose between yaml and json reconnect handlers.

diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
index 0643d08f..0135019f 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
@@ -271,5 +271,12 @@ public interface ProxyConfig
      */
     int getTCPFastOpenMode();
 
+    /**
+     * Gets the reconnect handler type
+     *
+     * @return type of the reconnect handler
+     */
+    String getReconnectHandlerType();
+
     // IvanCord end
 }
diff --git a/proxy/src/main/java/com/github/mrivanplays/ivancord/JsonReconnectHandler.java b/proxy/src/main/java/com/github/mrivanplays/ivancord/JsonReconnectHandler.java
new file mode 100644
index 00000000..db078765
--- /dev/null
+++ b/proxy/src/main/java/com/github/mrivanplays/ivancord/JsonReconnectHandler.java
@@ -0,0 +1,115 @@
+/*
+ * Copyright 2019 Ivan Pekov (MrIvanPlays)
+
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in the
+ * Software without restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+ * The above copyright notice and this permission notice shall be included in all copies
+ * or substantial portions of the Software.
+
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
+package com.github.mrivanplays.ivancord;
+
+import java.io.File;
+import java.io.IOException;
+import java.net.InetSocketAddress;
+import java.util.Map;
+import java.util.UUID;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.logging.Level;
+
+import net.md_5.bungee.api.AbstractReconnectHandler;
+import net.md_5.bungee.api.ProxyServer;
+import net.md_5.bungee.api.config.ServerInfo;
+import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.config.Configuration;
+import net.md_5.bungee.config.ConfigurationProvider;
+
+import com.github.mrivanplays.ivancord.util.Pair;
+
+public class JsonReconnectHandler extends AbstractReconnectHandler
+{
+
+    private Configuration configuration;
+    private File file = new File( "locations.json" );
+    private ConfigurationProvider provider;
+    private Map<UUID, Pair<String, InetSocketAddress>> data;
+
+    public JsonReconnectHandler()
+    {
+        this.provider = ConfigurationProvider.getJsonConfigurationProvider( true );
+        if ( !file.exists() )
+        {
+            if ( !file.getParentFile().exists() )
+            {
+                file.getParentFile().mkdirs();
+            }
+            try
+            {
+                file.createNewFile();
+            } catch ( IOException e )
+            {
+            }
+        }
+        try
+        {
+            configuration = provider.load( file );
+        } catch ( IOException e )
+        {
+            file.renameTo( new File( "locations.json.old" ) );
+            ProxyServer.getInstance().getLogger().log( Level.WARNING, "Could not load reconnect locations, resetting them" );
+        }
+        data = new ConcurrentHashMap<>();
+        for ( String key : configuration.getKeys() )
+        {
+            String value = configuration.getString( key );
+            String[] split = value.split( ";" );
+            String serverName = split[0];
+            String host = split[1];
+            String[] hostSplit = host.split( ":" );
+            String hostName = hostSplit[0];
+            int port = Integer.parseInt( hostSplit[1] );
+            data.put( UUID.fromString( key ), new Pair<>( serverName, InetSocketAddress.createUnresolved( hostName, port ) ) );
+        }
+    }
+
+    @Override
+    protected ServerInfo getStoredServer(ProxiedPlayer player)
+    {
+        return ProxyServer.getInstance().getServerInfo( data.get( player.getUniqueId() ).getKey() );
+    }
+
+    @Override
+    public void setServer(ProxiedPlayer player)
+    {
+        String server = player.getReconnectServer() != null ? player.getReconnectServer().getName() : player.getServer().getInfo().getName();
+        InetSocketAddress address = player.getPendingConnection().getVirtualHost();
+        configuration.set( player.getUniqueId().toString(), server + ";" + address.getHostString() + ":" + address.getPort() );
+    }
+
+    @Override
+    public void save()
+    {
+        try
+        {
+            provider.save( configuration, file );
+        } catch ( IOException e )
+        {
+            e.printStackTrace();
+        }
+    }
+
+    @Override
+    public void close()
+    {
+    }
+}
diff --git a/proxy/src/main/java/com/github/mrivanplays/ivancord/ReconnectHandlerType.java b/proxy/src/main/java/com/github/mrivanplays/ivancord/ReconnectHandlerType.java
new file mode 100644
index 00000000..a8fa08cc
--- /dev/null
+++ b/proxy/src/main/java/com/github/mrivanplays/ivancord/ReconnectHandlerType.java
@@ -0,0 +1,26 @@
+/*
+ * Copyright 2019 Ivan Pekov (MrIvanPlays)
+
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in the
+ * Software without restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+ * The above copyright notice and this permission notice shall be included in all copies
+ * or substantial portions of the Software.
+
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
+package com.github.mrivanplays.ivancord;
+
+public enum ReconnectHandlerType
+{
+    YAML,
+    JSON
+}
diff --git a/proxy/src/main/java/com/github/mrivanplays/ivancord/conf/IvanCordConfiguration.java b/proxy/src/main/java/com/github/mrivanplays/ivancord/conf/IvanCordConfiguration.java
index 0cc44338..67b40f5e 100644
--- a/proxy/src/main/java/com/github/mrivanplays/ivancord/conf/IvanCordConfiguration.java
+++ b/proxy/src/main/java/com/github/mrivanplays/ivancord/conf/IvanCordConfiguration.java
@@ -28,6 +28,7 @@ import lombok.experimental.Accessors;
 import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.conf.YamlConfig;
 
+import com.github.mrivanplays.ivancord.ReconnectHandlerType;
 import com.github.mrivanplays.ivancord.tcpfastopen.TCPFastOpenMode;
 
 @Getter
@@ -36,6 +37,7 @@ public class IvanCordConfiguration extends WaterfallConfiguration
 
     private boolean kickToLobby = true;
     private boolean disableTabListRewrite = false;
+    private String reconnectHandlerType = ReconnectHandlerType.YAML.name();
 
     @Accessors(fluent = true)
     private boolean isTCPFastOpenEnabled = true;
@@ -52,6 +54,7 @@ public class IvanCordConfiguration extends WaterfallConfiguration
         disableTabListRewrite = config.getBoolean( "disable_tablist_rewrite", disableTabListRewrite );
         isTCPFastOpenEnabled = config.getBoolean( "tcp_fast_open_enabled", isTCPFastOpenEnabled );
         getTCPFastOpenMode = setupTFO( config.getInt( "tcp_fast_open_mode", getTCPFastOpenMode ) );
+        reconnectHandlerType = setupReconnectHandlerType( config.getString( "reconnect_handler_type", reconnectHandlerType ) );
     }
 
     private int setupTFO(int incoming)
@@ -60,4 +63,16 @@ public class IvanCordConfiguration extends WaterfallConfiguration
         ProxyServer.getInstance().getLogger().log( Level.INFO, "TCP fast open mode is set to {0}", actual.name() );
         return actual.getValue();
     }
+
+    private String setupReconnectHandlerType(String incoming)
+    {
+        for ( ReconnectHandlerType type : ReconnectHandlerType.values() )
+        {
+            if ( type.name().toLowerCase().startsWith( incoming.toLowerCase() ) )
+            {
+                return type.name();
+            }
+        }
+        return ReconnectHandlerType.YAML.name();
+    }
 }
diff --git a/proxy/src/main/java/com/github/mrivanplays/ivancord/util/Pair.java b/proxy/src/main/java/com/github/mrivanplays/ivancord/util/Pair.java
new file mode 100644
index 00000000..c9c43c97
--- /dev/null
+++ b/proxy/src/main/java/com/github/mrivanplays/ivancord/util/Pair.java
@@ -0,0 +1,32 @@
+/*
+ * Copyright 2019 Ivan Pekov (MrIvanPlays)
+
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in the
+ * Software without restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+ * The above copyright notice and this permission notice shall be included in all copies
+ * or substantial portions of the Software.
+
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
+package com.github.mrivanplays.ivancord.util;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+
+@Getter
+@AllArgsConstructor
+public class Pair<K, V>
+{
+
+    private K key;
+    private V value;
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index c2ac2da5..0eefe68e 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -91,6 +91,8 @@ import net.md_5.bungee.query.RemoteQuery;
 import net.md_5.bungee.scheduler.BungeeScheduler;
 import net.md_5.bungee.util.CaseInsensitiveMap;
 
+import com.github.mrivanplays.ivancord.JsonReconnectHandler;
+import com.github.mrivanplays.ivancord.ReconnectHandlerType;
 import com.github.mrivanplays.ivancord.commands.CommandPlugins;
 import com.github.mrivanplays.ivancord.commands.op.CommandDeop;
 import com.github.mrivanplays.ivancord.commands.op.CommandOp;
@@ -308,6 +310,23 @@ public class BungeeCord extends ProxyServer
 
         isRunning = true;
 
+        // IvanCord start - setup reconnect handler
+        for ( ListenerInfo info : getConfig().getListeners() )
+        {
+            if ( !info.isForceDefault() && getReconnectHandler() == null )
+            {
+                if ( ReconnectHandlerType.valueOf( getConfig().getReconnectHandlerType() ) == ReconnectHandlerType.YAML )
+                {
+                    setReconnectHandler( new YamlReconnectHandler() );
+                } else
+                {
+                    setReconnectHandler( new JsonReconnectHandler() );
+                }
+                break;
+            }
+        }
+        // IvanCord end
+
         pluginManager.enablePlugins();
 
         if ( config.getThrottle() > 0 )
-- 
2.22.0.windows.1

