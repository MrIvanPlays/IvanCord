From d8541b666fe32bf59a5611ca001fa7588a3b8b9e Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Thu, 27 Jun 2019 17:02:00 +0300
Subject: [PATCH] Add default configuration support in Plugin

Including loading, reloading and saving a
default config.(json, yml)

diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java b/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
index 2e5ae4fbe..b176a77ff 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
@@ -2,14 +2,19 @@ package net.md_5.bungee.api.plugin;
 
 import com.google.common.util.concurrent.ThreadFactoryBuilder;
 import java.io.File;
+import java.io.IOException;
 import java.io.InputStream;
+import java.nio.file.Files;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
+import java.util.logging.Level;
 import java.util.logging.Logger;
 import lombok.Getter;
 import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.api.config.ConfigurationAdapter;
 import net.md_5.bungee.api.scheduler.GroupedThreadFactory;
+import net.md_5.bungee.config.Configuration;
+import net.md_5.bungee.config.ConfigurationProvider;
 
 /**
  * Represents any Plugin that may be loaded at runtime to enhance existing
@@ -26,6 +31,11 @@ public class Plugin
     private File file;
     @Getter
     private Logger logger;
+    // IvanCord start
+    private Configuration config;
+    private File configFile;
+    private Class<? extends ConfigurationProvider> configType;
+    // IvanCord end
 
     // Waterfall start - Allow plugins to use SLF4J for logging
     public org.slf4j.Logger getSLF4JLogger() {
@@ -56,6 +66,69 @@ public class Plugin
     {
     }
 
+    // IvanCord start
+    /**
+     * (Re)loads a default config.
+     *
+     * @param configType type of the config, which <bold>should</bold> be supported by default
+     */
+    public void loadConfig(Class<? extends ConfigurationProvider> configType)
+    {
+        this.configType = configType;
+        if ( getDataFolder().exists() )
+        {
+            getDataFolder().mkdirs();
+        }
+        if ( !configFile.exists() )
+        {
+            String fileExtension = configType.getSimpleName().contains( "Json" ) ? ".json" : ".yml";
+            try ( InputStream inputStream = getResourceAsStream( "config" + fileExtension ) )
+            {
+                Files.copy( inputStream, configFile.toPath() );
+            } catch ( IOException e )
+            {
+                getLogger().log( Level.SEVERE, "Could not copy default config" + fileExtension, e );
+            }
+        }
+        try
+        {
+            config = ConfigurationProvider.getProvider( configType ).load( file );
+        } catch ( IOException e )
+        {
+            getLogger().log( Level.SEVERE, "Could not load configuration defaults", e );
+        }
+    }
+
+    /**
+     * Gets the default configuration
+     *
+     * @return configuration
+     * @throws IllegalArgumentException if config not loaded
+     */
+    public Configuration getConfig()
+    {
+        if ( config == null )
+        {
+            throw new IllegalArgumentException( "(Default) config not loaded" );
+        }
+        return config;
+    }
+
+    /**
+     * Saves the configuration changes (if have)
+     */
+    public void saveConfig()
+    {
+        try
+        {
+            ConfigurationProvider.getProvider( configType ).save( config, configFile );
+        } catch ( IOException e )
+        {
+            getLogger().log( Level.SEVERE, "Could not save configuration", e );
+        }
+    }
+    // IvanCord end
+
     /**
      * Gets the data folder where this plugin may store arbitrary data. It will
      * be a child of {@link ProxyServer#getPluginsFolder()}.
@@ -92,6 +165,9 @@ public class Plugin
         this.description = description;
         this.file = description.getFile();
         this.logger = Logger.getLogger(description.getName()); // Waterfall - Handle plugin prefixes in implementation
+        // IvanCord start
+        this.configFile = new File( getDataFolder(), "config.yml" );
+        // IvanCord end
     }
 
     //
-- 
2.22.0.windows.1

