From 2b059042db82686e9792daf92802588f697dcdb5 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Sun, 30 Jun 2019 21:13:31 +0300
Subject: [PATCH] Remove some of the TODOs


diff --git a/api/src/main/java/io/github/waterfallmc/waterfall/QueryResult.java b/api/src/main/java/io/github/waterfallmc/waterfall/QueryResult.java
index 9a262c8a..266a46e3 100644
--- a/api/src/main/java/io/github/waterfallmc/waterfall/QueryResult.java
+++ b/api/src/main/java/io/github/waterfallmc/waterfall/QueryResult.java
@@ -56,4 +56,23 @@ public class QueryResult {
      */
     @NonNull
     private String version;
+    // IvanCord start
+    /**
+     * The plugins to return for this server
+     */
+    private final List<PluginInfo> plugins = new java.util.LinkedList<>();
+
+    /**
+     * Represents a PluginInfo, containing a name and version of a plugin
+     */
+    @Data
+    public static final class PluginInfo
+    {
+        @NonNull
+        private final String name;
+
+        @NonNull
+        private final String version;
+    }
+    // IvanCord end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
index 0135019f..f05118d1 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyConfig.java
@@ -278,5 +278,12 @@ public interface ProxyConfig
      */
     String getReconnectHandlerType();
 
+    /**
+     * Gets the connect timeout milliseconds
+     *
+     * @return connect timeout, specified in milliseconds
+     */
+    int getConnectTimeoutMillis();
+
     // IvanCord end
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/ServerConnectRequest.java b/api/src/main/java/net/md_5/bungee/api/ServerConnectRequest.java
index ad2ebdea..c4922a69 100644
--- a/api/src/main/java/net/md_5/bungee/api/ServerConnectRequest.java
+++ b/api/src/main/java/net/md_5/bungee/api/ServerConnectRequest.java
@@ -73,6 +73,11 @@ public class ServerConnectRequest
     public static class Builder
     {
 
-        private int connectTimeout = 5000; // TODO: Configurable
+        // IvanCord start - remove to do "Configurable"
+        /*
+        private int connectTimeout = 5000;
+         */
+        private int connectTimeout = ProxyServer.getInstance().getConfig().getConnectTimeoutMillis();
+        // IvanCord end
     }
 }
diff --git a/proxy/src/main/java/com/github/mrivanplays/ivancord/conf/IvanCordConfiguration.java b/proxy/src/main/java/com/github/mrivanplays/ivancord/conf/IvanCordConfiguration.java
index 49f76f0a..c34e89b9 100644
--- a/proxy/src/main/java/com/github/mrivanplays/ivancord/conf/IvanCordConfiguration.java
+++ b/proxy/src/main/java/com/github/mrivanplays/ivancord/conf/IvanCordConfiguration.java
@@ -38,6 +38,7 @@ public class IvanCordConfiguration extends WaterfallConfiguration
     private boolean kickToLobby = true;
     private boolean disableTabListRewrite = isOnlineMode();
     private String reconnectHandlerType = ReconnectHandlerType.YAML.name();
+    private int connectTimeoutMillis = 5000;
 
     @Accessors(fluent = true)
     private boolean isTCPFastOpenEnabled = true;
@@ -55,6 +56,7 @@ public class IvanCordConfiguration extends WaterfallConfiguration
         isTCPFastOpenEnabled = config.getBoolean( "tcp_fast_open_enabled", isTCPFastOpenEnabled );
         getTCPFastOpenMode = setupTFO( config.getInt( "tcp_fast_open_mode", getTCPFastOpenMode ) );
         reconnectHandlerType = setupReconnectHandlerType( config.getString( "reconnect_handler_type", reconnectHandlerType ) );
+        connectTimeoutMillis = config.getInt( "connect_timeout_millis", connectTimeoutMillis );
     }
 
     private int setupTFO(int incoming)
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
index 4c0637b9..592d5b16 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeServerInfo.java
@@ -1,6 +1,7 @@
 package net.md_5.bungee;
 
 import com.google.common.base.Preconditions;
+import com.google.common.collect.Iterables;
 import io.netty.bootstrap.Bootstrap;
 import io.netty.channel.ChannelFuture;
 import io.netty.channel.ChannelFutureListener;
@@ -100,13 +101,16 @@ public class BungeeServerInfo implements ServerInfo
         sendData( channel, data, true );
     }
 
-    // TODO: Don't like this method
+    // IvanCord start - remove to do "Don't like this method"
+    // We're rewriting it fully
     @Override
     public boolean sendData(String channel, byte[] data, boolean queue)
     {
         Preconditions.checkNotNull( channel, "channel" );
         Preconditions.checkNotNull( data, "data" );
 
+        // old code
+        /*
         Server server;
 
         synchronized (players) {
@@ -121,6 +125,24 @@ public class BungeeServerInfo implements ServerInfo
                 packetQueue.add(new PluginMessage(channel, data, false));
             }
         }
+         */
+
+        // here's ours
+        if ( players.isEmpty() )
+        {
+            if ( queue )
+            {
+                synchronized ( packetQueue )
+                {
+                    packetQueue.add( new PluginMessage( channel, data, false ) );
+                }
+            }
+        } else
+        {
+            Server server = Iterables.getFirst( players, null ).getServer();
+            server.sendData( channel, data );
+            return true;
+        }
 
         return false;
     }
@@ -153,7 +175,12 @@ public class BungeeServerInfo implements ServerInfo
                 .channel( PipelineUtils.getChannel() )
                 .group( BungeeCord.getInstance().workerEventLoopGroup )
                 .handler( PipelineUtils.BASE )
-                .option( ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000 ) // TODO: Configurable
+                // IvanCord - remove to do "Configurable"
+                /*
+                .option( ChannelOption.CONNECT_TIMEOUT_MILLIS, 5000 )
+                 */
+                .option( ChannelOption.CONNECT_TIMEOUT_MILLIS, BungeeCord.getInstance().config.getConnectTimeoutMillis() )
+                // IvanCord end
                 .remoteAddress( getAddress() )
                 .connect()
                 .addListener( listener );
diff --git a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
index 8f587aa5..c7624629 100644
--- a/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
+++ b/proxy/src/main/java/net/md_5/bungee/ServerConnector.java
@@ -352,7 +352,10 @@ public class ServerConnector extends PacketHandler
         }
 
         // Add to new server
-        // TODO: Move this to the connected() method of DownstreamBridge
+        // IvanCord - remove the to do "Move this to the connected() method of DownstreamBridge"
+        // the to do was removed because if you move this where it is said, the dimension change
+        // and the other stuff won't happen. Because of no dimension change set to false the
+        // connection will always get disconnected from the proxy if cant connect to the server he want.
         target.addPlayer( user );
         user.getPendingConnects().remove( target );
         user.setServerJoinQueue( null );
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index a8c9a650..0787d821 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -296,7 +296,12 @@ public final class UserConnection implements ProxiedPlayer
     public void connect(ServerInfo info, final Callback<Boolean> callback, final boolean retry, ServerConnectEvent.Reason reason)
     {
         // Waterfall start
-        connect(info, callback, retry, reason, 5000); // todo: configurable
+        // IvanCord start - remove to do "configurable"
+        /*
+        connect(info, callback, retry, reason, 5000);
+         */
+        connect( info, callback, retry, reason, bungee.getConfig().getConnectTimeoutMillis() );
+        // IvanCord end
     }
     public void connect(ServerInfo info, final Callback<Boolean> callback, final boolean retry, int timeout) {
         connect(info, callback, retry, ServerConnectEvent.Reason.PLUGIN, timeout);
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index cec27cb7..fe98de28 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -32,6 +32,8 @@ import net.md_5.bungee.protocol.packet.PlayerPosition;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.TabCompleteRequest;
 import net.md_5.bungee.protocol.packet.TabCompleteResponse;
+import net.md_5.bungee.tab.ServerUnique;
+
 import com.github.mrivanplays.ivancord.api.Position; // IvanCord
 
 public class UpstreamBridge extends PacketHandler
@@ -72,9 +74,9 @@ public class UpstreamBridge extends PacketHandler
             // Manually remove from everyone's tab list
             // since the packet from the server arrives
             // too late
-            // TODO: This should only done with server_unique
-            //       tab list (which is the only one supported
-            //       currently)
+            // IvanCord start - remove to do "This should only done with server_unique tab list"
+            if ( con.getTabListHandler() instanceof ServerUnique )
+            {
             PlayerListItem packet = new PlayerListItem();
             packet.setAction( PlayerListItem.Action.REMOVE_PLAYER );
             PlayerListItem.Item item = new PlayerListItem.Item();
@@ -87,6 +89,7 @@ public class UpstreamBridge extends PacketHandler
             {
                 player.unsafe().sendPacket( packet );
             }
+            } // IvanCord end
             con.getServer().disconnect( "Quitting" );
         }
     }
diff --git a/query/src/main/java/net/md_5/bungee/query/QueryHandler.java b/query/src/main/java/net/md_5/bungee/query/QueryHandler.java
index ac99d02c..6df3bc64 100644
--- a/query/src/main/java/net/md_5/bungee/query/QueryHandler.java
+++ b/query/src/main/java/net/md_5/bungee/query/QueryHandler.java
@@ -10,6 +10,7 @@ import io.netty.channel.ChannelHandlerContext;
 import io.netty.channel.SimpleChannelInboundHandler;
 import io.netty.channel.socket.DatagramPacket;
 import java.net.InetAddress;
+import java.util.Iterator; // IvanCord
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
@@ -22,6 +23,7 @@ import lombok.RequiredArgsConstructor;
 import net.md_5.bungee.api.ProxyServer;
 import net.md_5.bungee.api.config.ListenerInfo;
 import net.md_5.bungee.api.connection.ProxiedPlayer;
+import net.md_5.bungee.api.plugin.PluginDescription;
 
 @RequiredArgsConstructor
 public class QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
@@ -32,6 +34,7 @@ public class QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
     /*========================================================================*/
     private final Random random = new Random();
     private final Cache<InetAddress, QuerySession> sessions = CacheBuilder.newBuilder().expireAfterWrite( 30, TimeUnit.SECONDS ).build();
+    private volatile List<QueryResult.PluginInfo> cachedPluginInfoList = null; // IvanCord
 
     private void writeShort(ByteBuf buf, int s)
     {
@@ -98,13 +101,33 @@ public class QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
             {
                 throw new IllegalStateException( "No session!" );
             }
-
+            // IvanCord start
+            List<QueryResult.PluginInfo> plugins = this.cachedPluginInfoList;
+            if ( plugins == null )
+            {
+                synchronized ( this )
+                {
+                    if ( cachedPluginInfoList == null )
+                    {
+                        cachedPluginInfoList = plugins = bungee.getPluginManager().getPlugins()
+                                .parallelStream()
+                                .map( plugin ->
+                                {
+                                    PluginDescription pluginDescription = plugin.getDescription();
+                                    return new QueryResult.PluginInfo( pluginDescription.getName(), pluginDescription.getVersion() );
+                                } )
+                                .collect( Collectors.toList() );
+                    }
+                }
+            }
+            // IvanCord end
             // Waterfall start
             List<String> players = bungee.getPlayers().stream().map(ProxiedPlayer::getName).collect(Collectors.toList());
 
             ProxyQueryEvent event = new ProxyQueryEvent(listener, new QueryResult(listener.getMotd(), "SMP", "Waterfall_Proxy",
                     bungee.getOnlineCount(), listener.getMaxPlayers(), listener.getHost().getPort(),
                     listener.getHost().getHostString(), "MINECRAFT",  players, bungee.getGameVersion()));
+            event.getResult().getPlugins().addAll( plugins ); // IvanCord
             QueryResult result = bungee.getPluginManager().callEvent(event).getResult();
             // Waterfall end
 
@@ -138,7 +161,24 @@ public class QueryHandler extends SimpleChannelInboundHandler<DatagramPacket>
                 // Start Extra Info
                 data.put( "game_id", result.getGameId() );
                 data.put( "version", result.getVersion() );
-                data.put( "plugins", "" ); // TODO: Allow population?
+                // IvanCord start - remove to do "Allow population?"
+                /*
+                data.put( "plugins", "" );
+                 */
+                StringBuilder pluginsString = new StringBuilder();
+                pluginsString.append( bungee.getName() ).append( ' ' ).append( bungee.getGameVersion() ).append( ':' ).append( ' ' );
+                Iterator<QueryResult.PluginInfo> iterator = plugins.iterator();
+                while ( iterator.hasNext() )
+                {
+                    QueryResult.PluginInfo pluginInfo = iterator.next();
+                    pluginsString.append( pluginInfo.getName() ).append( ' ' ).append( pluginInfo.getVersion() );
+                    if ( iterator.hasNext() )
+                    {
+                        pluginsString.append( ';' ).append( ' ' );
+                    }
+                }
+                data.put( "plugins", pluginsString.toString() );
+                // IvanCord end
                 // End Extra Info
                 data.put( "map", result.getWorldName() );
                 data.put( "numplayers", Integer.toString( result.getOnlinePlayers() ) );
-- 
2.22.0.windows.1

