From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Tue, 2 Jul 2019 16:31:36 +0300
Subject: [PATCH] Add services manager


diff --git a/api/src/main/java/com/mrivanplays/ivancord/api/event/ServiceRegisteredEvent.java b/api/src/main/java/com/mrivanplays/ivancord/api/event/ServiceRegisteredEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..4b280f2301632bd22422d96bad0c1f73e0de38e3
--- /dev/null
+++ b/api/src/main/java/com/mrivanplays/ivancord/api/event/ServiceRegisteredEvent.java
@@ -0,0 +1,22 @@
+package com.mrivanplays.ivancord.api.event;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import net.md_5.bungee.api.plugin.Event;
+
+import com.mrivanplays.ivancord.api.plugin.RegisteredServiceProvider;
+
+/**
+ * Event, called when a service have
+ * got registered
+ */
+@Getter
+@AllArgsConstructor
+public class ServiceRegisteredEvent extends Event
+{
+
+    /**
+     * The service provider registered
+     */
+    private RegisteredServiceProvider<?> serviceProvider;
+}
diff --git a/api/src/main/java/com/mrivanplays/ivancord/api/event/ServiceUnregisteredEvent.java b/api/src/main/java/com/mrivanplays/ivancord/api/event/ServiceUnregisteredEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..350ba09a852d4d7b9a8908e40072038cfcc5ff4f
--- /dev/null
+++ b/api/src/main/java/com/mrivanplays/ivancord/api/event/ServiceUnregisteredEvent.java
@@ -0,0 +1,22 @@
+package com.mrivanplays.ivancord.api.event;
+
+import lombok.AllArgsConstructor;
+import lombok.Getter;
+import net.md_5.bungee.api.plugin.Event;
+
+import com.mrivanplays.ivancord.api.plugin.RegisteredServiceProvider;
+
+/**
+ * Event, called when a service have
+ * got unregistered
+ */
+@Getter
+@AllArgsConstructor
+public class ServiceUnregisteredEvent extends Event
+{
+
+    /**
+     * The service provider unregistered
+     */
+    private RegisteredServiceProvider<?> serviceProvider;
+}
diff --git a/api/src/main/java/com/mrivanplays/ivancord/api/plugin/RegisteredServiceProvider.java b/api/src/main/java/com/mrivanplays/ivancord/api/plugin/RegisteredServiceProvider.java
new file mode 100644
index 0000000000000000000000000000000000000000..bff68b54935b9631184a553f6ff2a89852ec44ba
--- /dev/null
+++ b/api/src/main/java/com/mrivanplays/ivancord/api/plugin/RegisteredServiceProvider.java
@@ -0,0 +1,40 @@
+package com.mrivanplays.ivancord.api.plugin;
+
+import lombok.AllArgsConstructor;
+import lombok.EqualsAndHashCode;
+import lombok.Getter;
+import lombok.ToString;
+import net.md_5.bungee.api.plugin.Plugin;
+
+/**
+ * Represents a registered service provider
+ *
+ * @param <T> stored type
+ */
+@Getter
+@AllArgsConstructor
+@EqualsAndHashCode
+@ToString
+public class RegisteredServiceProvider<T>
+{
+
+    /**
+     * The plugin, who registered this provider
+     */
+    private Plugin plugin;
+
+    /**
+     * The service representing this provider
+     */
+    private Class<T> service;
+
+    /**
+     * The provider
+     */
+    private T provider;
+
+    /**
+     * Priority of the provider
+     */
+    private int priority;
+}
diff --git a/api/src/main/java/com/mrivanplays/ivancord/api/plugin/ServicePriority.java b/api/src/main/java/com/mrivanplays/ivancord/api/plugin/ServicePriority.java
new file mode 100644
index 0000000000000000000000000000000000000000..fc174800778f3d3a16c1beafb5f46bd381ae6294
--- /dev/null
+++ b/api/src/main/java/com/mrivanplays/ivancord/api/plugin/ServicePriority.java
@@ -0,0 +1,23 @@
+package com.mrivanplays.ivancord.api.plugin;
+
+/**
+ * Represents a service priority
+ */
+public class ServicePriority
+{
+
+    /**
+     * The service is of high importance
+     */
+    public static final int HIGH = -10;
+
+    /**
+     * The service is of normal importance
+     */
+    public static final int NORMAL = 1;
+
+    /**
+     * The service is of low importance
+     */
+    public static final int LOW = 10;
+}
diff --git a/api/src/main/java/com/mrivanplays/ivancord/api/plugin/ServicesManager.java b/api/src/main/java/com/mrivanplays/ivancord/api/plugin/ServicesManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..68a64e45319c32c7d5037c305b4eda030141937b
--- /dev/null
+++ b/api/src/main/java/com/mrivanplays/ivancord/api/plugin/ServicesManager.java
@@ -0,0 +1,109 @@
+package com.mrivanplays.ivancord.api.plugin;
+
+import java.util.Collection;
+import java.util.Optional;
+
+import net.md_5.bungee.api.plugin.Plugin;
+
+/**
+ * Represents a manager of services, registered by plugins and probably used by
+ * other plugins
+ */
+public interface ServicesManager
+{
+
+    /**
+     * Registers a service and sorts it by the specified priority.
+     *
+     * @param plugin   plugin registerer
+     * @param service  service registered
+     * @param provider service instance
+     * @param priority priority of the service. should be a number of which: -10, 1 or 10
+     * @param <T>      type
+     */
+    <T> void register(Plugin plugin, Class<T> service, T provider, int priority);
+
+    /**
+     * Registers a service
+     *
+     * @param plugin   plugin registerer
+     * @param service  service registered
+     * @param provider service instance
+     * @param <T>      type
+     * @see #register(Plugin, Class, Object, int)
+     */
+    default <T> void register(Plugin plugin, Class<T> service, T provider)
+    {
+        register( plugin, service, provider, ServicePriority.NORMAL );
+    }
+
+    /**
+     * Unregisters a service
+     *
+     * @param plugin  plugin registerer of this service
+     * @param service service class
+     * @param <T>     type
+     */
+    <T> void unregister(Plugin plugin, Class<T> service);
+
+    /**
+     * Unregisters a service
+     *
+     * @param service  the service's class you want to unregister
+     * @param provider the provider you want to unregister
+     * @param <T>      type
+     */
+    <T> void unregister(Class<T> service, T provider);
+
+    /**
+     * Unregisters all services, registered by the specified plugin
+     *
+     * @param plugin the plugin you wish to unregister its services
+     * @return the count of services unregistered
+     */
+    int unregisterAll(Plugin plugin);
+
+    /**
+     * Gets registration for the specified service
+     *
+     * @param service service class
+     * @param <T>     type
+     * @return service provider if registered, otherwise empty optional
+     */
+    <T> Optional<RegisteredServiceProvider<T>> getRegistration(Class<T> service);
+
+    /**
+     * Checks if the specified service has a registration
+     *
+     * @param service the service's class you want to check
+     * @return <code>true</code> if has
+     */
+    default boolean hasRegistration(Class<?> service)
+    {
+        return getRegistrations( service ).size() != 0;
+    }
+
+    /**
+     * Returns a sorted by priority collection of all registered services by the
+     * specified plugin.
+     *
+     * @param plugin the plugin you wish to get the registrations of
+     * @return collection with the services, or empty collection if no services registered
+     */
+    Collection<RegisteredServiceProvider<?>> getRegistrations(Plugin plugin);
+
+    /**
+     * Returns an unmodifiable copy of all registrations for the specified service
+     *
+     * @param service the service of which you want to get the registrations
+     * @return registrations or empty collection if no found
+     */
+    Collection<RegisteredServiceProvider<?>> getRegistrations(Class<?> service);
+
+    /**
+     * Returns a unmodifiable collection of the know services' classes.
+     *
+     * @return known services, or empty if no services registered
+     */
+    Collection<Class<?>> getKnownServices();
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
index a401133595c203de499483ced0d2dda09ab147c8..1a789e83a7e14bfbb4c2254a0be1018691ec2d2a 100644
--- a/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
+++ b/api/src/main/java/net/md_5/bungee/api/ProxyServer.java
@@ -17,6 +17,8 @@ import net.md_5.bungee.api.plugin.Plugin;
 import net.md_5.bungee.api.plugin.PluginManager;
 import net.md_5.bungee.api.scheduler.TaskScheduler;
 
+import com.mrivanplays.ivancord.api.plugin.ServicesManager; // IvanCord
+
 public abstract class ProxyServer
 {
 
@@ -327,4 +329,15 @@ public abstract class ProxyServer
      */
     public abstract Title createTitle();
 
+    // IvanCord start
+
+    /**
+     * Gets the services manager
+     *
+     * @return services manager
+     */
+    public abstract ServicesManager getServicesManager();
+
+    // IvanCord end
+
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
index f442091e2ce13a77df24398b592b75d3d31a7a6c..a22709e21ab582461da7059e74f520ca23bc91e6 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
@@ -579,6 +579,7 @@ public final class PluginManager
         }
         unregisterListeners( plugin );
         unregisterCommands( plugin );
+        proxy.getServicesManager().unregisterAll( plugin );
         proxy.getScheduler().cancel( plugin );
         plugin.getExecutorService().shutdownNow();
         plugins.remove( plugin.getDescription().getName(), plugin );
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/SimpleServicesManager.java b/proxy/src/main/java/com/mrivanplays/ivancord/SimpleServicesManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..96063a5982f7f403c3f26998542517e18971ffbe
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/SimpleServicesManager.java
@@ -0,0 +1,238 @@
+package com.mrivanplays.ivancord;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+import java.util.Comparator;
+import java.util.List;
+import java.util.Map;
+import java.util.Optional;
+import java.util.Set;
+import java.util.TreeSet;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.locks.Lock;
+import java.util.concurrent.locks.ReentrantLock;
+import java.util.stream.Collectors;
+
+import com.google.common.base.Preconditions;
+import com.google.common.collect.ImmutableList;
+import com.mrivanplays.ivancord.api.event.ServiceRegisteredEvent;
+import com.mrivanplays.ivancord.api.event.ServiceUnregisteredEvent;
+import com.mrivanplays.ivancord.api.plugin.RegisteredServiceProvider;
+import com.mrivanplays.ivancord.api.plugin.ServicesManager;
+import net.md_5.bungee.api.plugin.Plugin;
+
+public class SimpleServicesManager implements ServicesManager
+{
+
+    private final Map<Class<?>, Set<RegisteredServiceProvider<?>>> providers = new ConcurrentHashMap<>();
+    private final Lock providersLock = new ReentrantLock();
+    private final Comparator<RegisteredServiceProvider<?>> COMPARATOR = Comparator.comparingInt( RegisteredServiceProvider::getPriority );
+
+    @Override
+    public <T> void register(Plugin plugin, Class<T> service, T provider, int priority)
+    {
+        Preconditions.checkArgument( priority == -10 || priority == 1 || priority == 10, "Priority should be -10, 1 or 10" );
+        RegisteredServiceProvider<T> createdProvider = new RegisteredServiceProvider<>( plugin, service, provider, priority );
+        providersLock.lock();
+        try
+        {
+            if ( providers.containsKey( service ) )
+            {
+                Set<RegisteredServiceProvider<?>> registered = providers.get( service );
+                registered.add( createdProvider );
+                providers.replace( service, registered );
+            } else
+            {
+                Set<RegisteredServiceProvider<?>> registered = new TreeSet<>( COMPARATOR );
+                registered.add( createdProvider );
+                providers.put( service, registered );
+            }
+        } finally
+        {
+            providersLock.unlock();
+        }
+        new ServiceRegisteredEvent( createdProvider ).callEvent();
+    }
+
+    @Override
+    public <T> void unregister(Plugin plugin, Class<T> service)
+    {
+        providersLock.lock();
+        try
+        {
+            if ( !providers.containsKey( service ) )
+            {
+                // no providers found for this service, stopping code
+                return;
+            }
+            Set<RegisteredServiceProvider<?>> registered = providers.get( service );
+            Collection<RegisteredServiceProvider<?>> toRemove = new TreeSet<>( COMPARATOR );
+            for ( RegisteredServiceProvider<?> provider : registered )
+            {
+                if ( provider.getPlugin().getDescription().equals( plugin.getDescription() ) )
+                {
+                    toRemove.add( provider );
+                }
+            }
+            for ( RegisteredServiceProvider<?> providerRemoved : toRemove )
+            {
+                registered.remove( providerRemoved );
+                new ServiceUnregisteredEvent( providerRemoved ).callEvent();
+            }
+            providers.replace( service, registered );
+        } finally
+        {
+            providersLock.unlock();
+        }
+    }
+
+    @Override
+    public <T> void unregister(Class<T> service, T provider)
+    {
+        providersLock.lock();
+        try
+        {
+            if ( !providers.containsKey( service ) )
+            {
+                return;
+            }
+            Set<RegisteredServiceProvider<?>> registered = providers.get( service );
+            RegisteredServiceProvider<?> toRemove = null;
+            for ( RegisteredServiceProvider<?> registryProvider : registered )
+            {
+                if ( registryProvider.getProvider().equals( provider ) )
+                {
+                    toRemove = registryProvider;
+                    break;
+                }
+            }
+            if ( toRemove != null )
+            {
+                registered.remove( toRemove );
+                new ServiceUnregisteredEvent( toRemove ).callEvent();
+                providers.replace( service, registered );
+            }
+        } finally
+        {
+            providersLock.unlock();
+        }
+    }
+
+    @Override
+    public int unregisterAll(Plugin plugin)
+    {
+        int count = 0;
+        for ( RegisteredServiceProvider<?> provider : getValues() )
+        {
+            if ( provider.getPlugin().getDescription().equals( plugin.getDescription() ) )
+            {
+                count++;
+                providersLock.lock();
+                try
+                {
+                    Set<RegisteredServiceProvider<?>> servicesForProvider = providers.get( provider.getService() );
+                    servicesForProvider.remove( provider );
+                    providers.replace( provider.getService(), servicesForProvider );
+                } finally
+                {
+                    providersLock.unlock();
+                }
+                new ServiceUnregisteredEvent( provider ).callEvent();
+            }
+        }
+        return count;
+    }
+
+    @Override
+    @SuppressWarnings("unchecked")
+    public <T> Optional<RegisteredServiceProvider<T>> getRegistration(Class<T> service)
+    {
+        providersLock.lock();
+        try
+        {
+            List<RegisteredServiceProvider<?>> registered = new ArrayList<>( providers.get( service ) );
+            registered.sort( COMPARATOR );
+            if ( registered.isEmpty() )
+            {
+                return Optional.empty();
+            } else
+            {
+                return Optional.of( (RegisteredServiceProvider<T>) registered.get( 0 ) );
+            }
+        } finally
+        {
+            providersLock.unlock();
+        }
+    }
+
+    @Override
+    public Collection<RegisteredServiceProvider<?>> getRegistrations(Plugin plugin)
+    {
+        Set<RegisteredServiceProvider<?>> collection = new TreeSet<>( COMPARATOR );
+        providersLock.lock();
+        try
+        {
+            for ( Map.Entry<Class<?>, Set<RegisteredServiceProvider<?>>> entry : providers.entrySet() )
+            {
+                if ( entry.getValue().parallelStream().anyMatch( provider -> provider.getPlugin().getDescription().equals( plugin.getDescription() ) ) )
+                {
+                    collection.addAll( entry.getValue().parallelStream()
+                            .filter( provider -> provider.getPlugin().getDescription().equals( plugin.getDescription() ) )
+                            .collect( Collectors.toSet() ) );
+                }
+            }
+        } finally
+        {
+            providersLock.unlock();
+        }
+        return Collections.unmodifiableCollection( collection );
+    }
+
+    @Override
+    public Collection<RegisteredServiceProvider<?>> getRegistrations(Class<?> service)
+    {
+        providersLock.lock();
+        try
+        {
+            if ( providers.get( service ) == null )
+            {
+                return Collections.emptyList();
+            }
+            return ImmutableList.copyOf( providers.get( service ) );
+        } finally
+        {
+            providersLock.unlock();
+        }
+    }
+
+    @Override
+    public Collection<Class<?>> getKnownServices()
+    {
+        providersLock.lock();
+        try
+        {
+            return Collections.unmodifiableCollection( providers.keySet() );
+        } finally
+        {
+            providersLock.unlock();
+        }
+    }
+
+    private Collection<RegisteredServiceProvider<?>> getValues()
+    {
+        Collection<RegisteredServiceProvider<?>> values = new TreeSet<>();
+        providersLock.lock();
+        try
+        {
+            for ( Set<RegisteredServiceProvider<?>> perClass : providers.values() )
+            {
+                values.addAll( perClass );
+            }
+        } finally
+        {
+            providersLock.unlock();
+        }
+        return values;
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index b44daac2993c04a96772acf1c3301623ffa4b47e..485f952857c59b61fae92acd808dd6bd293da238 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -110,6 +110,8 @@ import com.mrivanplays.ivancord.commands.op.CommandOp;
 import com.mrivanplays.ivancord.JsonReconnectHandler;
 import com.mrivanplays.ivancord.ReconnectHandlerType;
 import com.mrivanplays.ivancord.modules.YamlReconnectHandler;
+import com.mrivanplays.ivancord.SimpleServicesManager;
+import com.mrivanplays.ivancord.api.plugin.ServicesManager;
 // IvanCord end
 
 /**
@@ -198,6 +200,11 @@ public class BungeeCord extends ProxyServer
     private final ModuleManager moduleManager = new ModuleManager();
      */
 
+    // IvanCord start
+    @Getter
+    private ServicesManager servicesManager;
+    // IvanCord end
+
     {
         // TODO: Proper fallback when we interface the manager
         registerChannel( "BungeeCord" );
@@ -315,6 +322,10 @@ public class BungeeCord extends ProxyServer
         pluginsFolder.mkdir();
         pluginManager.detectPlugins( pluginsFolder );
 
+        // IvanCord start
+        servicesManager = new SimpleServicesManager();
+        // IvanCord end
+
         pluginManager.loadPlugins();
         config.load();
 
