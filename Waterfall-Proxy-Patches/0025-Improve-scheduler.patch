From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MrIvanPlays <ivan@mrivanplays.com>
Date: Sat, 1 Aug 2020 16:20:52 +0300
Subject: [PATCH] Improve scheduler


diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java b/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
index 8a2474878121c84b21c1d52112996b1e025f123c..271d0412a065283dae526b3931060aa90248ef77 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/Plugin.java
@@ -212,11 +212,13 @@ public class Plugin
     }
 
     //
-    private ExecutorService service;
+    //private ExecutorService service; // IvanCord
 
     @Deprecated
     public ExecutorService getExecutorService()
     {
+        // IvanCord start - rewrite this
+        /*
         if ( service == null )
         {
             String name = ( getDescription() == null ) ? "unknown" : getDescription().getName();
@@ -224,6 +226,11 @@ public class Plugin
                     .setThreadFactory( new GroupedThreadFactory( this, name ) ).build() );
         }
         return service;
+         */
+        // actually returns the global scheduler executor service
+        // and not actually plugin's executor service
+        return proxy.getScheduler().unsafe().getExecutorService( this );
+        // IvanCord end
     }
     //
 }
diff --git a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
index 971c02d81e1410cf23c52343ecb5c37bb0f6cc69..ad096e6575ef1798346f191f41e1e9fec295d954 100644
--- a/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
+++ b/api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java
@@ -609,7 +609,7 @@ public final class PluginManager
         unregisterCommands( plugin );
         proxy.getServicesManager().unregisterAll( plugin );
         proxy.getScheduler().cancel( plugin );
-        plugin.getExecutorService().shutdownNow();
+        //plugin.getExecutorService().shutdownNow(); // executor service is now global
         plugins.remove( plugin.getDescription().getName(), plugin );
         callEvent( new PluginDisabledEvent( plugin ) );
         System.gc();
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/scheduler/SchedulerExecutor.java b/proxy/src/main/java/com/mrivanplays/ivancord/scheduler/SchedulerExecutor.java
new file mode 100644
index 0000000000000000000000000000000000000000..6814c51887086b47c08048c4773dd3d1c36fb553
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/scheduler/SchedulerExecutor.java
@@ -0,0 +1,60 @@
+package com.mrivanplays.ivancord.scheduler;
+
+import java.util.Collections;
+import java.util.List;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.SynchronousQueue;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
+public class SchedulerExecutor extends ThreadPoolExecutor
+{
+
+    public static SchedulerExecutor create()
+    {
+        return new SchedulerExecutor(
+            0, Integer.MAX_VALUE,
+            60L, TimeUnit.SECONDS,
+            new SynchronousQueue<>(), new SchedulerThreadFactory()
+        );
+    }
+
+    private SchedulerExecutor(
+        int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit,
+        BlockingQueue<Runnable> workQueue, ThreadFactory factory
+    )
+    {
+        super( corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue, factory );
+    }
+
+    @Override
+    public void shutdown()
+    {
+        // NOOP
+    }
+
+    @Override
+    public List<Runnable> shutdownNow()
+    {
+        // NOOP
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean awaitTermination(long timeout, TimeUnit unit) throws InterruptedException
+    {
+        // NOOP
+        return false;
+    }
+
+    public List<Runnable> shutdownNow0()
+    {
+        return super.shutdownNow();
+    }
+
+    public boolean awaitTermination0(long timeout, TimeUnit unit) throws InterruptedException
+    {
+        return super.awaitTermination( timeout, unit );
+    }
+}
diff --git a/proxy/src/main/java/com/mrivanplays/ivancord/scheduler/SchedulerThreadFactory.java b/proxy/src/main/java/com/mrivanplays/ivancord/scheduler/SchedulerThreadFactory.java
new file mode 100644
index 0000000000000000000000000000000000000000..00ff4769884de0b635144bc7ca134f355510a3f4
--- /dev/null
+++ b/proxy/src/main/java/com/mrivanplays/ivancord/scheduler/SchedulerThreadFactory.java
@@ -0,0 +1,19 @@
+package com.mrivanplays.ivancord.scheduler;
+
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.atomic.AtomicInteger;
+
+public class SchedulerThreadFactory implements ThreadFactory
+{
+
+    private AtomicInteger threadCount = new AtomicInteger( 0 );
+    private final ThreadGroup threadGroup = new ThreadGroup( "IvanCord" );
+
+    @Override
+    public Thread newThread(Runnable r)
+    {
+        Thread thread = new Thread( threadGroup, r );
+        thread.setName( "Scheduler Pool Thread #" + threadCount.getAndIncrement() );
+        return thread;
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
index a5e447ac60935fe97e0e450b77c2ef64aa26d2db..7c3b2680956cf361e569a1d772e50d177a06b7c7 100644
--- a/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
+++ b/proxy/src/main/java/net/md_5/bungee/BungeeCord.java
@@ -543,6 +543,17 @@ public class BungeeCord extends ProxyServer
         {
             pluginManager.disablePlugin( plugin );
         }
+        scheduler.scheduler.shutdownNow0();
+        while ( true )
+        {
+            try
+            {
+                scheduler.scheduler.awaitTermination0( Long.MAX_VALUE, TimeUnit.NANOSECONDS );
+                break;
+            } catch ( InterruptedException ignored )
+            {
+            }
+        }
         // IvanCord end
 
         getLogger().info( "Closing IO threads" );
diff --git a/proxy/src/main/java/net/md_5/bungee/scheduler/BungeeScheduler.java b/proxy/src/main/java/net/md_5/bungee/scheduler/BungeeScheduler.java
index fd0dabcf462acab89baa80cc0f2ee946e7939bcb..e33b9496bfe15f3f8782976a06a3544a38b9a17c 100644
--- a/proxy/src/main/java/net/md_5/bungee/scheduler/BungeeScheduler.java
+++ b/proxy/src/main/java/net/md_5/bungee/scheduler/BungeeScheduler.java
@@ -23,6 +23,7 @@ public class BungeeScheduler implements TaskScheduler
     private final AtomicInteger taskCounter = new AtomicInteger();
     private final TIntObjectMap<BungeeTask> tasks = TCollections.synchronizedMap( new TIntObjectHashMap<BungeeTask>() );
     private final Multimap<Plugin, BungeeTask> tasksByPlugin = Multimaps.synchronizedMultimap( HashMultimap.<Plugin, BungeeTask>create() );
+    public com.mrivanplays.ivancord.scheduler.SchedulerExecutor scheduler = com.mrivanplays.ivancord.scheduler.SchedulerExecutor.create(); // IvanCord
     //
     private final Unsafe unsafe = new Unsafe()
     {
@@ -30,7 +31,7 @@ public class BungeeScheduler implements TaskScheduler
         @Override
         public ExecutorService getExecutorService(Plugin plugin)
         {
-            return plugin.getExecutorService();
+            return scheduler; // IvanCord
         }
     };
 
@@ -101,7 +102,7 @@ public class BungeeScheduler implements TaskScheduler
             tasksByPlugin.put( owner, prepared );
         }
 
-        owner.getExecutorService().execute( prepared );
+        scheduler.execute( prepared ); // IvanCord
         return prepared;
     }
 
diff --git a/proxy/src/main/java/net/md_5/bungee/scheduler/BungeeTask.java b/proxy/src/main/java/net/md_5/bungee/scheduler/BungeeTask.java
index 02ec98fc14596330718aa756473cd3cefc600459..6ceda4d1bacfc393e977b90cabab2d46099b0a78 100644
--- a/proxy/src/main/java/net/md_5/bungee/scheduler/BungeeTask.java
+++ b/proxy/src/main/java/net/md_5/bungee/scheduler/BungeeTask.java
@@ -67,7 +67,7 @@ public class BungeeTask implements Runnable, ScheduledTask
             } catch ( Throwable t )
             {
                 //Waterfall start - throw exception event
-                String msg = String.format( "Task %s encountered an exception", this );
+                String msg = String.format( "Task %s from plugin %s encountered an exception", id, owner.getDescription().getName() ); // IvanCord
                 ProxyServer.getInstance().getLogger().log( Level.SEVERE, msg, t );
                 ProxyServer.getInstance().getPluginManager().callEvent( new ProxyExceptionEvent( new ProxySchedulerException( msg, t, this ) ) );
                 //Waterfall end
