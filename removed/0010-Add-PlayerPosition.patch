From dca5293d0fac5256633d66f3e6e6cea897c8c63a Mon Sep 17 00:00:00 2001
From: MrIvanPlays <pekov.ivan@abv.bg>
Date: Sun, 19 May 2019 14:58:39 +0300
Subject: [PATCH] Add PlayerPosition


diff --git a/api/src/main/java/com/github/mrivanplays/ivancord/api/position/Position.java b/api/src/main/java/com/github/mrivanplays/ivancord/api/position/Position.java
new file mode 100644
index 00000000..45c38fde
--- /dev/null
+++ b/api/src/main/java/com/github/mrivanplays/ivancord/api/position/Position.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright 2019 Ivan Pekov (MrIvanPlays)
+
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in the
+ * Software without restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+ * The above copyright notice and this permission notice shall be included in all copies
+ * or substantial portions of the Software.
+
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
+package com.github.mrivanplays.ivancord.api.position;
+
+import lombok.AllArgsConstructor;
+import lombok.EqualsAndHashCode;
+import lombok.Getter;
+import lombok.ToString;
+
+/**
+ * Represents a player position
+ */
+@Getter
+@AllArgsConstructor
+@ToString
+@EqualsAndHashCode
+public class Position
+{
+
+    /**
+     * X axis
+     */
+    private double x;
+
+    /**
+     * Y axis
+     */
+    private double y;
+
+    /**
+     * Z axis
+     */
+    private double z;
+
+    /**
+     * Is the player on ground
+     */
+    private boolean isOnGround;
+}
diff --git a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
index f799ae17..2374ff5e 100644
--- a/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
+++ b/api/src/main/java/net/md_5/bungee/api/connection/ProxiedPlayer.java
@@ -14,6 +14,8 @@ import net.md_5.bungee.api.config.ServerInfo;
 import net.md_5.bungee.api.event.ServerConnectEvent;
 import net.md_5.bungee.api.score.Scoreboard;
 
+import com.github.mrivanplays.ivancord.api.position.Position;
+
 /**
  * Represents a player who's connection is being connected to somewhere else,
  * whether it be a remote or embedded server.
@@ -403,4 +405,22 @@ public interface ProxiedPlayer extends Connection, CommandSender
      * @return this player's {@link Scoreboard}
      */
     Scoreboard getScoreboard();
+
+    // IvanCord start - add player position
+
+    /**
+     * Gets the player position inside the current player's {@link #getServer()}
+     *
+     * @return player position
+     */
+    Position getPosition();
+
+    /**
+     * Sets the player position
+     *
+     * @param position new player position
+     */
+    void setPosition(Position position);
+
+    // IvanCord end
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
index e4f14974..f7f9c46e 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/AbstractPacketHandler.java
@@ -23,6 +23,7 @@ import net.md_5.bungee.protocol.packet.LoginSuccess;
 import net.md_5.bungee.protocol.packet.PingPacket;
 import net.md_5.bungee.protocol.packet.PlayerListHeaderFooter;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
+import net.md_5.bungee.protocol.packet.PlayerPosition; // IvanCord
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.Respawn;
 import net.md_5.bungee.protocol.packet.ScoreboardDisplay;
@@ -185,4 +186,9 @@ public abstract class AbstractPacketHandler
     {
     }
     // Waterfall end
+    // IvanCord start
+    public void handle(PlayerPosition playerPosition) throws Exception
+    {
+    }
+    // IvanCord end
 }
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
index 87093807..3a1f411d 100644
--- a/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/Protocol.java
@@ -29,6 +29,7 @@ import net.md_5.bungee.protocol.packet.LoginSuccess;
 import net.md_5.bungee.protocol.packet.PingPacket;
 import net.md_5.bungee.protocol.packet.PlayerListHeaderFooter;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
+import net.md_5.bungee.protocol.packet.PlayerPosition;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.Respawn;
 import net.md_5.bungee.protocol.packet.ScoreboardDisplay;
@@ -256,6 +257,17 @@ public enum Protocol
                     map( ProtocolConstants.MINECRAFT_1_13, 0x0A ),
                     map( ProtocolConstants.MINECRAFT_1_14, 0x0B )
             );
+            // IvanCord start
+            TO_SERVER.registerPacket(
+                    PlayerPosition.class,
+                    map( ProtocolConstants.MINECRAFT_1_8, 0x04 ),
+                    map( ProtocolConstants.MINECRAFT_1_9, 0x0C ),
+                    map( ProtocolConstants.MINECRAFT_1_12, 0x0E ),
+                    map( ProtocolConstants.MINECRAFT_1_12_2, 0x0D ),
+                    map( ProtocolConstants.MINECRAFT_1_13, 0x10 ),
+                    map( ProtocolConstants.MINECRAFT_1_14, 0x11 )
+            );
+            // IvanCord end
         }
     },
     // 1
diff --git a/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerPosition.java b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerPosition.java
new file mode 100644
index 00000000..f3e4c677
--- /dev/null
+++ b/protocol/src/main/java/net/md_5/bungee/protocol/packet/PlayerPosition.java
@@ -0,0 +1,65 @@
+/*
+ * Copyright 2019 Ivan Pekov (MrIvanPlays)
+
+ * Permission is hereby granted, free of charge, to any person obtaining a copy of
+ * this software and associated documentation files (the "Software"), to deal in the
+ * Software without restriction, including without limitation the rights to use, copy,
+ * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
+
+ * The above copyright notice and this permission notice shall be included in all copies
+ * or substantial portions of the Software.
+
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
+ * OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+ * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
+ * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ **/
+package net.md_5.bungee.protocol.packet;
+
+import io.netty.buffer.ByteBuf;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.EqualsAndHashCode;
+import lombok.NoArgsConstructor;
+import net.md_5.bungee.protocol.AbstractPacketHandler;
+import net.md_5.bungee.protocol.DefinedPacket;
+
+@Data
+@NoArgsConstructor
+@AllArgsConstructor
+@EqualsAndHashCode(callSuper = false)
+public class PlayerPosition extends DefinedPacket
+{
+
+    private double x;
+    private double y;
+    private double z;
+    private boolean onGround;
+
+    @Override
+    public void read(ByteBuf buf)
+    {
+        x = buf.readDouble();
+        y = buf.readDouble();
+        z = buf.readDouble();
+        onGround = buf.readBoolean();
+    }
+
+    @Override
+    public void write(ByteBuf buf)
+    {
+        buf.writeDouble( x );
+        buf.writeDouble( y );
+        buf.writeDouble( z );
+        buf.writeBoolean( onGround );
+    }
+
+    @Override
+    public void handle(AbstractPacketHandler handler) throws Exception
+    {
+        handler.handle( this );
+    }
+}
diff --git a/proxy/src/main/java/net/md_5/bungee/UserConnection.java b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
index 55bff981..dcd2ea2a 100644
--- a/proxy/src/main/java/net/md_5/bungee/UserConnection.java
+++ b/proxy/src/main/java/net/md_5/bungee/UserConnection.java
@@ -57,6 +57,7 @@ import net.md_5.bungee.protocol.packet.Chat;
 import net.md_5.bungee.protocol.packet.ClientSettings;
 import net.md_5.bungee.protocol.packet.Kick;
 import net.md_5.bungee.protocol.packet.PlayerListHeaderFooter;
+import net.md_5.bungee.protocol.packet.PlayerPosition;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.SetCompression;
 import net.md_5.bungee.tab.ServerUnique;
@@ -64,6 +65,8 @@ import net.md_5.bungee.tab.TabList;
 import net.md_5.bungee.util.CaseInsensitiveSet;
 import net.md_5.bungee.util.ChatComponentTransformer;
 
+import com.github.mrivanplays.ivancord.api.position.Position;
+
 @RequiredArgsConstructor
 public final class UserConnection implements ProxiedPlayer
 {
@@ -154,6 +157,9 @@ public final class UserConnection implements ProxiedPlayer
             ch.write( packet );
         }
     };
+    // IvanCord start - add player position
+    @Getter
+    private Position position;
 
     public void init()
     {
@@ -765,6 +771,20 @@ public final class UserConnection implements ProxiedPlayer
         return serverSentScoreboard;
     }
 
+    // IvanCord start - player position
+    @Override
+    public void setPosition(Position position)
+    {
+        setPosition0( position );
+        unsafe().sendPacket( new PlayerPosition( position.getX(), position.getY(), position.getZ(), position.isOnGround() ) );
+    }
+
+    public void setPosition0(Position position)
+    {
+        this.position = position;
+    }
+    // IvanCord end
+
     // Waterfall start
     public boolean isDisableEntityMetadataRewrite() {
         return disableEntityMetadaRewrite;
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
index 693fdc6c..9ef82d98 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/DownstreamBridge.java
@@ -57,6 +57,7 @@ import net.md_5.bungee.protocol.packet.EntityRemoveEffect;
 import net.md_5.bungee.protocol.packet.KeepAlive;
 import net.md_5.bungee.protocol.packet.Kick;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
+import net.md_5.bungee.protocol.packet.PlayerPosition;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.Respawn;
 import net.md_5.bungee.protocol.packet.ScoreboardDisplay;
@@ -685,6 +686,24 @@ public class DownstreamBridge extends PacketHandler
 
     // IvanCord end
 
+    // IvanCord start - handle player position
+    @Override
+    public void handle(PlayerPosition position)
+    {
+        boolean changed = true;
+        com.github.mrivanplays.ivancord.api.position.Position conPos = con.getPosition();
+        if ( conPos.getX() == position.getX() && conPos.getY() == position.getY() && conPos.getZ() == position.getZ() && conPos.isOnGround() == position.isOnGround() )
+        {
+            changed = false;
+        }
+        if ( changed )
+        {
+            con.unsafe().sendPacket( position );
+            throw CancelSendSignal.INSTANCE;
+        }
+    }
+    // IvanCord end
+
     @Override
     public String toString()
     {
diff --git a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
index 51d0c6cf..53883829 100644
--- a/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
+++ b/proxy/src/main/java/net/md_5/bungee/connection/UpstreamBridge.java
@@ -28,10 +28,13 @@ import net.md_5.bungee.protocol.packet.Chat;
 import net.md_5.bungee.protocol.packet.ClientSettings;
 import net.md_5.bungee.protocol.packet.KeepAlive;
 import net.md_5.bungee.protocol.packet.PlayerListItem;
+import net.md_5.bungee.protocol.packet.PlayerPosition;
 import net.md_5.bungee.protocol.packet.PluginMessage;
 import net.md_5.bungee.protocol.packet.TabCompleteRequest;
 import net.md_5.bungee.protocol.packet.TabCompleteResponse;
 
+import com.github.mrivanplays.ivancord.api.position.Position;
+
 public class UpstreamBridge extends PacketHandler
 {
 
@@ -266,6 +269,15 @@ public class UpstreamBridge extends PacketHandler
         }
     }
 
+    // IvanCord start - handle player position
+    @Override
+    public void handle(PlayerPosition playerPosition)
+    {
+        Position position = new Position( playerPosition.getX(), playerPosition.getY(), playerPosition.getZ(), playerPosition.isOnGround() );
+        con.setPosition0( position );
+    }
+    // IvanCord end
+
     @Override
     public String toString()
     {
-- 
2.21.0.windows.1

